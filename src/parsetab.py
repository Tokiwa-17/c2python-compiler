
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND_OP ASSIGN_OP AUTO BOOL BREAK CASE CHAR CONST CONSTANT CONTINUE DEFAULT DO DOUBLE ELLIPSIS ELSE ENUM EQ_NE EXTERN FLOAT FOR GE_LE GOTO IDENTIFIER IF INC_DEC INLINE INT LONG OR_OP PTR_OP REGISTER RESTRICT RETURN SHIFT_OP SHORT SIGNED SIZEOF STATIC STRING_LITERAL STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE translation_unit : external_declaration\n                         | translation_unit external_declaration  primary_expression : IDENTIFIER\n                           | CONSTANT\n                           | STRING_LITERAL\n                           | '(' expression ')'  postfix_expression : primary_expression\n                           | postfix_expression '[' expression ']'\n                           | postfix_expression '(' ')'\n                           | postfix_expression '(' argument_expression_list ')'\n                           | postfix_expression '.' IDENTIFIER\n                           | postfix_expression PTR_OP IDENTIFIER\n                           | postfix_expression INC_DEC\n                           | '(' type_name ')' '{' initializer_list '}'\n                           | '(' type_name ')' '{' initializer_list ',' '}'  argument_expression_list : assignment_expression\n                                 | argument_expression_list ',' assignment_expression  unary_expression : postfix_expression\n                         | INC_DEC unary_expression\n                         | unary_operator cast_expression\n                         | SIZEOF unary_expression\n                         | SIZEOF '(' type_name ')'  unary_operator : '&'\n                       | '*'\n                       | '+'\n                       | '-'\n                       | '~'\n                       | '!'  cast_expression : unary_expression\n                        | '(' type_name ')' cast_expression  multiplicative_expression : cast_expression\n                                  | multiplicative_expression '*' cast_expression\n                                  | multiplicative_expression '/' cast_expression\n                                  | multiplicative_expression '%' cast_expression  additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression  shift_expression : additive_expression\n                         | shift_expression SHIFT_OP additive_expression  relational_expression : shift_expression\n                              | relational_expression '<' shift_expression\n                              | relational_expression '>' shift_expression\n                              | relational_expression GE_LE shift_expression  equality_expression : relational_expression\n                            | equality_expression EQ_NE relational_expression  and_expression : equality_expression\n                       | and_expression '&' equality_expression  exclusive_or_expression : and_expression\n                                | exclusive_or_expression '^' and_expression  inclusive_or_expression : exclusive_or_expression\n                                | inclusive_or_expression '|' exclusive_or_expression  logical_and_expression : inclusive_or_expression\n                               | logical_and_expression AND_OP inclusive_or_expression  logical_or_expression : logical_and_expression\n                              | logical_or_expression OR_OP logical_and_expression  conditional_expression : logical_or_expression\n                               | logical_or_expression '?' expression ':' conditional_expression  constant_expression : conditional_expression  assignment_operator : '='\n                            | ASSIGN_OP  declaration : declaration_specifiers ';'\n                    | declaration_specifiers init_declarator_list ';'  declaration_specifiers \t: storage_class_specifier\n                                | storage_class_specifier declaration_specifiers\n                                | type_specifier\n                                | type_specifier declaration_specifiers\n                                | type_qualifier\n                                | type_qualifier declaration_specifiers\n                                | function_specifier\n                                | function_specifier declaration_specifiers  init_declarator_list : init_declarator\n                             | init_declarator_list ',' init_declarator  init_declarator : declarator\n                        | declarator '=' initializer  storage_class_specifier : TYPEDEF\n                                | EXTERN\n                                | STATIC\n                                | AUTO\n                                | REGISTER  type_specifier : VOID\n                       | CHAR\n                       | SHORT\n                       | INT\n                       | LONG\n                       | FLOAT\n                       | DOUBLE\n                       | SIGNED\n                       | UNSIGNED\n                       | BOOL\n                       | struct_or_union_specifier\n                       | enum_specifier  struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'\n                                  | struct_or_union '{' struct_declaration_list '}'\n                                  | struct_or_union IDENTIFIER  struct_or_union : STRUCT\n                        | UNION  struct_declaration_list : struct_declaration\n                                | struct_declaration_list struct_declaration  struct_declaration : specifier_qualifier_list struct_declarator_list ';'  specifier_qualifier_list : type_specifier specifier_qualifier_list\n                                 | type_specifier\n                                 | type_qualifier specifier_qualifier_list\n                                 | type_qualifier   struct_declarator_list : struct_declarator\n                               | struct_declarator_list ',' struct_declarator  struct_declarator : declarator\n                          | ':' constant_expression\n                          | declarator ':' constant_expression  enum_specifier : ENUM '{' enumerator_list '}'\n                        | ENUM IDENTIFIER '{' enumerator_list '}'\n                        | ENUM '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER  enumerator_list : enumerator\n                        | enumerator_list ',' enumerator  enumerator : IDENTIFIER\n                   | IDENTIFIER '=' constant_expression  type_qualifier : CONST\n                       | RESTRICT\n                       | VOLATILE  function_specifier : INLINE  declarator : pointer direct_declarator\n                   | direct_declarator  direct_declarator : IDENTIFIER\n                        | '(' declarator ')'\n                        | direct_declarator '[' type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list ']'\n                        | direct_declarator '[' assignment_expression ']'\n                        | direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list '*' ']'\n                        | direct_declarator '[' '*' ']'\n                        | direct_declarator '[' ']'\n                        | direct_declarator '(' parameter_type_list ')'\n                        | direct_declarator '(' identifier_list ')'\n                        | direct_declarator '(' ')'  pointer : '*'\n                | '*' type_qualifier_list\n                | '*' pointer\n                | '*' type_qualifier_list pointer  type_qualifier_list : type_qualifier\n                            | type_qualifier_list type_qualifier  parameter_type_list : parameter_list\n                            | parameter_list ',' ELLIPSIS  parameter_list : parameter_declaration\n                       | parameter_list ',' parameter_declaration  parameter_declaration : declaration_specifiers declarator\n                              | declaration_specifiers abstract_declarator\n                              | declaration_specifiers  identifier_list : IDENTIFIER\n                        | identifier_list ',' IDENTIFIER  type_name : specifier_qualifier_list\n                  | specifier_qualifier_list abstract_declarator  abstract_declarator : pointer\n                            | direct_abstract_declarator\n                            | pointer direct_abstract_declarator  direct_abstract_declarator : '(' abstract_declarator ')'\n                                   | '[' ']'\n                                   | '[' assignment_expression ']'\n                                   | direct_abstract_declarator '[' ']'\n                                   | direct_abstract_declarator '[' assignment_expression ']'\n                                   | '[' '*' ']'\n                                   | direct_abstract_declarator '[' '*' ']'\n                                   | '(' ')'\n                                   | '(' parameter_type_list ')'\n                                   | direct_abstract_declarator '(' ')'\n                                   | direct_abstract_declarator '(' parameter_type_list ')'  initializer : assignment_expression\n                    | '{' initializer_list '}'\n                    | '{' initializer_list ',' '}'  initializer_list : initializer\n                         | designation initializer\n                         | initializer_list ',' initializer\n                         | initializer_list ',' designation initializer  designation : designator_list '='  designator_list : designator\n                        | designator_list designator  designator : '[' constant_expression ']'\n                   | '.' IDENTIFIER  statement : labeled_statement\n                  | compound_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement  labeled_statement : IDENTIFIER ':' statement\n                          | CASE constant_expression ':' statement\n                          | DEFAULT ':' statement  compound_statement : '{' '}'\n                           | '{' block_item_list '}'  block_item_list : block_item\n                        | block_item_list block_item  block_item : declaration\n                   | statement  expression_statement : ';'\n                             | expression ';'  selection_statement : IF '(' expression ')' statement ELSE statement\n                            | IF '(' expression ')' statement\n                            | SWITCH '(' expression ')' statement  iteration_statement : WHILE '(' expression ')' statement\n                            | DO statement WHILE '(' expression ')' ';'\n                            | FOR '(' expression_statement expression_statement ')' statement\n                            | FOR '(' expression_statement expression_statement expression ')' statement\n                            | FOR '(' declaration expression_statement ')' statement\n                            | FOR '(' declaration expression_statement expression ')' statement  jump_statement : GOTO IDENTIFIER ';'\n                       | CONTINUE ';'\n                       | BREAK ';'\n                       | RETURN ';'\n                       | RETURN expression ';'  external_declaration : function_definition\n                             | declaration  function_definition : declaration_specifiers declarator declaration_list compound_statement\n                            | declaration_specifiers declarator compound_statement  declaration_list : declaration\n                         | declaration_list declaration  expression : assignment_expression\n                   | expression ',' assignment_expression  assignment_expression : conditional_expression\n                              | unary_expression assignment_operator assignment_expression "
    
_lr_action_items = {'TYPEDEF':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[10,10,-1,-211,-212,10,10,10,10,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,10,-61,-123,-124,-94,-113,10,-214,-215,10,-62,-122,10,-213,-216,-189,10,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,-93,-109,-190,-192,-196,10,-207,-208,-209,-127,-128,-132,-134,-135,10,10,-92,-111,-110,10,-186,-188,-206,-210,-126,-131,10,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'EXTERN':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[11,11,-1,-211,-212,11,11,11,11,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,11,-61,-123,-124,-94,-113,11,-214,-215,11,-62,-122,11,-213,-216,-189,11,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,-93,-109,-190,-192,-196,11,-207,-208,-209,-127,-128,-132,-134,-135,11,11,-92,-111,-110,11,-186,-188,-206,-210,-126,-131,11,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'STATIC':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,62,63,66,79,80,112,113,114,115,116,117,118,119,120,121,122,123,139,141,145,152,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[12,12,-1,-211,-212,12,12,12,12,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,12,-61,-123,-124,-94,-113,12,-214,-215,12,-62,-122,142,12,-141,-213,-216,-189,12,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,228,-133,-136,-142,-125,-93,-109,-190,-192,-196,12,-207,-208,-209,-127,-128,-132,-134,-135,12,12,-92,-111,-110,12,-186,-188,-206,-210,-126,-131,12,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'AUTO':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[13,13,-1,-211,-212,13,13,13,13,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,13,-61,-123,-124,-94,-113,13,-214,-215,13,-62,-122,13,-213,-216,-189,13,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,-93,-109,-190,-192,-196,13,-207,-208,-209,-127,-128,-132,-134,-135,13,13,-92,-111,-110,13,-186,-188,-206,-210,-126,-131,13,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'REGISTER':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[14,14,-1,-211,-212,14,14,14,14,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,14,-61,-123,-124,-94,-113,14,-214,-215,14,-62,-122,14,-213,-216,-189,14,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,-93,-109,-190,-192,-196,14,-207,-208,-209,-127,-128,-132,-134,-135,14,14,-92,-111,-110,14,-186,-188,-206,-210,-126,-131,14,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'VOID':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[15,15,-1,-211,-212,15,15,15,15,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,15,-61,-123,-124,-94,15,-113,15,-214,-215,15,-62,-122,15,15,15,-97,15,15,-213,-216,15,-189,15,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,15,-93,-98,-109,15,15,15,-190,-192,-196,15,-207,-208,-209,-127,-128,-132,-134,-135,15,15,-92,-99,-111,-110,15,-186,-188,-206,-210,-126,-131,15,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'CHAR':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[16,16,-1,-211,-212,16,16,16,16,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,16,-61,-123,-124,-94,16,-113,16,-214,-215,16,-62,-122,16,16,16,-97,16,16,-213,-216,16,-189,16,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,16,-93,-98,-109,16,16,16,-190,-192,-196,16,-207,-208,-209,-127,-128,-132,-134,-135,16,16,-92,-99,-111,-110,16,-186,-188,-206,-210,-126,-131,16,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'SHORT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[17,17,-1,-211,-212,17,17,17,17,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,17,-61,-123,-124,-94,17,-113,17,-214,-215,17,-62,-122,17,17,17,-97,17,17,-213,-216,17,-189,17,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,17,-93,-98,-109,17,17,17,-190,-192,-196,17,-207,-208,-209,-127,-128,-132,-134,-135,17,17,-92,-99,-111,-110,17,-186,-188,-206,-210,-126,-131,17,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'INT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[18,18,-1,-211,-212,18,18,18,18,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,18,-61,-123,-124,-94,18,-113,18,-214,-215,18,-62,-122,18,18,18,-97,18,18,-213,-216,18,-189,18,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,18,-93,-98,-109,18,18,18,-190,-192,-196,18,-207,-208,-209,-127,-128,-132,-134,-135,18,18,-92,-99,-111,-110,18,-186,-188,-206,-210,-126,-131,18,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'LONG':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[19,19,-1,-211,-212,19,19,19,19,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,19,-61,-123,-124,-94,19,-113,19,-214,-215,19,-62,-122,19,19,19,-97,19,19,-213,-216,19,-189,19,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,19,-93,-98,-109,19,19,19,-190,-192,-196,19,-207,-208,-209,-127,-128,-132,-134,-135,19,19,-92,-99,-111,-110,19,-186,-188,-206,-210,-126,-131,19,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'FLOAT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[20,20,-1,-211,-212,20,20,20,20,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,20,-61,-123,-124,-94,20,-113,20,-214,-215,20,-62,-122,20,20,20,-97,20,20,-213,-216,20,-189,20,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,20,-93,-98,-109,20,20,20,-190,-192,-196,20,-207,-208,-209,-127,-128,-132,-134,-135,20,20,-92,-99,-111,-110,20,-186,-188,-206,-210,-126,-131,20,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'DOUBLE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[21,21,-1,-211,-212,21,21,21,21,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,21,-61,-123,-124,-94,21,-113,21,-214,-215,21,-62,-122,21,21,21,-97,21,21,-213,-216,21,-189,21,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,21,-93,-98,-109,21,21,21,-190,-192,-196,21,-207,-208,-209,-127,-128,-132,-134,-135,21,21,-92,-99,-111,-110,21,-186,-188,-206,-210,-126,-131,21,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'SIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[22,22,-1,-211,-212,22,22,22,22,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,22,-61,-123,-124,-94,22,-113,22,-214,-215,22,-62,-122,22,22,22,-97,22,22,-213,-216,22,-189,22,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,22,-93,-98,-109,22,22,22,-190,-192,-196,22,-207,-208,-209,-127,-128,-132,-134,-135,22,22,-92,-99,-111,-110,22,-186,-188,-206,-210,-126,-131,22,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'UNSIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[23,23,-1,-211,-212,23,23,23,23,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,23,-61,-123,-124,-94,23,-113,23,-214,-215,23,-62,-122,23,23,23,-97,23,23,-213,-216,23,-189,23,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,23,-93,-98,-109,23,23,23,-190,-192,-196,23,-207,-208,-209,-127,-128,-132,-134,-135,23,23,-92,-99,-111,-110,23,-186,-188,-206,-210,-126,-131,23,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'BOOL':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[24,24,-1,-211,-212,24,24,24,24,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,24,-61,-123,-124,-94,24,-113,24,-214,-215,24,-62,-122,24,24,24,-97,24,24,-213,-216,24,-189,24,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,24,-93,-98,-109,24,24,24,-190,-192,-196,24,-207,-208,-209,-127,-128,-132,-134,-135,24,24,-92,-99,-111,-110,24,-186,-188,-206,-210,-126,-131,24,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'CONST':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[27,27,-1,-211,-212,27,27,27,27,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,27,-61,-123,27,-124,-94,27,-113,27,-214,-215,27,-62,-122,27,27,27,-141,27,27,-97,27,27,-213,-216,27,-189,27,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,27,-133,27,-136,-142,-125,27,-93,-98,-109,27,27,27,-190,-192,-196,27,-207,-208,-209,-127,-128,27,-132,-134,-135,27,27,-92,-99,-111,-110,27,-186,-188,-206,-210,-126,-131,27,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'RESTRICT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[28,28,-1,-211,-212,28,28,28,28,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,28,-61,-123,28,-124,-94,28,-113,28,-214,-215,28,-62,-122,28,28,28,-141,28,28,-97,28,28,-213,-216,28,-189,28,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,28,-133,28,-136,-142,-125,28,-93,-98,-109,28,28,28,-190,-192,-196,28,-207,-208,-209,-127,-128,28,-132,-134,-135,28,28,-92,-99,-111,-110,28,-186,-188,-206,-210,-126,-131,28,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'VOLATILE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[29,29,-1,-211,-212,29,29,29,29,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,29,-61,-123,29,-124,-94,29,-113,29,-214,-215,29,-62,-122,29,29,29,-141,29,29,-97,29,29,-213,-216,29,-189,29,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,29,-133,29,-136,-142,-125,29,-93,-98,-109,29,29,29,-190,-192,-196,29,-207,-208,-209,-127,-128,29,-132,-134,-135,29,29,-92,-99,-111,-110,29,-186,-188,-206,-210,-126,-131,29,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'INLINE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[30,30,-1,-211,-212,30,30,30,30,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,30,-61,-123,-124,-94,-113,30,-214,-215,30,-62,-122,30,-213,-216,-189,30,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,-93,-109,-190,-192,-196,30,-207,-208,-209,-127,-128,-132,-134,-135,30,30,-92,-111,-110,30,-186,-188,-206,-210,-126,-131,30,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'ENUM':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[32,32,-1,-211,-212,32,32,32,32,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,32,-61,-123,-124,-94,32,-113,32,-214,-215,32,-62,-122,32,32,32,-97,32,32,-213,-216,32,-189,32,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,32,-93,-98,-109,32,32,32,-190,-192,-196,32,-207,-208,-209,-127,-128,-132,-134,-135,32,32,-92,-99,-111,-110,32,-186,-188,-206,-210,-126,-131,32,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'STRUCT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[33,33,-1,-211,-212,33,33,33,33,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,33,-61,-123,-124,-94,33,-113,33,-214,-215,33,-62,-122,33,33,33,-97,33,33,-213,-216,33,-189,33,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,33,-93,-98,-109,33,33,33,-190,-192,-196,33,-207,-208,-209,-127,-128,-132,-134,-135,33,33,-92,-99,-111,-110,33,-186,-188,-206,-210,-126,-131,33,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'UNION':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[34,34,-1,-211,-212,34,34,34,34,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-2,34,-61,-123,-124,-94,34,-113,34,-214,-215,34,-62,-122,34,34,34,-97,34,34,-213,-216,34,-189,34,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-133,-136,-125,34,-93,-98,-109,34,34,34,-190,-192,-196,34,-207,-208,-209,-127,-128,-132,-134,-135,34,34,-92,-99,-111,-110,34,-186,-188,-206,-210,-126,-131,34,-112,-187,-130,-129,-198,-199,-200,-202,-204,-197,-201,-203,-205,]),'$end':([1,2,3,4,35,37,55,59,79,112,208,],[0,-1,-211,-212,-2,-61,-214,-62,-213,-189,-190,]),';':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,40,41,43,45,46,47,48,49,52,53,58,59,61,78,81,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,131,134,135,136,137,138,141,145,153,155,157,158,159,163,183,184,186,187,189,208,209,210,212,213,214,220,221,222,223,224,225,227,230,232,233,234,243,247,248,251,253,260,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,299,300,301,302,303,305,319,320,321,322,327,328,332,334,335,336,337,338,342,343,354,357,358,359,361,363,368,370,371,372,373,374,375,376,377,378,379,380,],[37,-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-73,-61,59,-123,-71,-124,-64,-66,-68,-70,-94,-113,37,117,-62,-122,-73,-74,-168,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-189,117,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,214,117,222,223,224,-217,-72,-133,-136,-125,-93,244,-104,-106,-109,-13,-19,-20,-29,-21,-190,-192,117,-58,117,-196,117,301,-207,-208,-209,302,-127,-128,-132,-134,-135,-92,-107,-111,-110,-169,-220,-55,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-186,117,-188,-218,117,117,-206,-210,-126,-131,-105,-108,-112,-170,-8,-10,-22,-30,-187,117,117,117,-130,-129,-57,-198,-199,-200,117,117,-14,117,378,-202,117,-204,117,-15,-197,-201,-203,-205,]),'*':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,42,44,45,46,47,48,49,52,53,56,58,59,60,62,64,66,71,72,73,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,150,152,155,160,161,162,163,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,241,242,243,245,246,248,251,254,256,264,267,268,272,273,276,286,287,288,289,290,291,292,293,299,300,301,302,311,318,321,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[42,-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-61,42,42,-64,-66,-68,-70,-94,-113,42,97,97,-62,42,143,42,-141,42,-101,-103,97,-29,-18,97,97,-31,97,97,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,205,-189,97,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,97,97,97,229,-24,42,-142,-93,97,-100,-102,-109,97,97,97,97,-59,-60,97,97,97,97,-13,-19,97,-20,-29,97,-21,97,42,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-190,-192,97,97,-196,97,97,97,97,97,-207,-208,-209,97,-24,97,42,318,-92,42,97,-111,-110,97,-175,-9,-11,-12,97,-6,42,205,205,-32,-33,-34,-186,97,-188,97,97,-206,-210,346,-24,-112,97,97,-8,-10,97,97,-22,97,-30,-187,97,97,97,97,97,97,-24,-198,-199,-200,97,97,-14,97,97,-202,97,-204,97,-15,-197,-201,-203,-205,]),'IDENTIFIER':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,39,42,44,45,46,47,48,49,51,52,53,56,58,59,60,62,63,64,65,66,71,72,73,77,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,133,136,139,143,150,151,152,155,160,161,162,163,164,165,169,172,173,174,175,176,177,178,179,180,181,182,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,235,239,241,242,243,245,246,248,251,252,254,256,272,291,292,293,299,300,301,302,311,318,321,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[43,-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,49,52,-95,-96,-61,43,-137,43,-64,-66,-68,-70,-94,76,-113,43,95,124,-62,43,95,148,-138,-139,-141,43,-101,-103,76,95,95,95,95,95,-23,-24,-25,-26,-27,-28,-189,124,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,95,124,221,95,95,-24,43,-140,-142,-93,95,-100,-102,-109,76,95,95,95,259,95,-59,-60,95,95,95,95,267,268,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-190,-192,124,124,-196,95,95,95,95,95,-207,-208,-209,95,-24,95,307,43,43,95,-92,43,95,-111,-110,76,95,-175,95,-186,124,-188,95,95,-206,-210,95,-24,-112,95,95,95,95,95,-187,124,124,124,95,95,95,-24,-198,-199,-200,124,124,95,124,-202,124,-204,124,-197,-201,-203,-205,]),'(':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,39,40,42,43,44,45,46,47,48,49,52,53,56,58,59,60,61,62,64,65,66,71,72,73,83,87,88,89,91,92,94,95,96,97,98,99,100,101,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,136,139,141,143,145,150,151,152,153,155,160,161,162,163,165,169,172,174,175,176,177,178,179,180,183,185,188,190,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,227,228,229,230,231,232,233,234,239,240,241,242,243,245,246,248,251,254,256,264,267,268,272,273,275,276,291,292,293,298,299,300,301,302,303,305,310,311,313,316,318,321,324,326,327,328,329,331,333,335,336,337,338,339,340,341,342,343,344,346,347,349,350,351,352,357,358,359,361,363,365,366,367,368,369,370,372,373,374,375,376,377,378,379,380,],[44,-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-61,44,63,-137,-124,44,-64,-66,-68,-70,-94,-113,44,92,92,-62,44,63,92,-138,-139,-141,44,-101,-103,92,180,185,188,190,92,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,-189,92,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,188,216,217,218,92,220,92,92,-133,-24,-136,241,-140,-142,-125,-93,188,-100,-102,-109,188,92,188,92,-59,-60,92,188,92,92,-13,92,92,92,276,188,188,188,188,188,188,188,188,188,188,188,188,188,188,-190,-192,92,92,-196,92,92,92,92,92,-207,-208,-209,-127,92,-24,-128,92,-132,-134,-135,241,312,241,92,-92,44,188,-111,-110,92,-175,-9,-11,-12,188,-6,276,276,-186,92,-188,339,92,92,-206,-210,-126,-131,312,92,-164,-158,-24,-112,92,188,-8,-10,92,188,92,-187,92,92,92,92,92,92,-130,-129,-160,-24,-166,-157,-165,-159,-162,-198,-199,-200,92,92,-161,-163,-167,-14,92,92,-202,92,-204,92,-15,-197,-201,-203,-205,]),'[':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,64,65,66,72,73,83,87,94,95,103,104,124,141,145,150,151,152,153,155,161,162,163,170,171,183,193,227,230,232,233,234,239,240,241,243,248,251,254,257,259,264,267,268,273,275,276,303,305,310,313,316,321,325,327,328,333,342,343,344,347,349,350,351,352,365,366,367,368,369,376,],[-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,62,-137,-124,-64,-66,-68,-70,-94,-113,62,-138,-139,-141,-101,-103,172,179,-7,-3,-4,-5,-3,-133,-136,242,-140,-142,-125,-93,-100,-102,-109,172,-176,-13,242,-127,-128,-132,-134,-135,242,311,242,-92,-111,-110,172,-177,-179,-9,-11,-12,-6,242,242,-126,-131,311,-164,-158,-112,-178,-8,-10,172,-130,-129,-160,-166,-157,-165,-159,-162,-161,-163,-167,-14,172,-15,]),',':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,38,40,41,42,43,45,46,47,48,49,52,61,64,65,66,74,75,76,78,81,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,127,137,138,141,145,146,147,148,149,150,151,152,153,155,157,158,159,163,166,167,168,183,184,186,187,189,192,212,225,227,230,232,233,234,237,238,239,240,243,247,248,249,250,251,253,255,260,261,262,263,264,265,266,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,295,296,297,303,305,307,309,310,313,316,319,320,321,322,323,327,328,332,334,342,343,344,347,349,350,351,352,353,354,355,356,360,362,364,365,366,367,368,376,],[-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-73,60,-123,-71,-137,-124,-64,-66,-68,-70,-94,-113,-122,-138,-139,-141,164,-114,-116,-73,-74,-168,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-3,215,-217,-72,-133,-136,235,236,-150,-145,-149,-140,-142,-125,-93,245,-104,-106,-109,252,254,-171,-13,-19,-20,-29,-21,215,-58,215,-127,-128,-132,-134,-135,-147,-148,-154,-155,-92,-107,-111,-115,-117,-110,-169,-172,-220,215,-55,215,-9,329,-16,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-218,215,215,215,-126,-131,-151,-146,-156,-164,-158,-105,-108,-112,-170,-173,-8,-10,-22,-30,-130,-129,-160,-166,-157,-165,-159,-162,-174,-57,-17,369,215,215,215,-161,-163,-167,-14,-15,]),')':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,63,64,65,66,67,72,73,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,117,137,141,144,145,146,147,148,149,150,151,152,153,155,161,162,163,180,183,184,186,187,189,191,192,193,214,227,230,232,233,234,237,238,239,240,241,243,248,251,260,262,264,265,266,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,295,296,297,303,305,307,308,309,310,312,313,314,315,316,321,327,328,332,334,340,341,342,343,344,347,348,349,350,351,352,354,355,360,362,364,365,366,367,368,376,],[-63,-65,-67,-69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-121,-123,-137,-124,-64,-66,-68,-70,-94,-113,-122,145,-138,-139,-141,153,-101,-103,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-195,-217,-133,233,-136,234,-143,-150,-145,-149,-140,-142,-125,-93,-100,-102,-109,264,-13,-19,-20,-29,-21,272,273,-152,-196,-127,-128,-132,-134,-135,-147,-148,-154,-155,313,-92,-111,-110,-220,-55,-9,328,-16,-11,-12,330,331,332,-6,-153,-154,313,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-218,336,337,338,-126,-131,-151,-144,-146,-156,347,-164,349,350,-158,-112,-8,-10,-22,-30,361,363,-130,-129,-160,-166,367,-157,-165,-159,-162,-57,-17,371,373,375,-161,-163,-167,-14,-15,]),':':([15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40,43,49,52,61,71,72,73,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,126,137,141,145,153,155,159,161,162,163,183,184,186,187,189,211,212,227,230,232,233,234,243,245,248,251,260,261,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,303,305,321,327,328,332,334,342,343,354,368,376,],[-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-118,-119,-120,-123,-124,-94,-113,-122,160,-101,-103,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,210,213,-217,-133,-136,-125,-93,246,-100,-102,-109,-13,-19,-20,-29,-21,292,-58,-127,-128,-132,-134,-135,-92,160,-111,-110,-220,326,-55,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-218,-126,-131,-112,-8,-10,-22,-30,-130,-129,-57,-14,-15,]),']':([27,28,29,62,66,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,137,139,140,143,152,183,184,186,187,189,212,226,229,242,258,260,262,263,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,304,306,311,317,318,327,328,332,334,345,346,354,368,376,],[-118,-119,-120,141,-141,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-217,227,230,232,-142,-13,-19,-20,-29,-21,-58,303,305,316,325,-220,-55,327,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-218,342,343,344,351,352,-8,-10,-22,-30,365,366,-57,-14,-15,]),'INC_DEC':([27,28,29,37,56,58,59,62,66,83,87,88,89,91,92,94,95,96,97,98,99,100,101,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-118,-119,-120,-61,88,88,-62,88,-141,88,183,88,88,88,88,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,-189,88,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,88,88,88,88,-24,-142,88,88,88,88,88,-59,-60,88,88,88,88,-13,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-190,-192,88,88,-196,88,88,88,88,88,-207,-208,-209,88,-24,88,88,88,88,-175,-9,-11,-12,88,-6,-186,88,-188,88,88,-206,-210,88,-24,88,88,-8,-10,88,88,88,-187,88,88,88,88,88,88,-24,-198,-199,-200,88,88,-14,88,88,-202,88,-204,88,-15,-197,-201,-203,-205,]),'SIZEOF':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-118,-119,-120,-61,91,91,-62,91,-141,91,91,91,91,91,-23,-24,-25,-26,-27,-28,-189,91,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,91,91,91,91,-24,-142,91,91,91,91,91,-59,-60,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-190,-192,91,91,-196,91,91,91,91,91,-207,-208,-209,91,-24,91,91,91,91,-175,91,-186,91,-188,91,91,-206,-210,91,-24,91,91,91,91,91,-187,91,91,91,91,91,91,-24,-198,-199,-200,91,91,91,91,-202,91,-204,91,-197,-201,-203,-205,]),'&':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-118,-119,-120,-61,96,96,-62,96,-141,96,-29,-18,96,96,-31,96,96,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,197,-46,-44,-40,-38,-35,-189,96,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,96,96,96,96,-24,-142,96,96,96,96,96,-59,-60,96,96,96,96,-13,-19,96,-20,-29,96,-21,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-190,-192,96,96,-196,96,96,96,96,96,-207,-208,-209,96,-24,96,96,96,96,-175,-9,-11,-12,96,-6,197,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-186,96,-188,96,96,-206,-210,96,-24,96,96,-8,-10,96,96,-22,96,-30,-187,96,96,96,96,96,96,-24,-198,-199,-200,96,96,-14,96,96,-202,96,-204,96,-15,-197,-201,-203,-205,]),'+':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-118,-119,-120,-61,98,98,-62,98,-141,98,-29,-18,98,98,-31,98,98,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,203,-35,-189,98,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,98,98,98,98,-24,-142,98,98,98,98,98,-59,-60,98,98,98,98,-13,-19,98,-20,-29,98,-21,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-190,-192,98,98,-196,98,98,98,98,98,-207,-208,-209,98,-24,98,98,98,98,-175,-9,-11,-12,98,-6,203,-36,-37,-32,-33,-34,-186,98,-188,98,98,-206,-210,98,-24,98,98,-8,-10,98,98,-22,98,-30,-187,98,98,98,98,98,98,-24,-198,-199,-200,98,98,-14,98,98,-202,98,-204,98,-15,-197,-201,-203,-205,]),'-':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-118,-119,-120,-61,99,99,-62,99,-141,99,-29,-18,99,99,-31,99,99,-7,-3,-23,-24,-25,-26,-27,-28,-4,-5,204,-35,-189,99,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,-3,99,99,99,99,-24,-142,99,99,99,99,99,-59,-60,99,99,99,99,-13,-19,99,-20,-29,99,-21,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-190,-192,99,99,-196,99,99,99,99,99,-207,-208,-209,99,-24,99,99,99,99,-175,-9,-11,-12,99,-6,204,-36,-37,-32,-33,-34,-186,99,-188,99,99,-206,-210,99,-24,99,99,-8,-10,99,99,-22,99,-30,-187,99,99,99,99,99,99,-24,-198,-199,-200,99,99,-14,99,99,-202,99,-204,99,-15,-197,-201,-203,-205,]),'~':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-118,-119,-120,-61,100,100,-62,100,-141,100,100,100,100,100,-23,-24,-25,-26,-27,-28,-189,100,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,100,100,100,100,-24,-142,100,100,100,100,100,-59,-60,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-190,-192,100,100,-196,100,100,100,100,100,-207,-208,-209,100,-24,100,100,100,100,-175,100,-186,100,-188,100,100,-206,-210,100,-24,100,100,100,100,100,-187,100,100,100,100,100,100,-24,-198,-199,-200,100,100,100,100,-202,100,-204,100,-197,-201,-203,-205,]),'!':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-118,-119,-120,-61,101,101,-62,101,-141,101,101,101,101,101,-23,-24,-25,-26,-27,-28,-189,101,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,101,101,101,101,-24,-142,101,101,101,101,101,-59,-60,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-190,-192,101,101,-196,101,101,101,101,101,-207,-208,-209,101,-24,101,101,101,101,-175,101,-186,101,-188,101,101,-206,-210,101,-24,101,101,101,101,101,-187,101,101,101,101,101,101,-24,-198,-199,-200,101,101,101,101,-202,101,-204,101,-197,-201,-203,-205,]),'CONSTANT':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-118,-119,-120,-61,103,103,-62,103,-141,103,103,103,103,103,-23,-24,-25,-26,-27,-28,-189,103,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,103,103,103,103,-24,-142,103,103,103,103,103,-59,-60,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-190,-192,103,103,-196,103,103,103,103,103,-207,-208,-209,103,-24,103,103,103,103,-175,103,-186,103,-188,103,103,-206,-210,103,-24,103,103,103,103,103,-187,103,103,103,103,103,103,-24,-198,-199,-200,103,103,103,103,-202,103,-204,103,-197,-201,-203,-205,]),'STRING_LITERAL':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-118,-119,-120,-61,104,104,-62,104,-141,104,104,104,104,104,-23,-24,-25,-26,-27,-28,-189,104,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,104,104,104,104,-24,-142,104,104,104,104,104,-59,-60,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-190,-192,104,104,-196,104,104,104,104,104,-207,-208,-209,104,-24,104,104,104,104,-175,104,-186,104,-188,104,104,-206,-210,104,-24,104,104,104,104,104,-187,104,104,104,104,104,104,-24,-198,-199,-200,104,104,104,104,-202,104,-204,104,-197,-201,-203,-205,]),'{':([31,32,33,34,36,37,40,43,49,52,54,56,57,58,59,61,80,83,112,113,114,115,116,117,118,119,120,121,122,123,131,141,145,153,169,208,209,210,213,214,222,223,224,227,230,232,233,234,254,256,272,291,292,293,301,302,303,305,324,330,331,332,333,335,336,337,338,342,343,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[50,51,-95,-96,58,-61,-123,-124,68,77,58,83,-215,58,-62,-122,-216,83,-189,58,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,58,-133,-136,-125,83,-190,-192,58,58,-196,-207,-208,-209,-127,-128,-132,-134,-135,83,-175,333,-186,58,-188,-206,-210,-126,-131,83,333,333,333,83,-187,58,58,58,-130,-129,-198,-199,-200,58,58,83,58,-202,58,-204,58,-197,-201,-203,-205,]),'=':([36,40,43,61,76,78,85,87,94,95,103,104,124,141,145,153,170,171,183,184,186,187,189,227,230,232,233,234,257,259,264,267,268,273,303,305,325,327,328,332,334,342,343,368,376,],[56,-123,-124,-122,165,56,175,-18,-7,-3,-4,-5,-3,-133,-136,-125,256,-176,-13,-19,-20,-29,-21,-127,-128,-132,-134,-135,-177,-179,-9,-11,-12,-6,-126,-131,-178,-8,-10,-22,-30,-130,-129,-14,-15,]),'}':([37,58,59,69,70,74,75,76,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,154,156,164,166,167,168,183,184,186,187,189,208,209,212,214,222,223,224,244,249,250,252,253,254,255,260,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,293,301,302,322,323,327,328,332,334,335,353,354,356,357,358,359,368,369,372,374,376,377,378,379,380,],[-61,112,-62,155,-97,163,-114,-116,-168,-219,-29,-56,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-189,208,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,243,-98,248,251,253,-171,-13,-19,-20,-29,-21,-190,-192,-58,-196,-207,-208,-209,-99,-115,-117,321,-169,322,-172,-220,-55,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-186,-188,-206,-210,-170,-173,-8,-10,-22,-30,-187,-174,-57,368,-198,-199,-200,-14,376,-202,-204,-15,-197,-201,-203,-205,]),'CASE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,125,-62,-189,125,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,125,-190,-192,125,125,-196,-207,-208,-209,-186,125,-188,-206,-210,-187,125,125,125,-198,-199,-200,125,125,125,-202,125,-204,125,-197,-201,-203,-205,]),'DEFAULT':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,126,-62,-189,126,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,126,-190,-192,126,126,-196,-207,-208,-209,-186,126,-188,-206,-210,-187,126,126,126,-198,-199,-200,126,126,126,-202,126,-204,126,-197,-201,-203,-205,]),'IF':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,128,-62,-189,128,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,128,-190,-192,128,128,-196,-207,-208,-209,-186,128,-188,-206,-210,-187,128,128,128,-198,-199,-200,128,128,128,-202,128,-204,128,-197,-201,-203,-205,]),'SWITCH':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,129,-62,-189,129,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,129,-190,-192,129,129,-196,-207,-208,-209,-186,129,-188,-206,-210,-187,129,129,129,-198,-199,-200,129,129,129,-202,129,-204,129,-197,-201,-203,-205,]),'WHILE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,219,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,130,-62,-189,130,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,130,-190,-192,130,130,-196,298,-207,-208,-209,-186,130,-188,-206,-210,-187,130,130,130,-198,-199,-200,130,130,130,-202,130,-204,130,-197,-201,-203,-205,]),'DO':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,131,-62,-189,131,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,131,-190,-192,131,131,-196,-207,-208,-209,-186,131,-188,-206,-210,-187,131,131,131,-198,-199,-200,131,131,131,-202,131,-204,131,-197,-201,-203,-205,]),'FOR':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,132,-62,-189,132,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,132,-190,-192,132,132,-196,-207,-208,-209,-186,132,-188,-206,-210,-187,132,132,132,-198,-199,-200,132,132,132,-202,132,-204,132,-197,-201,-203,-205,]),'GOTO':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,133,-62,-189,133,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,133,-190,-192,133,133,-196,-207,-208,-209,-186,133,-188,-206,-210,-187,133,133,133,-198,-199,-200,133,133,133,-202,133,-204,133,-197,-201,-203,-205,]),'CONTINUE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,134,-62,-189,134,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,134,-190,-192,134,134,-196,-207,-208,-209,-186,134,-188,-206,-210,-187,134,134,134,-198,-199,-200,134,134,134,-202,134,-204,134,-197,-201,-203,-205,]),'BREAK':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,135,-62,-189,135,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,135,-190,-192,135,135,-196,-207,-208,-209,-186,135,-188,-206,-210,-187,135,135,135,-198,-199,-200,135,135,135,-202,135,-204,135,-197,-201,-203,-205,]),'RETURN':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-61,136,-62,-189,136,-191,-193,-194,-195,-180,-181,-182,-183,-184,-185,136,-190,-192,136,136,-196,-207,-208,-209,-186,136,-188,-206,-210,-187,136,136,136,-198,-199,-200,136,136,136,-202,136,-204,136,-197,-201,-203,-205,]),'.':([83,87,94,95,103,104,124,170,171,183,254,257,259,264,267,268,273,325,327,328,333,368,369,376,],[173,181,-7,-3,-4,-5,-3,173,-176,-13,173,-177,-179,-9,-11,-12,-6,-178,-8,-10,173,-14,173,-15,]),'/':([85,87,90,94,95,103,104,111,124,183,184,186,187,189,264,267,268,273,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,206,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,206,206,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'%':([85,87,90,94,95,103,104,111,124,183,184,186,187,189,264,267,268,273,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,207,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,207,207,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'SHIFT_OP':([85,87,90,94,95,103,104,109,110,111,124,183,184,186,187,189,264,267,268,273,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,202,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,202,202,202,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'<':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,199,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,199,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'>':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,200,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,200,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'GE_LE':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,201,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,201,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'EQ_NE':([85,87,90,94,95,103,104,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,198,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,198,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'^':([85,87,90,94,95,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,-4,-5,196,-48,-46,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,196,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'|':([85,87,90,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,-7,-3,195,-4,-5,-50,-48,-46,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,195,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'AND_OP':([85,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,-18,-31,194,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,194,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'?':([85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,177,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,-55,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'OR_OP':([85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-29,178,-18,-31,-54,-7,-3,-52,-4,-5,-50,-48,-46,-44,-40,-38,-35,-3,-13,-19,-20,-29,-21,-55,-9,-11,-12,-6,-53,-51,-49,-47,-45,-41,-42,-43,-39,-36,-37,-32,-33,-34,-8,-10,-22,-30,-14,-15,]),'ASSIGN_OP':([85,87,94,95,103,104,124,183,184,186,187,189,264,267,268,273,327,328,332,334,368,376,],[176,-18,-7,-3,-4,-5,-3,-13,-19,-20,-29,-21,-9,-11,-12,-6,-8,-10,-22,-30,-14,-15,]),'PTR_OP':([87,94,95,103,104,124,183,264,267,268,273,327,328,368,376,],[182,-7,-3,-4,-5,-3,-13,-9,-11,-12,-6,-8,-10,-14,-15,]),'ELSE':([112,117,118,119,120,121,122,123,208,214,222,223,224,291,293,301,302,335,357,358,359,372,374,377,378,379,380,],[-189,-195,-180,-181,-182,-183,-184,-185,-190,-196,-207,-208,-209,-186,-188,-206,-210,-187,370,-199,-200,-202,-204,-197,-201,-203,-205,]),'ELLIPSIS':([236,],[308,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,35,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,36,54,58,113,220,],[4,4,57,80,115,115,300,]),'declaration_specifiers':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[5,5,45,46,47,48,53,53,53,150,53,53,150,150,150,150,]),'storage_class_specifier':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'type_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[7,7,7,7,7,7,7,72,7,7,7,72,72,72,72,72,7,72,72,72,72,7,7,7,7,7,]),'type_qualifier':([0,1,6,7,8,9,36,42,50,54,58,62,63,64,68,69,72,73,92,113,139,142,154,185,188,190,220,231,236,241,276,312,],[8,8,8,8,8,8,8,66,73,8,8,66,8,152,73,73,73,73,73,8,152,66,73,73,73,73,8,152,8,8,8,8,]),'function_specifier':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct_or_union_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'enum_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'struct_or_union':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'declarator':([5,44,53,60,71,150,241,245,],[36,67,78,78,159,237,67,159,]),'init_declarator_list':([5,53,],[38,38,]),'pointer':([5,42,44,53,60,64,71,150,193,241,245,276,],[39,65,39,39,39,151,39,239,275,239,39,275,]),'direct_declarator':([5,39,44,53,60,71,150,239,241,245,],[40,61,40,40,40,40,40,61,40,40,]),'init_declarator':([5,53,60,],[41,41,138,]),'declaration_list':([36,],[54,]),'compound_statement':([36,54,58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[55,79,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'type_qualifier_list':([42,62,142,],[64,139,231,]),'struct_declaration_list':([50,68,],[69,154,]),'struct_declaration':([50,68,69,154,],[70,70,156,156,]),'specifier_qualifier_list':([50,68,69,72,73,92,154,185,188,190,],[71,71,71,161,162,193,71,193,193,193,]),'enumerator_list':([51,77,],[74,166,]),'enumerator':([51,77,164,252,],[75,75,249,249,]),'initializer':([56,83,169,254,324,333,369,],[81,168,255,323,353,168,323,]),'assignment_expression':([56,58,62,83,92,113,131,136,139,169,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,254,292,299,300,311,324,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[82,137,140,82,137,137,137,137,226,82,260,137,137,266,137,137,137,137,137,294,137,137,137,137,304,306,317,82,137,137,137,345,82,355,82,137,137,137,137,137,137,137,137,82,137,137,137,]),'conditional_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[84,84,84,84,84,84,212,84,84,84,212,212,84,212,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,212,84,84,84,84,84,84,354,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'unary_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[85,85,85,85,184,187,189,85,85,187,85,85,85,187,187,85,187,85,85,187,85,85,85,85,85,187,187,187,187,187,187,187,187,187,187,187,187,187,187,85,85,85,85,85,85,85,85,85,85,187,85,187,85,85,85,85,85,187,85,187,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'logical_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'postfix_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'unary_operator':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'cast_expression':([56,58,62,83,89,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[90,90,90,90,186,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,288,289,290,90,90,90,90,90,90,90,90,90,90,90,90,334,90,90,90,90,90,90,90,334,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'logical_and_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,262,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'primary_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'inclusive_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,277,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'exclusive_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,278,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'and_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,279,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'equality_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,280,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'relational_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,281,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'shift_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,282,283,284,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'additive_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,285,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'multiplicative_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,286,287,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'block_item_list':([58,],[113,]),'block_item':([58,113,],[114,209,]),'statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[116,116,219,291,293,335,357,358,359,372,374,377,379,380,]),'labeled_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'expression_statement':([58,113,131,210,213,220,292,299,300,336,337,338,361,363,370,373,375,],[120,120,120,120,120,299,120,340,341,120,120,120,120,120,120,120,120,]),'selection_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'iteration_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'jump_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'expression':([58,92,113,131,136,177,179,185,188,190,210,213,216,217,218,220,292,299,300,336,337,338,339,340,341,361,363,370,373,375,],[127,192,127,127,225,261,263,192,192,192,127,127,295,296,297,127,127,127,127,127,127,127,360,362,364,127,127,127,127,127,]),'parameter_type_list':([63,241,276,312,],[144,315,315,348,]),'identifier_list':([63,],[146,]),'parameter_list':([63,241,276,312,],[147,147,147,147,]),'parameter_declaration':([63,236,241,276,312,],[149,309,149,149,149,]),'struct_declarator_list':([71,],[157,]),'struct_declarator':([71,245,],[158,319,]),'initializer_list':([83,333,],[167,356,]),'designation':([83,254,333,369,],[169,324,169,324,]),'designator_list':([83,254,333,369,],[170,170,170,170,]),'designator':([83,170,254,333,369,],[171,257,171,171,171,]),'assignment_operator':([85,],[174,]),'type_name':([92,185,188,190,],[191,269,270,271,]),'constant_expression':([125,160,165,172,246,],[211,247,250,258,320,]),'abstract_declarator':([150,193,241,276,],[238,274,314,314,]),'direct_abstract_declarator':([150,193,239,241,275,276,],[240,240,310,240,310,240,]),'argument_expression_list':([180,],[265,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','yacc.py',8),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','yacc.py',9),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','yacc.py',14),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','yacc.py',15),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','yacc.py',16),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','yacc.py',17),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','yacc.py',22),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','yacc.py',23),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','yacc.py',24),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','yacc.py',25),
  ('postfix_expression -> postfix_expression . IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',26),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',27),
  ('postfix_expression -> postfix_expression INC_DEC','postfix_expression',2,'p_postfix_expression','yacc.py',28),
  ('postfix_expression -> ( type_name ) { initializer_list }','postfix_expression',6,'p_postfix_expression','yacc.py',29),
  ('postfix_expression -> ( type_name ) { initializer_list , }','postfix_expression',7,'p_postfix_expression','yacc.py',30),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','yacc.py',35),
  ('argument_expression_list -> argument_expression_list , assignment_expression','argument_expression_list',3,'p_argument_expression_list','yacc.py',36),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','yacc.py',41),
  ('unary_expression -> INC_DEC unary_expression','unary_expression',2,'p_unary_expression','yacc.py',42),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','yacc.py',43),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','yacc.py',44),
  ('unary_expression -> SIZEOF ( type_name )','unary_expression',4,'p_unary_expression','yacc.py',45),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','yacc.py',50),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','yacc.py',51),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','yacc.py',52),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','yacc.py',53),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','yacc.py',54),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','yacc.py',55),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','yacc.py',60),
  ('cast_expression -> ( type_name ) cast_expression','cast_expression',4,'p_cast_expression','yacc.py',61),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','yacc.py',66),
  ('multiplicative_expression -> multiplicative_expression * cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',67),
  ('multiplicative_expression -> multiplicative_expression / cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',68),
  ('multiplicative_expression -> multiplicative_expression % cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',69),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','yacc.py',74),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',75),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',76),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','yacc.py',81),
  ('shift_expression -> shift_expression SHIFT_OP additive_expression','shift_expression',3,'p_shift_expression','yacc.py',82),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','yacc.py',87),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_relational_expression','yacc.py',88),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_relational_expression','yacc.py',89),
  ('relational_expression -> relational_expression GE_LE shift_expression','relational_expression',3,'p_relational_expression','yacc.py',90),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','yacc.py',95),
  ('equality_expression -> equality_expression EQ_NE relational_expression','equality_expression',3,'p_equality_expression','yacc.py',96),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','yacc.py',101),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','yacc.py',102),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','yacc.py',107),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','yacc.py',108),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','yacc.py',113),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','yacc.py',114),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','yacc.py',119),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','yacc.py',120),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','yacc.py',125),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','yacc.py',126),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','yacc.py',131),
  ('conditional_expression -> logical_or_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','yacc.py',132),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','yacc.py',137),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','yacc.py',142),
  ('assignment_operator -> ASSIGN_OP','assignment_operator',1,'p_assignment_operator','yacc.py',143),
  ('declaration -> declaration_specifiers ;','declaration',2,'p_declaration','yacc.py',150),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','yacc.py',151),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',156),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',157),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',158),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',159),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',160),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',161),
  ('declaration_specifiers -> function_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',162),
  ('declaration_specifiers -> function_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',163),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','yacc.py',168),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','yacc.py',169),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','yacc.py',174),
  ('init_declarator -> declarator = initializer','init_declarator',3,'p_init_declarator','yacc.py',175),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',180),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',181),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',182),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',183),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',184),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','yacc.py',189),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','yacc.py',190),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','yacc.py',191),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','yacc.py',192),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','yacc.py',193),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','yacc.py',194),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','yacc.py',195),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','yacc.py',196),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','yacc.py',197),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','yacc.py',198),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','yacc.py',199),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','yacc.py',200),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }','struct_or_union_specifier',5,'p_struct_or_union_specifier','yacc.py',205),
  ('struct_or_union_specifier -> struct_or_union { struct_declaration_list }','struct_or_union_specifier',4,'p_struct_or_union_specifier','yacc.py',206),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','yacc.py',207),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','yacc.py',214),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','yacc.py',215),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','yacc.py',220),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','yacc.py',221),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list ;','struct_declaration',3,'p_struct_declaration','yacc.py',226),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',231),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',232),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',233),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',234),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','yacc.py',239),
  ('struct_declarator_list -> struct_declarator_list , struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','yacc.py',240),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','yacc.py',245),
  ('struct_declarator -> : constant_expression','struct_declarator',2,'p_struct_declarator','yacc.py',246),
  ('struct_declarator -> declarator : constant_expression','struct_declarator',3,'p_struct_declarator','yacc.py',247),
  ('enum_specifier -> ENUM { enumerator_list }','enum_specifier',4,'p_enum_specifier','yacc.py',252),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list }','enum_specifier',5,'p_enum_specifier','yacc.py',253),
  ('enum_specifier -> ENUM { enumerator_list , }','enum_specifier',5,'p_enum_specifier','yacc.py',254),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list , }','enum_specifier',6,'p_enum_specifier','yacc.py',255),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','yacc.py',256),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','yacc.py',261),
  ('enumerator_list -> enumerator_list , enumerator','enumerator_list',3,'p_enumerator_list','yacc.py',262),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','yacc.py',267),
  ('enumerator -> IDENTIFIER = constant_expression','enumerator',3,'p_enumerator','yacc.py',268),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','yacc.py',273),
  ('type_qualifier -> RESTRICT','type_qualifier',1,'p_type_qualifier','yacc.py',274),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','yacc.py',275),
  ('function_specifier -> INLINE','function_specifier',1,'p_function_specifier','yacc.py',280),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','yacc.py',285),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','yacc.py',286),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','yacc.py',291),
  ('direct_declarator -> ( declarator )','direct_declarator',3,'p_direct_declarator','yacc.py',292),
  ('direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]','direct_declarator',5,'p_direct_declarator','yacc.py',293),
  ('direct_declarator -> direct_declarator [ type_qualifier_list ]','direct_declarator',4,'p_direct_declarator','yacc.py',294),
  ('direct_declarator -> direct_declarator [ assignment_expression ]','direct_declarator',4,'p_direct_declarator','yacc.py',295),
  ('direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',296),
  ('direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',297),
  ('direct_declarator -> direct_declarator [ type_qualifier_list * ]','direct_declarator',5,'p_direct_declarator','yacc.py',298),
  ('direct_declarator -> direct_declarator [ * ]','direct_declarator',4,'p_direct_declarator','yacc.py',299),
  ('direct_declarator -> direct_declarator [ ]','direct_declarator',3,'p_direct_declarator','yacc.py',300),
  ('direct_declarator -> direct_declarator ( parameter_type_list )','direct_declarator',4,'p_direct_declarator','yacc.py',301),
  ('direct_declarator -> direct_declarator ( identifier_list )','direct_declarator',4,'p_direct_declarator','yacc.py',302),
  ('direct_declarator -> direct_declarator ( )','direct_declarator',3,'p_direct_declarator','yacc.py',303),
  ('pointer -> *','pointer',1,'p_pointer','yacc.py',308),
  ('pointer -> * type_qualifier_list','pointer',2,'p_pointer','yacc.py',309),
  ('pointer -> * pointer','pointer',2,'p_pointer','yacc.py',310),
  ('pointer -> * type_qualifier_list pointer','pointer',3,'p_pointer','yacc.py',311),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','yacc.py',316),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','yacc.py',317),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','yacc.py',322),
  ('parameter_type_list -> parameter_list , ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','yacc.py',323),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','yacc.py',328),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','yacc.py',329),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',334),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',335),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','yacc.py',336),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','yacc.py',341),
  ('identifier_list -> identifier_list , IDENTIFIER','identifier_list',3,'p_identifier_list','yacc.py',342),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','yacc.py',347),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','yacc.py',348),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','yacc.py',353),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','yacc.py',354),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','yacc.py',355),
  ('direct_abstract_declarator -> ( abstract_declarator )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',360),
  ('direct_abstract_declarator -> [ ]','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',361),
  ('direct_abstract_declarator -> [ assignment_expression ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',362),
  ('direct_abstract_declarator -> direct_abstract_declarator [ ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',363),
  ('direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',364),
  ('direct_abstract_declarator -> [ * ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',365),
  ('direct_abstract_declarator -> direct_abstract_declarator [ * ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',366),
  ('direct_abstract_declarator -> ( )','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',367),
  ('direct_abstract_declarator -> ( parameter_type_list )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',368),
  ('direct_abstract_declarator -> direct_abstract_declarator ( )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',369),
  ('direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',370),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','yacc.py',377),
  ('initializer -> { initializer_list }','initializer',3,'p_initializer','yacc.py',378),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer','yacc.py',379),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','yacc.py',384),
  ('initializer_list -> designation initializer','initializer_list',2,'p_initializer_list','yacc.py',385),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','yacc.py',386),
  ('initializer_list -> initializer_list , designation initializer','initializer_list',4,'p_initializer_list','yacc.py',387),
  ('designation -> designator_list =','designation',2,'p_designation','yacc.py',392),
  ('designator_list -> designator','designator_list',1,'p_designator_list','yacc.py',397),
  ('designator_list -> designator_list designator','designator_list',2,'p_designator_list','yacc.py',398),
  ('designator -> [ constant_expression ]','designator',3,'p_designator','yacc.py',403),
  ('designator -> . IDENTIFIER','designator',2,'p_designator','yacc.py',404),
  ('statement -> labeled_statement','statement',1,'p_statement','yacc.py',409),
  ('statement -> compound_statement','statement',1,'p_statement','yacc.py',410),
  ('statement -> expression_statement','statement',1,'p_statement','yacc.py',411),
  ('statement -> selection_statement','statement',1,'p_statement','yacc.py',412),
  ('statement -> iteration_statement','statement',1,'p_statement','yacc.py',413),
  ('statement -> jump_statement','statement',1,'p_statement','yacc.py',414),
  ('labeled_statement -> IDENTIFIER : statement','labeled_statement',3,'p_labeled_statement','yacc.py',419),
  ('labeled_statement -> CASE constant_expression : statement','labeled_statement',4,'p_labeled_statement','yacc.py',420),
  ('labeled_statement -> DEFAULT : statement','labeled_statement',3,'p_labeled_statement','yacc.py',421),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','yacc.py',426),
  ('compound_statement -> { block_item_list }','compound_statement',3,'p_compound_statement','yacc.py',427),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','yacc.py',432),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','yacc.py',433),
  ('block_item -> declaration','block_item',1,'p_block_item','yacc.py',438),
  ('block_item -> statement','block_item',1,'p_block_item','yacc.py',439),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','yacc.py',444),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','yacc.py',445),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','yacc.py',450),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',451),
  ('selection_statement -> SWITCH ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',452),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','yacc.py',457),
  ('iteration_statement -> DO statement WHILE ( expression ) ;','iteration_statement',7,'p_iteration_statement','yacc.py',458),
  ('iteration_statement -> FOR ( expression_statement expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',459),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',460),
  ('iteration_statement -> FOR ( declaration expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',461),
  ('iteration_statement -> FOR ( declaration expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',462),
  ('jump_statement -> GOTO IDENTIFIER ;','jump_statement',3,'p_jump_statement','yacc.py',467),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','yacc.py',468),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','yacc.py',469),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement','yacc.py',470),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement','yacc.py',471),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','yacc.py',476),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','yacc.py',477),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','yacc.py',482),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','yacc.py',483),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','yacc.py',488),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','yacc.py',489),
  ('expression -> assignment_expression','expression',1,'p_expression','yacc.py',494),
  ('expression -> expression , assignment_expression','expression',3,'p_expression','yacc.py',495),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','yacc.py',499),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','yacc.py',500),
]
