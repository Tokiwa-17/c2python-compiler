
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND_OP ASSIGN_OP AUTO BOOL BREAK CASE CHAR CONST CONSTANT CONTINUE DEFAULT DO DOUBLE ELLIPSIS ELSE ENUM EQ_NE EXTERN FLOAT FOR GE_LE GOTO IDENTIFIER IF INC_DEC INLINE INT LONG OR_OP PTR_OP REGISTER RESTRICT RETURN SHIFT_OP SHORT SIGNED SIZEOF STATIC STRING_LITERAL STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE translation_unit : external_declaration\n                         | translation_unit external_declaration  external_declaration : function_definition\n                             | declaration  declaration : declaration_specifiers ';'\n                    | declaration_specifiers init_declarator_list ';'  init_declarator_list : init_declarator\n                             | init_declarator_list ',' init_declarator  init_declarator : declarator\n                        | declarator '=' initializer  declaration_specifiers \t: storage_class_specifier\n                                | storage_class_specifier declaration_specifiers\n                                | type_specifier\n                                | type_specifier declaration_specifiers\n                                | type_qualifier\n                                | type_qualifier declaration_specifiers\n                                | function_specifier\n                                | function_specifier declaration_specifiers  storage_class_specifier : TYPEDEF\n                                | EXTERN\n                                | STATIC\n                                | AUTO\n                                | REGISTER  function_specifier : INLINE  type_specifier : VOID\n                       | CHAR\n                       | SHORT\n                       | INT\n                       | LONG\n                       | FLOAT\n                       | DOUBLE\n                       | SIGNED\n                       | UNSIGNED\n                       | BOOL\n                       | struct_or_union_specifier\n                       | enum_specifier  type_qualifier : CONST\n                       | RESTRICT\n                       | VOLATILE  enum_specifier : ENUM '{' enumerator_list '}'\n                        | ENUM IDENTIFIER '{' enumerator_list '}'\n                        | ENUM '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER  enumerator_list : enumerator\n                        | enumerator_list ',' enumerator  enumerator : IDENTIFIER\n                   | IDENTIFIER '=' constant_expression  struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'\n                                  | struct_or_union '{' struct_declaration_list '}'\n                                  | struct_or_union IDENTIFIER  struct_or_union : STRUCT\n                        | UNION  struct_declaration_list : struct_declaration\n                                | struct_declaration_list struct_declaration  struct_declaration : specifier_qualifier_list struct_declarator_list ';'  specifier_qualifier_list : type_specifier specifier_qualifier_list\n                                 | type_specifier\n                                 | type_qualifier specifier_qualifier_list\n                                 | type_qualifier   struct_declarator_list : struct_declarator\n                               | struct_declarator_list ',' struct_declarator  struct_declarator : declarator\n                          | ':' constant_expression\n                          | declarator ':' constant_expression  declarator : pointer direct_declarator\n                   | direct_declarator  pointer : '*'\n                | '*' type_qualifier_list\n                | '*' pointer\n                | '*' type_qualifier_list pointer  type_qualifier_list : type_qualifier\n                            | type_qualifier_list type_qualifier  direct_declarator : IDENTIFIER\n                        | '(' declarator ')'\n                        | direct_declarator '[' type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list ']'\n                        | direct_declarator '[' assignment_expression ']'\n                        | direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list '*' ']'\n                        | direct_declarator '[' '*' ']'\n                        | direct_declarator '[' ']'\n                        | direct_declarator '(' parameter_type_list ')'\n                        | direct_declarator '(' identifier_list ')'\n                        | direct_declarator '(' ')'  identifier_list : IDENTIFIER\n                        | identifier_list ',' IDENTIFIER  assignment_expression : conditional_expression\n                              | unary_expression assignment_operator assignment_expression  assignment_operator : '='\n                            | ASSIGN_OP  constant_expression : conditional_expression  conditional_expression : logical_or_expression\n                               | logical_or_expression '?' expression ':' conditional_expression  logical_or_expression : logical_and_expression\n                              | logical_or_expression OR_OP logical_and_expression  logical_and_expression : inclusive_or_expression\n                               | logical_and_expression AND_OP inclusive_or_expression  inclusive_or_expression : exclusive_or_expression\n                                | inclusive_or_expression '|' exclusive_or_expression  exclusive_or_expression : and_expression\n                                | exclusive_or_expression '^' and_expression  and_expression : equality_expression\n                       | and_expression '&' equality_expression  equality_expression : relational_expression\n                            | equality_expression EQ_NE relational_expression  relational_expression : shift_expression\n                              | relational_expression '<' shift_expression\n                              | relational_expression '>' shift_expression\n                              | relational_expression GE_LE shift_expression  shift_expression : additive_expression\n                         | shift_expression SHIFT_OP additive_expression  additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression  multiplicative_expression : cast_expression\n                                  | multiplicative_expression '*' cast_expression\n                                  | multiplicative_expression '/' cast_expression\n                                  | multiplicative_expression '%' cast_expression  cast_expression : unary_expression\n                        | '(' type_name ')' cast_expression  unary_expression : postfix_expression\n                         | INC_DEC unary_expression\n                         | unary_operator cast_expression\n                         | SIZEOF unary_expression\n                         | SIZEOF '(' type_name ')'  unary_operator : '&'\n                       | '*'\n                       | '+'\n                       | '-'\n                       | '~'\n                       | '!'  postfix_expression : primary_expression\n                           | postfix_expression '[' expression ']'\n                           | postfix_expression '(' ')'\n                           | postfix_expression '(' argument_expression_list ')'\n                           | postfix_expression '.' IDENTIFIER\n                           | postfix_expression PTR_OP IDENTIFIER\n                           | postfix_expression INC_DEC\n                           | '(' type_name ')' '{' initializer_list '}'\n                           | '(' type_name ')' '{' initializer_list ',' '}'  primary_expression : IDENTIFIER\n                           | CONSTANT\n                           | STRING_LITERAL\n                           | '(' expression ')'  expression : assignment_expression\n                   | expression ',' assignment_expression  type_name : specifier_qualifier_list\n                  | specifier_qualifier_list abstract_declarator  abstract_declarator : pointer\n                            | direct_abstract_declarator\n                            | pointer direct_abstract_declarator  direct_abstract_declarator : '(' abstract_declarator ')'\n                                   | '[' ']'\n                                   | '[' assignment_expression ']'\n                                   | direct_abstract_declarator '[' ']'\n                                   | direct_abstract_declarator '[' assignment_expression ']'\n                                   | '[' '*' ']'\n                                   | direct_abstract_declarator '[' '*' ']'\n                                   | '(' ')'\n                                   | '(' parameter_type_list ')'\n                                   | direct_abstract_declarator '(' ')'\n                                   | direct_abstract_declarator '(' parameter_type_list ')'  parameter_type_list : parameter_list\n                            | parameter_list ',' ELLIPSIS  parameter_list : parameter_declaration\n                       | parameter_list ',' parameter_declaration  parameter_declaration : declaration_specifiers declarator\n                              | declaration_specifiers abstract_declarator\n                              | declaration_specifiers  argument_expression_list : assignment_expression\n                                 | argument_expression_list ',' assignment_expression  initializer_list : initializer\n                         | designation initializer\n                         | initializer_list ',' initializer\n                         | initializer_list ',' designation initializer  initializer : assignment_expression\n                    | '{' initializer_list '}'\n                    | '{' initializer_list ',' '}'  designation : designator_list '='  designator_list : designator\n                        | designator_list designator  designator : '[' constant_expression ']'\n                   | '.' IDENTIFIER  function_definition : declaration_specifiers declarator declaration_list compound_statement\n                            | declaration_specifiers declarator compound_statement  declaration_list : declaration\n                         | declaration_list declaration  compound_statement : '{' '}'\n                           | '{' block_item_list '}'  block_item_list : block_item\n                        | block_item_list block_item  block_item : declaration\n                   | statement  statement : labeled_statement\n                  | compound_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement  labeled_statement : IDENTIFIER ':' statement\n                          | CASE constant_expression ':' statement\n                          | DEFAULT ':' statement  expression_statement : ';'\n                             | expression ';'  selection_statement : IF '(' expression ')' statement ELSE statement\n                            | IF '(' expression ')' statement\n                            | SWITCH '(' expression ')' statement  iteration_statement : WHILE '(' expression ')' statement\n                            | DO statement WHILE '(' expression ')' ';'\n                            | FOR '(' expression_statement expression_statement ')' statement\n                            | FOR '(' expression_statement expression_statement expression ')' statement\n                            | FOR '(' declaration expression_statement ')' statement\n                            | FOR '(' declaration expression_statement expression ')' statement  jump_statement : GOTO IDENTIFIER ';'\n                       | CONTINUE ';'\n                       | BREAK ';'\n                       | RETURN ';'\n                       | RETURN expression ';' "
    
_lr_action_items = {'TYPEDEF':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[10,10,-1,-3,-4,10,10,10,10,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,10,-5,-67,-74,-51,-44,10,-187,-188,10,-6,-66,10,-186,-189,-190,10,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,-50,-40,-191,-193,-206,10,-217,-218,-219,-77,-78,-82,-84,-85,10,10,-49,-42,-41,10,-202,-204,-216,-220,-76,-81,10,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'EXTERN':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[11,11,-1,-3,-4,11,11,11,11,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,11,-5,-67,-74,-51,-44,11,-187,-188,11,-6,-66,11,-186,-189,-190,11,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,-50,-40,-191,-193,-206,11,-217,-218,-219,-77,-78,-82,-84,-85,11,11,-49,-42,-41,11,-202,-204,-216,-220,-76,-81,11,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'STATIC':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,62,63,66,79,80,112,113,114,115,116,117,118,119,120,121,122,123,139,141,145,152,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[12,12,-1,-3,-4,12,12,12,12,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,12,-5,-67,-74,-51,-44,12,-187,-188,12,-6,-66,142,12,-72,-186,-189,-190,12,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,228,-83,-86,-73,-75,-50,-40,-191,-193,-206,12,-217,-218,-219,-77,-78,-82,-84,-85,12,12,-49,-42,-41,12,-202,-204,-216,-220,-76,-81,12,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'AUTO':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[13,13,-1,-3,-4,13,13,13,13,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,13,-5,-67,-74,-51,-44,13,-187,-188,13,-6,-66,13,-186,-189,-190,13,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,-50,-40,-191,-193,-206,13,-217,-218,-219,-77,-78,-82,-84,-85,13,13,-49,-42,-41,13,-202,-204,-216,-220,-76,-81,13,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'REGISTER':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[14,14,-1,-3,-4,14,14,14,14,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,14,-5,-67,-74,-51,-44,14,-187,-188,14,-6,-66,14,-186,-189,-190,14,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,-50,-40,-191,-193,-206,14,-217,-218,-219,-77,-78,-82,-84,-85,14,14,-49,-42,-41,14,-202,-204,-216,-220,-76,-81,14,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'VOID':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[15,15,-1,-3,-4,15,15,15,15,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,15,-5,-67,-74,-51,15,-44,15,-187,-188,15,-6,-66,15,15,15,-54,15,15,-186,-189,15,-190,15,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,15,-50,-55,-40,15,15,15,-191,-193,-206,15,-217,-218,-219,-77,-78,-82,-84,-85,15,15,-49,-56,-42,-41,15,-202,-204,-216,-220,-76,-81,15,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'CHAR':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[16,16,-1,-3,-4,16,16,16,16,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,16,-5,-67,-74,-51,16,-44,16,-187,-188,16,-6,-66,16,16,16,-54,16,16,-186,-189,16,-190,16,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,16,-50,-55,-40,16,16,16,-191,-193,-206,16,-217,-218,-219,-77,-78,-82,-84,-85,16,16,-49,-56,-42,-41,16,-202,-204,-216,-220,-76,-81,16,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'SHORT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[17,17,-1,-3,-4,17,17,17,17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,17,-5,-67,-74,-51,17,-44,17,-187,-188,17,-6,-66,17,17,17,-54,17,17,-186,-189,17,-190,17,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,17,-50,-55,-40,17,17,17,-191,-193,-206,17,-217,-218,-219,-77,-78,-82,-84,-85,17,17,-49,-56,-42,-41,17,-202,-204,-216,-220,-76,-81,17,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'INT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[18,18,-1,-3,-4,18,18,18,18,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,18,-5,-67,-74,-51,18,-44,18,-187,-188,18,-6,-66,18,18,18,-54,18,18,-186,-189,18,-190,18,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,18,-50,-55,-40,18,18,18,-191,-193,-206,18,-217,-218,-219,-77,-78,-82,-84,-85,18,18,-49,-56,-42,-41,18,-202,-204,-216,-220,-76,-81,18,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'LONG':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[19,19,-1,-3,-4,19,19,19,19,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,19,-5,-67,-74,-51,19,-44,19,-187,-188,19,-6,-66,19,19,19,-54,19,19,-186,-189,19,-190,19,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,19,-50,-55,-40,19,19,19,-191,-193,-206,19,-217,-218,-219,-77,-78,-82,-84,-85,19,19,-49,-56,-42,-41,19,-202,-204,-216,-220,-76,-81,19,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'FLOAT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[20,20,-1,-3,-4,20,20,20,20,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,20,-5,-67,-74,-51,20,-44,20,-187,-188,20,-6,-66,20,20,20,-54,20,20,-186,-189,20,-190,20,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,20,-50,-55,-40,20,20,20,-191,-193,-206,20,-217,-218,-219,-77,-78,-82,-84,-85,20,20,-49,-56,-42,-41,20,-202,-204,-216,-220,-76,-81,20,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'DOUBLE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[21,21,-1,-3,-4,21,21,21,21,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,21,-5,-67,-74,-51,21,-44,21,-187,-188,21,-6,-66,21,21,21,-54,21,21,-186,-189,21,-190,21,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,21,-50,-55,-40,21,21,21,-191,-193,-206,21,-217,-218,-219,-77,-78,-82,-84,-85,21,21,-49,-56,-42,-41,21,-202,-204,-216,-220,-76,-81,21,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'SIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[22,22,-1,-3,-4,22,22,22,22,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,22,-5,-67,-74,-51,22,-44,22,-187,-188,22,-6,-66,22,22,22,-54,22,22,-186,-189,22,-190,22,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,22,-50,-55,-40,22,22,22,-191,-193,-206,22,-217,-218,-219,-77,-78,-82,-84,-85,22,22,-49,-56,-42,-41,22,-202,-204,-216,-220,-76,-81,22,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'UNSIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[23,23,-1,-3,-4,23,23,23,23,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,23,-5,-67,-74,-51,23,-44,23,-187,-188,23,-6,-66,23,23,23,-54,23,23,-186,-189,23,-190,23,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,23,-50,-55,-40,23,23,23,-191,-193,-206,23,-217,-218,-219,-77,-78,-82,-84,-85,23,23,-49,-56,-42,-41,23,-202,-204,-216,-220,-76,-81,23,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'BOOL':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[24,24,-1,-3,-4,24,24,24,24,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,24,-5,-67,-74,-51,24,-44,24,-187,-188,24,-6,-66,24,24,24,-54,24,24,-186,-189,24,-190,24,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,24,-50,-55,-40,24,24,24,-191,-193,-206,24,-217,-218,-219,-77,-78,-82,-84,-85,24,24,-49,-56,-42,-41,24,-202,-204,-216,-220,-76,-81,24,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'CONST':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[27,27,-1,-3,-4,27,27,27,27,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,27,-5,-67,27,-74,-51,27,-44,27,-187,-188,27,-6,-66,27,27,27,-72,27,27,-54,27,27,-186,-189,27,-190,27,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,27,-83,27,-86,-73,-75,27,-50,-55,-40,27,27,27,-191,-193,-206,27,-217,-218,-219,-77,-78,27,-82,-84,-85,27,27,-49,-56,-42,-41,27,-202,-204,-216,-220,-76,-81,27,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'RESTRICT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[28,28,-1,-3,-4,28,28,28,28,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,28,-5,-67,28,-74,-51,28,-44,28,-187,-188,28,-6,-66,28,28,28,-72,28,28,-54,28,28,-186,-189,28,-190,28,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,28,-83,28,-86,-73,-75,28,-50,-55,-40,28,28,28,-191,-193,-206,28,-217,-218,-219,-77,-78,28,-82,-84,-85,28,28,-49,-56,-42,-41,28,-202,-204,-216,-220,-76,-81,28,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'VOLATILE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,139,141,142,145,152,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,231,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[29,29,-1,-3,-4,29,29,29,29,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,29,-5,-67,29,-74,-51,29,-44,29,-187,-188,29,-6,-66,29,29,29,-72,29,29,-54,29,29,-186,-189,29,-190,29,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,29,-83,29,-86,-73,-75,29,-50,-55,-40,29,29,29,-191,-193,-206,29,-217,-218,-219,-77,-78,29,-82,-84,-85,29,29,-49,-56,-42,-41,29,-202,-204,-216,-220,-76,-81,29,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'INLINE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,155,163,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[30,30,-1,-3,-4,30,30,30,30,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,30,-5,-67,-74,-51,-44,30,-187,-188,30,-6,-66,30,-186,-189,-190,30,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,-50,-40,-191,-193,-206,30,-217,-218,-219,-77,-78,-82,-84,-85,30,30,-49,-42,-41,30,-202,-204,-216,-220,-76,-81,30,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'ENUM':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[32,32,-1,-3,-4,32,32,32,32,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,32,-5,-67,-74,-51,32,-44,32,-187,-188,32,-6,-66,32,32,32,-54,32,32,-186,-189,32,-190,32,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,32,-50,-55,-40,32,32,32,-191,-193,-206,32,-217,-218,-219,-77,-78,-82,-84,-85,32,32,-49,-56,-42,-41,32,-202,-204,-216,-220,-76,-81,32,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'STRUCT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[33,33,-1,-3,-4,33,33,33,33,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,33,-5,-67,-74,-51,33,-44,33,-187,-188,33,-6,-66,33,33,33,-54,33,33,-186,-189,33,-190,33,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,33,-50,-55,-40,33,33,33,-191,-193,-206,33,-217,-218,-219,-77,-78,-82,-84,-85,33,33,-49,-56,-42,-41,33,-202,-204,-216,-220,-76,-81,33,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'UNION':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,92,112,113,114,115,116,117,118,119,120,121,122,123,141,145,153,154,155,156,163,185,188,190,208,209,214,220,222,223,224,227,230,232,233,234,236,241,243,244,248,251,276,291,293,301,302,303,305,312,321,335,342,343,357,358,359,372,374,377,378,379,380,],[34,34,-1,-3,-4,34,34,34,34,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,34,-5,-67,-74,-51,34,-44,34,-187,-188,34,-6,-66,34,34,34,-54,34,34,-186,-189,34,-190,34,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-83,-86,-75,34,-50,-55,-40,34,34,34,-191,-193,-206,34,-217,-218,-219,-77,-78,-82,-84,-85,34,34,-49,-56,-42,-41,34,-202,-204,-216,-220,-76,-81,34,-43,-203,-80,-79,-208,-209,-210,-212,-214,-207,-211,-213,-215,]),'$end':([1,2,3,4,35,37,55,59,79,112,208,],[0,-1,-3,-4,-2,-5,-187,-6,-186,-190,-191,]),';':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,40,41,43,45,46,47,48,49,52,53,58,59,61,78,81,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,131,134,135,136,137,138,141,145,153,155,157,158,159,163,183,184,186,187,189,208,209,210,212,213,214,220,221,222,223,224,225,227,230,232,233,234,243,247,248,251,253,260,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,299,300,301,302,303,305,319,320,321,322,327,328,332,334,335,336,337,338,342,343,354,357,358,359,361,363,368,370,371,372,373,374,375,376,377,378,379,380,],[37,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-9,-5,59,-67,-7,-74,-12,-14,-16,-18,-51,-44,37,117,-6,-66,-9,-10,-178,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-190,117,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,214,117,222,223,224,-147,-8,-83,-86,-75,-50,244,-61,-63,-40,-140,-124,-125,-121,-126,-191,-193,117,-93,117,-206,117,301,-217,-218,-219,302,-77,-78,-82,-84,-85,-49,-64,-42,-41,-179,-90,-97,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-202,117,-204,-148,117,117,-216,-220,-76,-81,-62,-65,-43,-180,-135,-137,-127,-122,-203,117,117,117,-80,-79,-95,-208,-209,-210,117,117,-141,117,378,-212,117,-214,117,-142,-207,-211,-213,-215,]),'*':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,42,44,45,46,47,48,49,52,53,56,58,59,60,62,64,66,71,72,73,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,150,152,155,160,161,162,163,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,241,242,243,245,246,248,251,254,256,264,267,268,272,273,276,286,287,288,289,290,291,292,293,299,300,301,302,311,318,321,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[42,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-5,42,42,-12,-14,-16,-18,-51,-44,42,97,97,-6,42,143,42,-72,42,-58,-60,97,-121,-123,97,97,-117,97,97,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,205,-190,97,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,97,97,97,229,-129,42,-73,-50,97,-57,-59,-40,97,97,97,97,-91,-92,97,97,97,97,-140,-124,97,-125,-121,97,-126,97,42,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-191,-193,97,97,-206,97,97,97,97,97,-217,-218,-219,97,-129,97,42,318,-49,42,97,-42,-41,97,-181,-136,-138,-139,97,-146,42,205,205,-118,-119,-120,-202,97,-204,97,97,-216,-220,346,-129,-43,97,97,-135,-137,97,97,-127,97,-122,-203,97,97,97,97,97,97,-129,-208,-209,-210,97,97,-141,97,97,-212,97,-214,97,-142,-207,-211,-213,-215,]),'IDENTIFIER':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,39,42,44,45,46,47,48,49,51,52,53,56,58,59,60,62,63,64,65,66,71,72,73,77,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,133,136,139,143,150,151,152,155,160,161,162,163,164,165,169,172,173,174,175,176,177,178,179,180,181,182,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,235,239,241,242,243,245,246,248,251,252,254,256,272,291,292,293,299,300,301,302,311,318,321,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[43,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,49,52,-52,-53,-5,43,-68,43,-12,-14,-16,-18,-51,76,-44,43,95,124,-6,43,95,148,-69,-70,-72,43,-58,-60,76,95,95,95,95,95,-128,-129,-130,-131,-132,-133,-190,124,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,95,124,221,95,95,-129,43,-71,-73,-50,95,-57,-59,-40,76,95,95,95,259,95,-91,-92,95,95,95,95,267,268,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-191,-193,124,124,-206,95,95,95,95,95,-217,-218,-219,95,-129,95,307,43,43,95,-49,43,95,-42,-41,76,95,-181,95,-202,124,-204,95,95,-216,-220,95,-129,-43,95,95,95,95,95,-203,124,124,124,95,95,95,-129,-208,-209,-210,124,124,95,124,-212,124,-214,124,-207,-211,-213,-215,]),'(':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,39,40,42,43,44,45,46,47,48,49,52,53,56,58,59,60,61,62,64,65,66,71,72,73,83,87,88,89,91,92,94,95,96,97,98,99,100,101,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,136,139,141,143,145,150,151,152,153,155,160,161,162,163,165,169,172,174,175,176,177,178,179,180,183,185,188,190,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,227,228,229,230,231,232,233,234,239,240,241,242,243,245,246,248,251,254,256,264,267,268,272,273,275,276,291,292,293,298,299,300,301,302,303,305,310,311,313,316,318,321,324,326,327,328,329,331,333,335,336,337,338,339,340,341,342,343,344,346,347,349,350,351,352,357,358,359,361,363,365,366,367,368,369,370,372,373,374,375,376,377,378,379,380,],[44,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-5,44,63,-68,-74,44,-12,-14,-16,-18,-51,-44,44,92,92,-6,44,63,92,-69,-70,-72,44,-58,-60,92,180,185,188,190,92,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,-190,92,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,188,216,217,218,92,220,92,92,-83,-129,-86,241,-71,-73,-75,-50,188,-57,-59,-40,188,92,188,92,-91,-92,92,188,92,92,-140,92,92,92,276,188,188,188,188,188,188,188,188,188,188,188,188,188,188,-191,-193,92,92,-206,92,92,92,92,92,-217,-218,-219,-77,92,-129,-78,92,-82,-84,-85,241,312,241,92,-49,44,188,-42,-41,92,-181,-136,-138,-139,188,-146,276,276,-202,92,-204,339,92,92,-216,-220,-76,-81,312,92,-161,-155,-129,-43,92,188,-135,-137,92,188,92,-203,92,92,92,92,92,92,-80,-79,-157,-129,-163,-154,-162,-156,-159,-208,-209,-210,92,92,-158,-160,-164,-141,92,92,-212,92,-214,92,-142,-207,-211,-213,-215,]),'[':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,64,65,66,72,73,83,87,94,95,103,104,124,141,145,150,151,152,153,155,161,162,163,170,171,183,193,227,230,232,233,234,239,240,241,243,248,251,254,257,259,264,267,268,273,275,276,303,305,310,313,316,321,325,327,328,333,342,343,344,347,349,350,351,352,365,366,367,368,369,376,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,62,-68,-74,-12,-14,-16,-18,-51,-44,62,-69,-70,-72,-58,-60,172,179,-134,-143,-144,-145,-143,-83,-86,242,-71,-73,-75,-50,-57,-59,-40,172,-182,-140,242,-77,-78,-82,-84,-85,242,311,242,-49,-42,-41,172,-183,-185,-136,-138,-139,-146,242,242,-76,-81,311,-161,-155,-43,-184,-135,-137,172,-80,-79,-157,-163,-154,-162,-156,-159,-158,-160,-164,-141,172,-142,]),',':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,38,40,41,42,43,45,46,47,48,49,52,61,64,65,66,74,75,76,78,81,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,127,137,138,141,145,146,147,148,149,150,151,152,153,155,157,158,159,163,166,167,168,183,184,186,187,189,192,212,225,227,230,232,233,234,237,238,239,240,243,247,248,249,250,251,253,255,260,261,262,263,264,265,266,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,295,296,297,303,305,307,309,310,313,316,319,320,321,322,323,327,328,332,334,342,343,344,347,349,350,351,352,353,354,355,356,360,362,364,365,366,367,368,376,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-9,60,-67,-7,-68,-74,-12,-14,-16,-18,-51,-44,-66,-69,-70,-72,164,-45,-47,-9,-10,-178,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-143,215,-147,-8,-83,-86,235,236,-87,-167,-171,-71,-73,-75,-50,245,-61,-63,-40,252,254,-174,-140,-124,-125,-121,-126,215,-93,215,-77,-78,-82,-84,-85,-169,-170,-151,-152,-49,-64,-42,-46,-48,-41,-179,-175,-90,215,-97,215,-136,329,-172,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-148,215,215,215,-76,-81,-88,-168,-153,-161,-155,-62,-65,-43,-180,-176,-135,-137,-127,-122,-80,-79,-157,-163,-154,-162,-156,-159,-177,-95,-173,369,215,215,215,-158,-160,-164,-141,-142,]),')':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,63,64,65,66,67,72,73,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,117,137,141,144,145,146,147,148,149,150,151,152,153,155,161,162,163,180,183,184,186,187,189,191,192,193,214,227,230,232,233,234,237,238,239,240,241,243,248,251,260,262,264,265,266,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,295,296,297,303,305,307,308,309,310,312,313,314,315,316,321,327,328,332,334,340,341,342,343,344,347,348,349,350,351,352,354,355,360,362,364,365,366,367,368,376,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-67,-68,-74,-12,-14,-16,-18,-51,-44,-66,145,-69,-70,-72,153,-58,-60,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-205,-147,-83,233,-86,234,-165,-87,-167,-171,-71,-73,-75,-50,-57,-59,-40,264,-140,-124,-125,-121,-126,272,273,-149,-206,-77,-78,-82,-84,-85,-169,-170,-151,-152,313,-49,-42,-41,-90,-97,-136,328,-172,-138,-139,330,331,332,-146,-150,-151,313,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-148,336,337,338,-76,-81,-88,-166,-168,-153,347,-161,349,350,-155,-43,-135,-137,-127,-122,361,363,-80,-79,-157,-163,367,-154,-162,-156,-159,-95,-173,371,373,375,-158,-160,-164,-141,-142,]),':':([15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40,43,49,52,61,71,72,73,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,126,137,141,145,153,155,159,161,162,163,183,184,186,187,189,211,212,227,230,232,233,234,243,245,248,251,260,261,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,303,305,321,327,328,332,334,342,343,354,368,376,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-74,-51,-44,-66,160,-58,-60,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,210,213,-147,-83,-86,-75,-50,246,-57,-59,-40,-140,-124,-125,-121,-126,292,-93,-77,-78,-82,-84,-85,-49,160,-42,-41,-90,326,-97,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-148,-76,-81,-43,-135,-137,-127,-122,-80,-79,-95,-141,-142,]),']':([27,28,29,62,66,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,137,139,140,143,152,183,184,186,187,189,212,226,229,242,258,260,262,263,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,304,306,311,317,318,327,328,332,334,345,346,354,368,376,],[-37,-38,-39,141,-72,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-147,227,230,232,-73,-140,-124,-125,-121,-126,-93,303,305,316,325,-90,-97,327,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-148,342,343,344,351,352,-135,-137,-127,-122,365,366,-95,-141,-142,]),'INC_DEC':([27,28,29,37,56,58,59,62,66,83,87,88,89,91,92,94,95,96,97,98,99,100,101,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-37,-38,-39,-5,88,88,-6,88,-72,88,183,88,88,88,88,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,-190,88,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,88,88,88,88,-129,-73,88,88,88,88,88,-91,-92,88,88,88,88,-140,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-191,-193,88,88,-206,88,88,88,88,88,-217,-218,-219,88,-129,88,88,88,88,-181,-136,-138,-139,88,-146,-202,88,-204,88,88,-216,-220,88,-129,88,88,-135,-137,88,88,88,-203,88,88,88,88,88,88,-129,-208,-209,-210,88,88,-141,88,88,-212,88,-214,88,-142,-207,-211,-213,-215,]),'SIZEOF':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-37,-38,-39,-5,91,91,-6,91,-72,91,91,91,91,91,-128,-129,-130,-131,-132,-133,-190,91,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,91,91,91,91,-129,-73,91,91,91,91,91,-91,-92,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-191,-193,91,91,-206,91,91,91,91,91,-217,-218,-219,91,-129,91,91,91,91,-181,91,-202,91,-204,91,91,-216,-220,91,-129,91,91,91,91,91,-203,91,91,91,91,91,91,-129,-208,-209,-210,91,91,91,91,-212,91,-214,91,-207,-211,-213,-215,]),'&':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-37,-38,-39,-5,96,96,-6,96,-72,96,-121,-123,96,96,-117,96,96,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,197,-104,-106,-108,-112,-114,-190,96,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,96,96,96,96,-129,-73,96,96,96,96,96,-91,-92,96,96,96,96,-140,-124,96,-125,-121,96,-126,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-191,-193,96,96,-206,96,96,96,96,96,-217,-218,-219,96,-129,96,96,96,96,-181,-136,-138,-139,96,-146,197,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-202,96,-204,96,96,-216,-220,96,-129,96,96,-135,-137,96,96,-127,96,-122,-203,96,96,96,96,96,96,-129,-208,-209,-210,96,96,-141,96,96,-212,96,-214,96,-142,-207,-211,-213,-215,]),'+':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-37,-38,-39,-5,98,98,-6,98,-72,98,-121,-123,98,98,-117,98,98,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,203,-114,-190,98,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,98,98,98,98,-129,-73,98,98,98,98,98,-91,-92,98,98,98,98,-140,-124,98,-125,-121,98,-126,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-191,-193,98,98,-206,98,98,98,98,98,-217,-218,-219,98,-129,98,98,98,98,-181,-136,-138,-139,98,-146,203,-115,-116,-118,-119,-120,-202,98,-204,98,98,-216,-220,98,-129,98,98,-135,-137,98,98,-127,98,-122,-203,98,98,98,98,98,98,-129,-208,-209,-210,98,98,-141,98,98,-212,98,-214,98,-142,-207,-211,-213,-215,]),'-':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,183,184,185,186,187,188,189,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,264,267,268,272,273,285,286,287,288,289,290,291,292,293,299,300,301,302,311,318,324,326,327,328,329,331,332,333,334,335,336,337,338,339,340,341,346,357,358,359,361,363,368,369,370,372,373,374,375,376,377,378,379,380,],[-37,-38,-39,-5,99,99,-6,99,-72,99,-121,-123,99,99,-117,99,99,-134,-143,-128,-129,-130,-131,-132,-133,-144,-145,204,-114,-190,99,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,-143,99,99,99,99,-129,-73,99,99,99,99,99,-91,-92,99,99,99,99,-140,-124,99,-125,-121,99,-126,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-191,-193,99,99,-206,99,99,99,99,99,-217,-218,-219,99,-129,99,99,99,99,-181,-136,-138,-139,99,-146,204,-115,-116,-118,-119,-120,-202,99,-204,99,99,-216,-220,99,-129,99,99,-135,-137,99,99,-127,99,-122,-203,99,99,99,99,99,99,-129,-208,-209,-210,99,99,-141,99,99,-212,99,-214,99,-142,-207,-211,-213,-215,]),'~':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-37,-38,-39,-5,100,100,-6,100,-72,100,100,100,100,100,-128,-129,-130,-131,-132,-133,-190,100,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,100,100,100,100,-129,-73,100,100,100,100,100,-91,-92,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-191,-193,100,100,-206,100,100,100,100,100,-217,-218,-219,100,-129,100,100,100,100,-181,100,-202,100,-204,100,100,-216,-220,100,-129,100,100,100,100,100,-203,100,100,100,100,100,100,-129,-208,-209,-210,100,100,100,100,-212,100,-214,100,-207,-211,-213,-215,]),'!':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-37,-38,-39,-5,101,101,-6,101,-72,101,101,101,101,101,-128,-129,-130,-131,-132,-133,-190,101,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,101,101,101,101,-129,-73,101,101,101,101,101,-91,-92,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-191,-193,101,101,-206,101,101,101,101,101,-217,-218,-219,101,-129,101,101,101,101,-181,101,-202,101,-204,101,101,-216,-220,101,-129,101,101,101,101,101,-203,101,101,101,101,101,101,-129,-208,-209,-210,101,101,101,101,-212,101,-214,101,-207,-211,-213,-215,]),'CONSTANT':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-37,-38,-39,-5,103,103,-6,103,-72,103,103,103,103,103,-128,-129,-130,-131,-132,-133,-190,103,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,103,103,103,103,-129,-73,103,103,103,103,103,-91,-92,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-191,-193,103,103,-206,103,103,103,103,103,-217,-218,-219,103,-129,103,103,103,103,-181,103,-202,103,-204,103,103,-216,-220,103,-129,103,103,103,103,103,-203,103,103,103,103,103,103,-129,-208,-209,-210,103,103,103,103,-212,103,-214,103,-207,-211,-213,-215,]),'STRING_LITERAL':([27,28,29,37,56,58,59,62,66,83,88,89,91,92,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,122,123,125,131,136,139,143,152,160,165,169,172,174,175,176,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,220,222,223,224,228,229,231,242,246,254,256,272,291,292,293,299,300,301,302,311,318,324,326,329,331,333,335,336,337,338,339,340,341,346,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[-37,-38,-39,-5,104,104,-6,104,-72,104,104,104,104,104,-128,-129,-130,-131,-132,-133,-190,104,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,104,104,104,104,-129,-73,104,104,104,104,104,-91,-92,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-191,-193,104,104,-206,104,104,104,104,104,-217,-218,-219,104,-129,104,104,104,104,-181,104,-202,104,-204,104,104,-216,-220,104,-129,104,104,104,104,104,-203,104,104,104,104,104,104,-129,-208,-209,-210,104,104,104,104,-212,104,-214,104,-207,-211,-213,-215,]),'{':([31,32,33,34,36,37,40,43,49,52,54,56,57,58,59,61,80,83,112,113,114,115,116,117,118,119,120,121,122,123,131,141,145,153,169,208,209,210,213,214,222,223,224,227,230,232,233,234,254,256,272,291,292,293,301,302,303,305,324,330,331,332,333,335,336,337,338,342,343,357,358,359,361,363,369,370,372,373,374,375,377,378,379,380,],[50,51,-52,-53,58,-5,-67,-74,68,77,58,83,-188,58,-6,-66,-189,83,-190,58,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,58,-83,-86,-75,83,-191,-193,58,58,-206,-217,-218,-219,-77,-78,-82,-84,-85,83,-181,333,-202,58,-204,-216,-220,-76,-81,83,333,333,333,83,-203,58,58,58,-80,-79,-208,-209,-210,58,58,83,58,-212,58,-214,58,-207,-211,-213,-215,]),'=':([36,40,43,61,76,78,85,87,94,95,103,104,124,141,145,153,170,171,183,184,186,187,189,227,230,232,233,234,257,259,264,267,268,273,303,305,325,327,328,332,334,342,343,368,376,],[56,-67,-74,-66,165,56,175,-123,-134,-143,-144,-145,-143,-83,-86,-75,256,-182,-140,-124,-125,-121,-126,-77,-78,-82,-84,-85,-183,-185,-136,-138,-139,-146,-76,-81,-184,-135,-137,-127,-122,-80,-79,-141,-142,]),'}':([37,58,59,69,70,74,75,76,82,84,85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,154,156,164,166,167,168,183,184,186,187,189,208,209,212,214,222,223,224,244,249,250,252,253,254,255,260,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,293,301,302,322,323,327,328,332,334,335,353,354,356,357,358,359,368,369,372,374,376,377,378,379,380,],[-5,112,-6,155,-54,163,-45,-47,-178,-89,-121,-94,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-190,208,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,243,-55,248,251,253,-174,-140,-124,-125,-121,-126,-191,-193,-93,-206,-217,-218,-219,-56,-46,-48,321,-179,322,-175,-90,-97,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-202,-204,-216,-220,-180,-176,-135,-137,-127,-122,-203,-177,-95,368,-208,-209,-210,-141,376,-212,-214,-142,-207,-211,-213,-215,]),'CASE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,125,-6,-190,125,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,125,-191,-193,125,125,-206,-217,-218,-219,-202,125,-204,-216,-220,-203,125,125,125,-208,-209,-210,125,125,125,-212,125,-214,125,-207,-211,-213,-215,]),'DEFAULT':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,126,-6,-190,126,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,126,-191,-193,126,126,-206,-217,-218,-219,-202,126,-204,-216,-220,-203,126,126,126,-208,-209,-210,126,126,126,-212,126,-214,126,-207,-211,-213,-215,]),'IF':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,128,-6,-190,128,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,128,-191,-193,128,128,-206,-217,-218,-219,-202,128,-204,-216,-220,-203,128,128,128,-208,-209,-210,128,128,128,-212,128,-214,128,-207,-211,-213,-215,]),'SWITCH':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,129,-6,-190,129,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,129,-191,-193,129,129,-206,-217,-218,-219,-202,129,-204,-216,-220,-203,129,129,129,-208,-209,-210,129,129,129,-212,129,-214,129,-207,-211,-213,-215,]),'WHILE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,219,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,130,-6,-190,130,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,130,-191,-193,130,130,-206,298,-217,-218,-219,-202,130,-204,-216,-220,-203,130,130,130,-208,-209,-210,130,130,130,-212,130,-214,130,-207,-211,-213,-215,]),'DO':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,131,-6,-190,131,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,131,-191,-193,131,131,-206,-217,-218,-219,-202,131,-204,-216,-220,-203,131,131,131,-208,-209,-210,131,131,131,-212,131,-214,131,-207,-211,-213,-215,]),'FOR':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,132,-6,-190,132,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,132,-191,-193,132,132,-206,-217,-218,-219,-202,132,-204,-216,-220,-203,132,132,132,-208,-209,-210,132,132,132,-212,132,-214,132,-207,-211,-213,-215,]),'GOTO':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,133,-6,-190,133,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,133,-191,-193,133,133,-206,-217,-218,-219,-202,133,-204,-216,-220,-203,133,133,133,-208,-209,-210,133,133,133,-212,133,-214,133,-207,-211,-213,-215,]),'CONTINUE':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,134,-6,-190,134,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,134,-191,-193,134,134,-206,-217,-218,-219,-202,134,-204,-216,-220,-203,134,134,134,-208,-209,-210,134,134,134,-212,134,-214,134,-207,-211,-213,-215,]),'BREAK':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,135,-6,-190,135,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,135,-191,-193,135,135,-206,-217,-218,-219,-202,135,-204,-216,-220,-203,135,135,135,-208,-209,-210,135,135,135,-212,135,-214,135,-207,-211,-213,-215,]),'RETURN':([37,58,59,112,113,114,115,116,117,118,119,120,121,122,123,131,208,209,210,213,214,222,223,224,291,292,293,301,302,335,336,337,338,357,358,359,361,363,370,372,373,374,375,377,378,379,380,],[-5,136,-6,-190,136,-192,-194,-195,-205,-196,-197,-198,-199,-200,-201,136,-191,-193,136,136,-206,-217,-218,-219,-202,136,-204,-216,-220,-203,136,136,136,-208,-209,-210,136,136,136,-212,136,-214,136,-207,-211,-213,-215,]),'.':([83,87,94,95,103,104,124,170,171,183,254,257,259,264,267,268,273,325,327,328,333,368,369,376,],[173,181,-134,-143,-144,-145,-143,173,-182,-140,173,-183,-185,-136,-138,-139,-146,-184,-135,-137,173,-141,173,-142,]),'/':([85,87,90,94,95,103,104,111,124,183,184,186,187,189,264,267,268,273,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,206,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,206,206,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'%':([85,87,90,94,95,103,104,111,124,183,184,186,187,189,264,267,268,273,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,207,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,207,207,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'SHIFT_OP':([85,87,90,94,95,103,104,109,110,111,124,183,184,186,187,189,264,267,268,273,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,202,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,202,202,202,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'<':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,199,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,199,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'>':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,200,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,200,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'GE_LE':([85,87,90,94,95,103,104,108,109,110,111,124,183,184,186,187,189,264,267,268,273,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,201,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,201,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'EQ_NE':([85,87,90,94,95,103,104,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,198,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,198,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'^':([85,87,90,94,95,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,-144,-145,196,-102,-104,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,196,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'|':([85,87,90,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,-134,-143,195,-144,-145,-100,-102,-104,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,195,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'AND_OP':([85,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,-123,-117,194,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,194,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'?':([85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,177,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,-97,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'OR_OP':([85,86,87,90,93,94,95,102,103,104,105,106,107,108,109,110,111,124,183,184,186,187,189,262,264,267,268,273,277,278,279,280,281,282,283,284,285,286,287,288,289,290,327,328,332,334,368,376,],[-121,178,-123,-117,-96,-134,-143,-98,-144,-145,-100,-102,-104,-106,-108,-112,-114,-143,-140,-124,-125,-121,-126,-97,-136,-138,-139,-146,-99,-101,-103,-105,-107,-109,-110,-111,-113,-115,-116,-118,-119,-120,-135,-137,-127,-122,-141,-142,]),'ASSIGN_OP':([85,87,94,95,103,104,124,183,184,186,187,189,264,267,268,273,327,328,332,334,368,376,],[176,-123,-134,-143,-144,-145,-143,-140,-124,-125,-121,-126,-136,-138,-139,-146,-135,-137,-127,-122,-141,-142,]),'PTR_OP':([87,94,95,103,104,124,183,264,267,268,273,327,328,368,376,],[182,-134,-143,-144,-145,-143,-140,-136,-138,-139,-146,-135,-137,-141,-142,]),'ELSE':([112,117,118,119,120,121,122,123,208,214,222,223,224,291,293,301,302,335,357,358,359,372,374,377,378,379,380,],[-190,-205,-196,-197,-198,-199,-200,-201,-191,-206,-217,-218,-219,-202,-204,-216,-220,-203,370,-209,-210,-212,-214,-207,-211,-213,-215,]),'ELLIPSIS':([236,],[308,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,35,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,36,54,58,113,220,],[4,4,57,80,115,115,300,]),'declaration_specifiers':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[5,5,45,46,47,48,53,53,53,150,53,53,150,150,150,150,]),'storage_class_specifier':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'type_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[7,7,7,7,7,7,7,72,7,7,7,72,72,72,72,72,7,72,72,72,72,7,7,7,7,7,]),'type_qualifier':([0,1,6,7,8,9,36,42,50,54,58,62,63,64,68,69,72,73,92,113,139,142,154,185,188,190,220,231,236,241,276,312,],[8,8,8,8,8,8,8,66,73,8,8,66,8,152,73,73,73,73,73,8,152,66,73,73,73,73,8,152,8,8,8,8,]),'function_specifier':([0,1,6,7,8,9,36,54,58,63,113,220,236,241,276,312,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct_or_union_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'enum_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'struct_or_union':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,92,113,154,185,188,190,220,236,241,276,312,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'declarator':([5,44,53,60,71,150,241,245,],[36,67,78,78,159,237,67,159,]),'init_declarator_list':([5,53,],[38,38,]),'pointer':([5,42,44,53,60,64,71,150,193,241,245,276,],[39,65,39,39,39,151,39,239,275,239,39,275,]),'direct_declarator':([5,39,44,53,60,71,150,239,241,245,],[40,61,40,40,40,40,40,61,40,40,]),'init_declarator':([5,53,60,],[41,41,138,]),'declaration_list':([36,],[54,]),'compound_statement':([36,54,58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[55,79,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'type_qualifier_list':([42,62,142,],[64,139,231,]),'struct_declaration_list':([50,68,],[69,154,]),'struct_declaration':([50,68,69,154,],[70,70,156,156,]),'specifier_qualifier_list':([50,68,69,72,73,92,154,185,188,190,],[71,71,71,161,162,193,71,193,193,193,]),'enumerator_list':([51,77,],[74,166,]),'enumerator':([51,77,164,252,],[75,75,249,249,]),'initializer':([56,83,169,254,324,333,369,],[81,168,255,323,353,168,323,]),'assignment_expression':([56,58,62,83,92,113,131,136,139,169,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,254,292,299,300,311,324,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[82,137,140,82,137,137,137,137,226,82,260,137,137,266,137,137,137,137,137,294,137,137,137,137,304,306,317,82,137,137,137,345,82,355,82,137,137,137,137,137,137,137,137,82,137,137,137,]),'conditional_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[84,84,84,84,84,84,212,84,84,84,212,212,84,212,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,212,84,84,84,84,84,84,354,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'unary_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[85,85,85,85,184,187,189,85,85,187,85,85,85,187,187,85,187,85,85,187,85,85,85,85,85,187,187,187,187,187,187,187,187,187,187,187,187,187,187,85,85,85,85,85,85,85,85,85,85,187,85,187,85,85,85,85,85,187,85,187,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'logical_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'postfix_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'unary_operator':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'cast_expression':([56,58,62,83,89,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[90,90,90,90,186,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,288,289,290,90,90,90,90,90,90,90,90,90,90,90,90,334,90,90,90,90,90,90,90,334,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'logical_and_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,262,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'primary_expression':([56,58,62,83,88,89,91,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,217,218,220,228,231,242,246,254,272,292,299,300,311,324,326,329,331,333,336,337,338,339,340,341,361,363,369,370,373,375,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'inclusive_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,277,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'exclusive_or_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,278,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'and_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,279,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'equality_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,280,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'relational_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,281,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'shift_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,282,283,284,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'additive_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,285,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'multiplicative_expression':([56,58,62,83,92,113,125,131,136,139,160,165,169,172,174,177,178,179,180,185,188,190,194,195,196,197,198,199,200,201,202,203,204,210,213,215,216,217,218,220,228,231,242,246,254,292,299,300,311,324,326,329,333,336,337,338,339,340,341,361,363,369,370,373,375,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,286,287,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'block_item_list':([58,],[113,]),'block_item':([58,113,],[114,209,]),'statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[116,116,219,291,293,335,357,358,359,372,374,377,379,380,]),'labeled_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'expression_statement':([58,113,131,210,213,220,292,299,300,336,337,338,361,363,370,373,375,],[120,120,120,120,120,299,120,340,341,120,120,120,120,120,120,120,120,]),'selection_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'iteration_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'jump_statement':([58,113,131,210,213,292,336,337,338,361,363,370,373,375,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'expression':([58,92,113,131,136,177,179,185,188,190,210,213,216,217,218,220,292,299,300,336,337,338,339,340,341,361,363,370,373,375,],[127,192,127,127,225,261,263,192,192,192,127,127,295,296,297,127,127,127,127,127,127,127,360,362,364,127,127,127,127,127,]),'parameter_type_list':([63,241,276,312,],[144,315,315,348,]),'identifier_list':([63,],[146,]),'parameter_list':([63,241,276,312,],[147,147,147,147,]),'parameter_declaration':([63,236,241,276,312,],[149,309,149,149,149,]),'struct_declarator_list':([71,],[157,]),'struct_declarator':([71,245,],[158,319,]),'initializer_list':([83,333,],[167,356,]),'designation':([83,254,333,369,],[169,324,169,324,]),'designator_list':([83,254,333,369,],[170,170,170,170,]),'designator':([83,170,254,333,369,],[171,257,171,171,171,]),'assignment_operator':([85,],[174,]),'type_name':([92,185,188,190,],[191,269,270,271,]),'constant_expression':([125,160,165,172,246,],[211,247,250,258,320,]),'abstract_declarator':([150,193,241,276,],[238,274,314,314,]),'direct_abstract_declarator':([150,193,239,241,275,276,],[240,240,310,240,310,240,]),'argument_expression_list':([180,],[265,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','yacc.py',16),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','yacc.py',17),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','yacc.py',24),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','yacc.py',25),
  ('declaration -> declaration_specifiers ;','declaration',2,'p_declaration','yacc.py',31),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','yacc.py',32),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','yacc.py',38),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','yacc.py',39),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','yacc.py',44),
  ('init_declarator -> declarator = initializer','init_declarator',3,'p_init_declarator','yacc.py',45),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',52),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',53),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',54),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',55),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',56),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',57),
  ('declaration_specifiers -> function_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',58),
  ('declaration_specifiers -> function_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',59),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',65),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',66),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',67),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',68),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',69),
  ('function_specifier -> INLINE','function_specifier',1,'p_function_specifier','yacc.py',75),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','yacc.py',81),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','yacc.py',82),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','yacc.py',83),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','yacc.py',84),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','yacc.py',85),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','yacc.py',86),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','yacc.py',87),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','yacc.py',88),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','yacc.py',89),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','yacc.py',90),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','yacc.py',91),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','yacc.py',92),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','yacc.py',98),
  ('type_qualifier -> RESTRICT','type_qualifier',1,'p_type_qualifier','yacc.py',99),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','yacc.py',100),
  ('enum_specifier -> ENUM { enumerator_list }','enum_specifier',4,'p_enum_specifier','yacc.py',106),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list }','enum_specifier',5,'p_enum_specifier','yacc.py',107),
  ('enum_specifier -> ENUM { enumerator_list , }','enum_specifier',5,'p_enum_specifier','yacc.py',108),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list , }','enum_specifier',6,'p_enum_specifier','yacc.py',109),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','yacc.py',110),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','yacc.py',118),
  ('enumerator_list -> enumerator_list , enumerator','enumerator_list',3,'p_enumerator_list','yacc.py',119),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','yacc.py',125),
  ('enumerator -> IDENTIFIER = constant_expression','enumerator',3,'p_enumerator','yacc.py',126),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }','struct_or_union_specifier',5,'p_struct_or_union_specifier','yacc.py',134),
  ('struct_or_union_specifier -> struct_or_union { struct_declaration_list }','struct_or_union_specifier',4,'p_struct_or_union_specifier','yacc.py',135),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','yacc.py',136),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','yacc.py',144),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','yacc.py',145),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','yacc.py',151),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','yacc.py',152),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list ;','struct_declaration',3,'p_struct_declaration','yacc.py',158),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',164),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',165),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',166),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',167),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','yacc.py',173),
  ('struct_declarator_list -> struct_declarator_list , struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','yacc.py',174),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','yacc.py',180),
  ('struct_declarator -> : constant_expression','struct_declarator',2,'p_struct_declarator','yacc.py',181),
  ('struct_declarator -> declarator : constant_expression','struct_declarator',3,'p_struct_declarator','yacc.py',182),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','yacc.py',188),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','yacc.py',189),
  ('pointer -> *','pointer',1,'p_pointer','yacc.py',195),
  ('pointer -> * type_qualifier_list','pointer',2,'p_pointer','yacc.py',196),
  ('pointer -> * pointer','pointer',2,'p_pointer','yacc.py',197),
  ('pointer -> * type_qualifier_list pointer','pointer',3,'p_pointer','yacc.py',198),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','yacc.py',204),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','yacc.py',205),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','yacc.py',211),
  ('direct_declarator -> ( declarator )','direct_declarator',3,'p_direct_declarator','yacc.py',212),
  ('direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]','direct_declarator',5,'p_direct_declarator','yacc.py',213),
  ('direct_declarator -> direct_declarator [ type_qualifier_list ]','direct_declarator',4,'p_direct_declarator','yacc.py',214),
  ('direct_declarator -> direct_declarator [ assignment_expression ]','direct_declarator',4,'p_direct_declarator','yacc.py',215),
  ('direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',216),
  ('direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',217),
  ('direct_declarator -> direct_declarator [ type_qualifier_list * ]','direct_declarator',5,'p_direct_declarator','yacc.py',218),
  ('direct_declarator -> direct_declarator [ * ]','direct_declarator',4,'p_direct_declarator','yacc.py',219),
  ('direct_declarator -> direct_declarator [ ]','direct_declarator',3,'p_direct_declarator','yacc.py',220),
  ('direct_declarator -> direct_declarator ( parameter_type_list )','direct_declarator',4,'p_direct_declarator','yacc.py',221),
  ('direct_declarator -> direct_declarator ( identifier_list )','direct_declarator',4,'p_direct_declarator','yacc.py',222),
  ('direct_declarator -> direct_declarator ( )','direct_declarator',3,'p_direct_declarator','yacc.py',223),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','yacc.py',231),
  ('identifier_list -> identifier_list , IDENTIFIER','identifier_list',3,'p_identifier_list','yacc.py',232),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','yacc.py',242),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','yacc.py',243),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','yacc.py',249),
  ('assignment_operator -> ASSIGN_OP','assignment_operator',1,'p_assignment_operator','yacc.py',250),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','yacc.py',256),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','yacc.py',262),
  ('conditional_expression -> logical_or_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','yacc.py',263),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','yacc.py',269),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','yacc.py',270),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','yacc.py',276),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','yacc.py',277),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','yacc.py',283),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','yacc.py',284),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','yacc.py',290),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','yacc.py',291),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','yacc.py',297),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','yacc.py',298),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','yacc.py',304),
  ('equality_expression -> equality_expression EQ_NE relational_expression','equality_expression',3,'p_equality_expression','yacc.py',305),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','yacc.py',311),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_relational_expression','yacc.py',312),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_relational_expression','yacc.py',313),
  ('relational_expression -> relational_expression GE_LE shift_expression','relational_expression',3,'p_relational_expression','yacc.py',314),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','yacc.py',320),
  ('shift_expression -> shift_expression SHIFT_OP additive_expression','shift_expression',3,'p_shift_expression','yacc.py',321),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','yacc.py',327),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',328),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',329),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','yacc.py',335),
  ('multiplicative_expression -> multiplicative_expression * cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',336),
  ('multiplicative_expression -> multiplicative_expression / cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',337),
  ('multiplicative_expression -> multiplicative_expression % cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',338),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','yacc.py',344),
  ('cast_expression -> ( type_name ) cast_expression','cast_expression',4,'p_cast_expression','yacc.py',345),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','yacc.py',351),
  ('unary_expression -> INC_DEC unary_expression','unary_expression',2,'p_unary_expression','yacc.py',352),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','yacc.py',353),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','yacc.py',354),
  ('unary_expression -> SIZEOF ( type_name )','unary_expression',4,'p_unary_expression','yacc.py',355),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','yacc.py',361),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','yacc.py',362),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','yacc.py',363),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','yacc.py',364),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','yacc.py',365),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','yacc.py',366),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','yacc.py',372),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','yacc.py',373),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','yacc.py',374),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','yacc.py',375),
  ('postfix_expression -> postfix_expression . IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',376),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',377),
  ('postfix_expression -> postfix_expression INC_DEC','postfix_expression',2,'p_postfix_expression','yacc.py',378),
  ('postfix_expression -> ( type_name ) { initializer_list }','postfix_expression',6,'p_postfix_expression','yacc.py',379),
  ('postfix_expression -> ( type_name ) { initializer_list , }','postfix_expression',7,'p_postfix_expression','yacc.py',380),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','yacc.py',388),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','yacc.py',389),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','yacc.py',390),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','yacc.py',391),
  ('expression -> assignment_expression','expression',1,'p_expression','yacc.py',399),
  ('expression -> expression , assignment_expression','expression',3,'p_expression','yacc.py',400),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','yacc.py',406),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','yacc.py',407),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','yacc.py',413),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','yacc.py',414),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','yacc.py',415),
  ('direct_abstract_declarator -> ( abstract_declarator )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',421),
  ('direct_abstract_declarator -> [ ]','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',422),
  ('direct_abstract_declarator -> [ assignment_expression ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',423),
  ('direct_abstract_declarator -> direct_abstract_declarator [ ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',424),
  ('direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',425),
  ('direct_abstract_declarator -> [ * ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',426),
  ('direct_abstract_declarator -> direct_abstract_declarator [ * ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',427),
  ('direct_abstract_declarator -> ( )','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',428),
  ('direct_abstract_declarator -> ( parameter_type_list )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',429),
  ('direct_abstract_declarator -> direct_abstract_declarator ( )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',430),
  ('direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',431),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','yacc.py',438),
  ('parameter_type_list -> parameter_list , ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','yacc.py',439),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','yacc.py',445),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','yacc.py',446),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',452),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',453),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','yacc.py',454),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','yacc.py',460),
  ('argument_expression_list -> argument_expression_list , assignment_expression','argument_expression_list',3,'p_argument_expression_list','yacc.py',461),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','yacc.py',467),
  ('initializer_list -> designation initializer','initializer_list',2,'p_initializer_list','yacc.py',468),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','yacc.py',469),
  ('initializer_list -> initializer_list , designation initializer','initializer_list',4,'p_initializer_list','yacc.py',470),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','yacc.py',476),
  ('initializer -> { initializer_list }','initializer',3,'p_initializer','yacc.py',477),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer','yacc.py',478),
  ('designation -> designator_list =','designation',2,'p_designation','yacc.py',483),
  ('designator_list -> designator','designator_list',1,'p_designator_list','yacc.py',489),
  ('designator_list -> designator_list designator','designator_list',2,'p_designator_list','yacc.py',490),
  ('designator -> [ constant_expression ]','designator',3,'p_designator','yacc.py',497),
  ('designator -> . IDENTIFIER','designator',2,'p_designator','yacc.py',498),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','yacc.py',506),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','yacc.py',507),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','yacc.py',513),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','yacc.py',514),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','yacc.py',520),
  ('compound_statement -> { block_item_list }','compound_statement',3,'p_compound_statement','yacc.py',521),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','yacc.py',527),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','yacc.py',528),
  ('block_item -> declaration','block_item',1,'p_block_item','yacc.py',534),
  ('block_item -> statement','block_item',1,'p_block_item','yacc.py',535),
  ('statement -> labeled_statement','statement',1,'p_statement','yacc.py',542),
  ('statement -> compound_statement','statement',1,'p_statement','yacc.py',543),
  ('statement -> expression_statement','statement',1,'p_statement','yacc.py',544),
  ('statement -> selection_statement','statement',1,'p_statement','yacc.py',545),
  ('statement -> iteration_statement','statement',1,'p_statement','yacc.py',546),
  ('statement -> jump_statement','statement',1,'p_statement','yacc.py',547),
  ('labeled_statement -> IDENTIFIER : statement','labeled_statement',3,'p_labeled_statement','yacc.py',553),
  ('labeled_statement -> CASE constant_expression : statement','labeled_statement',4,'p_labeled_statement','yacc.py',554),
  ('labeled_statement -> DEFAULT : statement','labeled_statement',3,'p_labeled_statement','yacc.py',555),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','yacc.py',563),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','yacc.py',564),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','yacc.py',570),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',571),
  ('selection_statement -> SWITCH ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',572),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','yacc.py',578),
  ('iteration_statement -> DO statement WHILE ( expression ) ;','iteration_statement',7,'p_iteration_statement','yacc.py',579),
  ('iteration_statement -> FOR ( expression_statement expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',580),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',581),
  ('iteration_statement -> FOR ( declaration expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',582),
  ('iteration_statement -> FOR ( declaration expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',583),
  ('jump_statement -> GOTO IDENTIFIER ;','jump_statement',3,'p_jump_statement','yacc.py',589),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','yacc.py',590),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','yacc.py',591),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement','yacc.py',592),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement','yacc.py',593),
]
