Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     primary_expression -> IDENTIFIER
Rule 4     primary_expression -> CONSTANT
Rule 5     primary_expression -> STRING_LITERAL
Rule 6     primary_expression -> ( expression )
Rule 7     postfix_expression -> primary_expression
Rule 8     postfix_expression -> postfix_expression [ expression ]
Rule 9     postfix_expression -> postfix_expression ( )
Rule 10    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 11    postfix_expression -> postfix_expression . IDENTIFIER
Rule 12    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 13    postfix_expression -> postfix_expression INC_DEC
Rule 14    postfix_expression -> ( type_name ) { initializer_list }
Rule 15    postfix_expression -> ( type_name ) { initializer_list , }
Rule 16    argument_expression_list -> assignment_expression
Rule 17    argument_expression_list -> argument_expression_list , assignment_expression
Rule 18    unary_expression -> postfix_expression
Rule 19    unary_expression -> INC_DEC unary_expression
Rule 20    unary_expression -> unary_operator cast_expression
Rule 21    unary_expression -> SIZEOF unary_expression
Rule 22    unary_expression -> SIZEOF ( type_name )
Rule 23    unary_operator -> &
Rule 24    unary_operator -> *
Rule 25    unary_operator -> +
Rule 26    unary_operator -> -
Rule 27    unary_operator -> ~
Rule 28    unary_operator -> !
Rule 29    cast_expression -> unary_expression
Rule 30    cast_expression -> ( type_name ) cast_expression
Rule 31    multiplicative_expression -> cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 33    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 35    additive_expression -> multiplicative_expression
Rule 36    additive_expression -> additive_expression + multiplicative_expression
Rule 37    additive_expression -> additive_expression - multiplicative_expression
Rule 38    shift_expression -> additive_expression
Rule 39    shift_expression -> shift_expression SHIFT_OP additive_expression
Rule 40    relational_expression -> shift_expression
Rule 41    relational_expression -> relational_expression < shift_expression
Rule 42    relational_expression -> relational_expression > shift_expression
Rule 43    relational_expression -> relational_expression GE_LE shift_expression
Rule 44    equality_expression -> relational_expression
Rule 45    equality_expression -> equality_expression EQ_NE relational_expression
Rule 46    and_expression -> equality_expression
Rule 47    and_expression -> and_expression & equality_expression
Rule 48    exclusive_or_expression -> and_expression
Rule 49    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 50    inclusive_or_expression -> exclusive_or_expression
Rule 51    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 52    logical_and_expression -> inclusive_or_expression
Rule 53    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 54    logical_or_expression -> logical_and_expression
Rule 55    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 56    conditional_expression -> logical_or_expression
Rule 57    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 58    constant_expression -> conditional_expression
Rule 59    assignment_operator -> =
Rule 60    assignment_operator -> ASSIGN_OP
Rule 61    declaration -> declaration_specifiers ;
Rule 62    declaration -> declaration_specifiers init_declarator_list ;
Rule 63    declaration_specifiers -> storage_class_specifier
Rule 64    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 65    declaration_specifiers -> type_specifier
Rule 66    declaration_specifiers -> type_specifier declaration_specifiers
Rule 67    declaration_specifiers -> type_qualifier
Rule 68    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 69    declaration_specifiers -> function_specifier
Rule 70    declaration_specifiers -> function_specifier declaration_specifiers
Rule 71    init_declarator_list -> init_declarator
Rule 72    init_declarator_list -> init_declarator_list , init_declarator
Rule 73    init_declarator -> declarator
Rule 74    init_declarator -> declarator = initializer
Rule 75    storage_class_specifier -> TYPEDEF
Rule 76    storage_class_specifier -> EXTERN
Rule 77    storage_class_specifier -> STATIC
Rule 78    storage_class_specifier -> AUTO
Rule 79    storage_class_specifier -> REGISTER
Rule 80    type_specifier -> VOID
Rule 81    type_specifier -> CHAR
Rule 82    type_specifier -> SHORT
Rule 83    type_specifier -> INT
Rule 84    type_specifier -> LONG
Rule 85    type_specifier -> FLOAT
Rule 86    type_specifier -> DOUBLE
Rule 87    type_specifier -> SIGNED
Rule 88    type_specifier -> UNSIGNED
Rule 89    type_specifier -> BOOL
Rule 90    type_specifier -> struct_or_union_specifier
Rule 91    type_specifier -> enum_specifier
Rule 92    struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }
Rule 93    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 94    struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 95    struct_or_union -> STRUCT
Rule 96    struct_or_union -> UNION
Rule 97    struct_declaration_list -> struct_declaration
Rule 98    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 99    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 100   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 101   specifier_qualifier_list -> type_specifier
Rule 102   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 103   specifier_qualifier_list -> type_qualifier
Rule 104   struct_declarator_list -> struct_declarator
Rule 105   struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 106   struct_declarator -> declarator
Rule 107   struct_declarator -> : constant_expression
Rule 108   struct_declarator -> declarator : constant_expression
Rule 109   enum_specifier -> ENUM { enumerator_list }
Rule 110   enum_specifier -> ENUM IDENTIFIER { enumerator_list }
Rule 111   enum_specifier -> ENUM { enumerator_list , }
Rule 112   enum_specifier -> ENUM IDENTIFIER { enumerator_list , }
Rule 113   enum_specifier -> ENUM IDENTIFIER
Rule 114   enumerator_list -> enumerator
Rule 115   enumerator_list -> enumerator_list , enumerator
Rule 116   enumerator -> IDENTIFIER
Rule 117   enumerator -> IDENTIFIER = constant_expression
Rule 118   type_qualifier -> CONST
Rule 119   type_qualifier -> RESTRICT
Rule 120   type_qualifier -> VOLATILE
Rule 121   function_specifier -> INLINE
Rule 122   declarator -> pointer direct_declarator
Rule 123   declarator -> direct_declarator
Rule 124   direct_declarator -> IDENTIFIER
Rule 125   direct_declarator -> ( declarator )
Rule 126   direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]
Rule 127   direct_declarator -> direct_declarator [ type_qualifier_list ]
Rule 128   direct_declarator -> direct_declarator [ assignment_expression ]
Rule 129   direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]
Rule 130   direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]
Rule 131   direct_declarator -> direct_declarator [ type_qualifier_list * ]
Rule 132   direct_declarator -> direct_declarator [ * ]
Rule 133   direct_declarator -> direct_declarator [ ]
Rule 134   direct_declarator -> direct_declarator ( parameter_type_list )
Rule 135   direct_declarator -> direct_declarator ( identifier_list )
Rule 136   direct_declarator -> direct_declarator ( )
Rule 137   pointer -> *
Rule 138   pointer -> * type_qualifier_list
Rule 139   pointer -> * pointer
Rule 140   pointer -> * type_qualifier_list pointer
Rule 141   type_qualifier_list -> type_qualifier
Rule 142   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 143   parameter_type_list -> parameter_list
Rule 144   parameter_type_list -> parameter_list , ELLIPSIS
Rule 145   parameter_list -> parameter_declaration
Rule 146   parameter_list -> parameter_list , parameter_declaration
Rule 147   parameter_declaration -> declaration_specifiers declarator
Rule 148   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 149   parameter_declaration -> declaration_specifiers
Rule 150   identifier_list -> IDENTIFIER
Rule 151   identifier_list -> identifier_list , IDENTIFIER
Rule 152   type_name -> specifier_qualifier_list
Rule 153   type_name -> specifier_qualifier_list abstract_declarator
Rule 154   abstract_declarator -> pointer
Rule 155   abstract_declarator -> direct_abstract_declarator
Rule 156   abstract_declarator -> pointer direct_abstract_declarator
Rule 157   direct_abstract_declarator -> ( abstract_declarator )
Rule 158   direct_abstract_declarator -> [ ]
Rule 159   direct_abstract_declarator -> [ assignment_expression ]
Rule 160   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 161   direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]
Rule 162   direct_abstract_declarator -> [ * ]
Rule 163   direct_abstract_declarator -> direct_abstract_declarator [ * ]
Rule 164   direct_abstract_declarator -> ( )
Rule 165   direct_abstract_declarator -> ( parameter_type_list )
Rule 166   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 167   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 168   initializer -> assignment_expression
Rule 169   initializer -> { initializer_list }
Rule 170   initializer -> { initializer_list , }
Rule 171   initializer_list -> initializer
Rule 172   initializer_list -> designation initializer
Rule 173   initializer_list -> initializer_list , initializer
Rule 174   initializer_list -> initializer_list , designation initializer
Rule 175   designation -> designator_list =
Rule 176   designator_list -> designator
Rule 177   designator_list -> designator_list designator
Rule 178   designator -> [ constant_expression ]
Rule 179   designator -> . IDENTIFIER
Rule 180   statement -> labeled_statement
Rule 181   statement -> compound_statement
Rule 182   statement -> expression_statement
Rule 183   statement -> selection_statement
Rule 184   statement -> iteration_statement
Rule 185   statement -> jump_statement
Rule 186   labeled_statement -> IDENTIFIER : statement
Rule 187   labeled_statement -> CASE constant_expression : statement
Rule 188   labeled_statement -> DEFAULT : statement
Rule 189   compound_statement -> { }
Rule 190   compound_statement -> { block_item_list }
Rule 191   block_item_list -> block_item
Rule 192   block_item_list -> block_item_list block_item
Rule 193   block_item -> declaration
Rule 194   block_item -> statement
Rule 195   expression_statement -> ;
Rule 196   expression_statement -> expression ;
Rule 197   selection_statement -> IF ( expression ) statement ELSE statement
Rule 198   selection_statement -> IF ( expression ) statement
Rule 199   selection_statement -> SWITCH ( expression ) statement
Rule 200   iteration_statement -> WHILE ( expression ) statement
Rule 201   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 202   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 203   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 204   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 205   iteration_statement -> FOR ( declaration expression_statement expression ) statement
Rule 206   jump_statement -> GOTO IDENTIFIER ;
Rule 207   jump_statement -> CONTINUE ;
Rule 208   jump_statement -> BREAK ;
Rule 209   jump_statement -> RETURN ;
Rule 210   jump_statement -> RETURN expression ;
Rule 211   external_declaration -> function_definition
Rule 212   external_declaration -> declaration
Rule 213   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 214   function_definition -> declaration_specifiers declarator compound_statement
Rule 215   declaration_list -> declaration
Rule 216   declaration_list -> declaration_list declaration
Rule 217   expression -> assignment_expression
Rule 218   expression -> expression , assignment_expression
Rule 219   assignment_expression -> conditional_expression
Rule 220   assignment_expression -> unary_expression assignment_operator assignment_expression

Terminals, with rules where they appear

!                    : 28
%                    : 34
&                    : 23 47
(                    : 6 9 10 14 15 22 30 125 134 135 136 157 164 165 166 167 197 198 199 200 201 202 203 204 205
)                    : 6 9 10 14 15 22 30 125 134 135 136 157 164 165 166 167 197 198 199 200 201 202 203 204 205
*                    : 24 32 131 132 137 138 139 140 162 163
+                    : 25 36
,                    : 15 17 72 105 111 112 115 144 146 151 170 173 174 218
-                    : 26 37
.                    : 11 179
/                    : 33
:                    : 57 107 108 186 187 188
;                    : 61 62 99 195 196 201 206 207 208 209 210
<                    : 41
=                    : 59 74 117 175
>                    : 42
?                    : 57
AND_OP               : 53
ASSIGN_OP            : 60
AUTO                 : 78
BOOL                 : 89
BREAK                : 208
CASE                 : 187
CHAR                 : 81
CONST                : 118
CONSTANT             : 4
CONTINUE             : 207
DEFAULT              : 188
DO                   : 201
DOUBLE               : 86
ELLIPSIS             : 144
ELSE                 : 197
ENUM                 : 109 110 111 112 113
EQ_NE                : 45
EXTERN               : 76
FLOAT                : 85
FOR                  : 202 203 204 205
GE_LE                : 43
GOTO                 : 206
IDENTIFIER           : 3 11 12 92 94 110 112 113 116 117 124 150 151 179 186 206
IF                   : 197 198
INC_DEC              : 13 19
INLINE               : 121
INT                  : 83
LONG                 : 84
OR_OP                : 55
PTR_OP               : 12
REGISTER             : 79
RESTRICT             : 119
RETURN               : 209 210
SHIFT_OP             : 39
SHORT                : 82
SIGNED               : 87
SIZEOF               : 21 22
STATIC               : 77 129 130
STRING_LITERAL       : 5
STRUCT               : 95
SWITCH               : 199
TYPEDEF              : 75
UNION                : 96
UNSIGNED             : 88
VOID                 : 80
VOLATILE             : 120
WHILE                : 200 201
[                    : 8 126 127 128 129 130 131 132 133 158 159 160 161 162 163 178
]                    : 8 126 127 128 129 130 131 132 133 158 159 160 161 162 163 178
^                    : 49
error                : 
{                    : 14 15 92 93 109 110 111 112 169 170 189 190
|                    : 51
}                    : 14 15 92 93 109 110 111 112 169 170 189 190
~                    : 27

Nonterminals, with rules where they appear

abstract_declarator  : 148 153 157
additive_expression  : 36 37 38 39
and_expression       : 47 48 49
argument_expression_list : 10 17
assignment_expression : 16 17 126 128 129 130 159 161 168 217 218 220
assignment_operator  : 220
block_item           : 191 192
block_item_list      : 190 192
cast_expression      : 20 30 31 32 33 34
compound_statement   : 181 213 214
conditional_expression : 57 58 219
constant_expression  : 107 108 117 178 187
declaration          : 193 204 205 212 215 216
declaration_list     : 213 216
declaration_specifiers : 61 62 64 66 68 70 147 148 149 213 214
declarator           : 73 74 106 108 125 147 213 214
designation          : 172 174
designator           : 176 177
designator_list      : 175 177
direct_abstract_declarator : 155 156 160 161 163 166 167
direct_declarator    : 122 123 126 127 128 129 130 131 132 133 134 135 136
enum_specifier       : 91
enumerator           : 114 115
enumerator_list      : 109 110 111 112 115
equality_expression  : 45 46 47
exclusive_or_expression : 49 50 51
expression           : 6 8 57 196 197 198 199 200 201 203 205 210 218
expression_statement : 182 202 202 203 203 204 205
external_declaration : 1 2
function_definition  : 211
function_specifier   : 69 70
identifier_list      : 135 151
inclusive_or_expression : 51 52 53
init_declarator      : 71 72
init_declarator_list : 62 72
initializer          : 74 171 172 173 174
initializer_list     : 14 15 169 170 173 174
iteration_statement  : 184
jump_statement       : 185
labeled_statement    : 180
logical_and_expression : 53 54 55
logical_or_expression : 55 56 57
multiplicative_expression : 32 33 34 35 36 37
parameter_declaration : 145 146
parameter_list       : 143 144 146
parameter_type_list  : 134 165 167
pointer              : 122 139 140 154 156
postfix_expression   : 8 9 10 11 12 13 18
primary_expression   : 7
relational_expression : 41 42 43 44 45
selection_statement  : 183
shift_expression     : 39 40 41 42 43
specifier_qualifier_list : 99 100 102 152 153
statement            : 186 187 188 194 197 197 198 199 200 201 202 203 204 205
storage_class_specifier : 63 64
struct_declaration   : 97 98
struct_declaration_list : 92 93 98
struct_declarator    : 104 105
struct_declarator_list : 99 105
struct_or_union      : 92 93 94
struct_or_union_specifier : 90
translation_unit     : 2 0
type_name            : 14 15 22 30
type_qualifier       : 67 68 102 103 141 142
type_qualifier_list  : 126 127 129 130 131 138 140 142
type_specifier       : 65 66 100 101
unary_expression     : 19 21 29 220
unary_operator       : 20

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (211) external_declaration -> . function_definition
    (212) external_declaration -> . declaration
    (213) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (214) function_definition -> . declaration_specifiers declarator compound_statement
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (211) external_declaration -> . function_definition
    (212) external_declaration -> . declaration
    (213) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (214) function_definition -> . declaration_specifiers declarator compound_statement
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    external_declaration           shift and go to state 35
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 2

    (1) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (211) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 211 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 211 (external_declaration -> function_definition .)
    STATIC          reduce using rule 211 (external_declaration -> function_definition .)
    AUTO            reduce using rule 211 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 211 (external_declaration -> function_definition .)
    VOID            reduce using rule 211 (external_declaration -> function_definition .)
    CHAR            reduce using rule 211 (external_declaration -> function_definition .)
    SHORT           reduce using rule 211 (external_declaration -> function_definition .)
    INT             reduce using rule 211 (external_declaration -> function_definition .)
    LONG            reduce using rule 211 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 211 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 211 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 211 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 211 (external_declaration -> function_definition .)
    BOOL            reduce using rule 211 (external_declaration -> function_definition .)
    CONST           reduce using rule 211 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 211 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 211 (external_declaration -> function_definition .)
    INLINE          reduce using rule 211 (external_declaration -> function_definition .)
    ENUM            reduce using rule 211 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 211 (external_declaration -> function_definition .)
    UNION           reduce using rule 211 (external_declaration -> function_definition .)
    $end            reduce using rule 211 (external_declaration -> function_definition .)


state 4

    (212) external_declaration -> declaration .

    TYPEDEF         reduce using rule 212 (external_declaration -> declaration .)
    EXTERN          reduce using rule 212 (external_declaration -> declaration .)
    STATIC          reduce using rule 212 (external_declaration -> declaration .)
    AUTO            reduce using rule 212 (external_declaration -> declaration .)
    REGISTER        reduce using rule 212 (external_declaration -> declaration .)
    VOID            reduce using rule 212 (external_declaration -> declaration .)
    CHAR            reduce using rule 212 (external_declaration -> declaration .)
    SHORT           reduce using rule 212 (external_declaration -> declaration .)
    INT             reduce using rule 212 (external_declaration -> declaration .)
    LONG            reduce using rule 212 (external_declaration -> declaration .)
    FLOAT           reduce using rule 212 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 212 (external_declaration -> declaration .)
    SIGNED          reduce using rule 212 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 212 (external_declaration -> declaration .)
    BOOL            reduce using rule 212 (external_declaration -> declaration .)
    CONST           reduce using rule 212 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 212 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 212 (external_declaration -> declaration .)
    INLINE          reduce using rule 212 (external_declaration -> declaration .)
    ENUM            reduce using rule 212 (external_declaration -> declaration .)
    STRUCT          reduce using rule 212 (external_declaration -> declaration .)
    UNION           reduce using rule 212 (external_declaration -> declaration .)
    $end            reduce using rule 212 (external_declaration -> declaration .)


state 5

    (213) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (214) function_definition -> declaration_specifiers . declarator compound_statement
    (61) declaration -> declaration_specifiers . ;
    (62) declaration -> declaration_specifiers . init_declarator_list ;
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (71) init_declarator_list -> . init_declarator
    (72) init_declarator_list -> . init_declarator_list , init_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )
    (73) init_declarator -> . declarator
    (74) init_declarator -> . declarator = initializer

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 36
    init_declarator_list           shift and go to state 38
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40
    init_declarator                shift and go to state 41

state 6

    (63) declaration_specifiers -> storage_class_specifier .
    (64) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ;               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    *               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    (               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    ,               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    )               reduce using rule 63 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    storage_class_specifier        shift and go to state 6
    declaration_specifiers         shift and go to state 45
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 7

    (65) declaration_specifiers -> type_specifier .
    (66) declaration_specifiers -> type_specifier . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ;               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 65 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 65 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 46
    storage_class_specifier        shift and go to state 6
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 8

    (67) declaration_specifiers -> type_qualifier .
    (68) declaration_specifiers -> type_qualifier . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ;               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    *               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    (               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    ,               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    )               reduce using rule 67 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 9

    (69) declaration_specifiers -> function_specifier .
    (70) declaration_specifiers -> function_specifier . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ;               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    *               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 69 (declaration_specifiers -> function_specifier .)
    (               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    [               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    ,               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    )               reduce using rule 69 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    function_specifier             shift and go to state 9
    declaration_specifiers         shift and go to state 48
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 10

    (75) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 75 (storage_class_specifier -> TYPEDEF .)


state 11

    (76) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 76 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 76 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 76 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 76 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 76 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 76 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 76 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 76 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 76 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 76 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 76 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 76 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 76 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 76 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 76 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 76 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 76 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 76 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 76 (storage_class_specifier -> EXTERN .)


state 12

    (77) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 77 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 77 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 77 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 77 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 77 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 77 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 77 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 77 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 77 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 77 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 77 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 77 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 77 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 77 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 77 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 77 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 77 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 77 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 77 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 77 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 77 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 77 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 77 (storage_class_specifier -> STATIC .)
    *               reduce using rule 77 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 77 (storage_class_specifier -> STATIC .)
    (               reduce using rule 77 (storage_class_specifier -> STATIC .)
    [               reduce using rule 77 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 77 (storage_class_specifier -> STATIC .)
    )               reduce using rule 77 (storage_class_specifier -> STATIC .)


state 13

    (78) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 78 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 78 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 78 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 78 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 78 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 78 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 78 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 78 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 78 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 78 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 78 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 78 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 78 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 78 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 78 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 78 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 78 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 78 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 78 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 78 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 78 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 78 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 78 (storage_class_specifier -> AUTO .)
    *               reduce using rule 78 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 78 (storage_class_specifier -> AUTO .)
    (               reduce using rule 78 (storage_class_specifier -> AUTO .)
    [               reduce using rule 78 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 78 (storage_class_specifier -> AUTO .)
    )               reduce using rule 78 (storage_class_specifier -> AUTO .)


state 14

    (79) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 79 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 79 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 79 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 79 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 79 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 79 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 79 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 79 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 79 (storage_class_specifier -> REGISTER .)


state 15

    (80) type_specifier -> VOID .

    TYPEDEF         reduce using rule 80 (type_specifier -> VOID .)
    EXTERN          reduce using rule 80 (type_specifier -> VOID .)
    STATIC          reduce using rule 80 (type_specifier -> VOID .)
    AUTO            reduce using rule 80 (type_specifier -> VOID .)
    REGISTER        reduce using rule 80 (type_specifier -> VOID .)
    VOID            reduce using rule 80 (type_specifier -> VOID .)
    CHAR            reduce using rule 80 (type_specifier -> VOID .)
    SHORT           reduce using rule 80 (type_specifier -> VOID .)
    INT             reduce using rule 80 (type_specifier -> VOID .)
    LONG            reduce using rule 80 (type_specifier -> VOID .)
    FLOAT           reduce using rule 80 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 80 (type_specifier -> VOID .)
    SIGNED          reduce using rule 80 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 80 (type_specifier -> VOID .)
    BOOL            reduce using rule 80 (type_specifier -> VOID .)
    CONST           reduce using rule 80 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 80 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 80 (type_specifier -> VOID .)
    INLINE          reduce using rule 80 (type_specifier -> VOID .)
    ENUM            reduce using rule 80 (type_specifier -> VOID .)
    STRUCT          reduce using rule 80 (type_specifier -> VOID .)
    UNION           reduce using rule 80 (type_specifier -> VOID .)
    ;               reduce using rule 80 (type_specifier -> VOID .)
    *               reduce using rule 80 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 80 (type_specifier -> VOID .)
    (               reduce using rule 80 (type_specifier -> VOID .)
    [               reduce using rule 80 (type_specifier -> VOID .)
    ,               reduce using rule 80 (type_specifier -> VOID .)
    )               reduce using rule 80 (type_specifier -> VOID .)
    :               reduce using rule 80 (type_specifier -> VOID .)


state 16

    (81) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 81 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 81 (type_specifier -> CHAR .)
    STATIC          reduce using rule 81 (type_specifier -> CHAR .)
    AUTO            reduce using rule 81 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 81 (type_specifier -> CHAR .)
    VOID            reduce using rule 81 (type_specifier -> CHAR .)
    CHAR            reduce using rule 81 (type_specifier -> CHAR .)
    SHORT           reduce using rule 81 (type_specifier -> CHAR .)
    INT             reduce using rule 81 (type_specifier -> CHAR .)
    LONG            reduce using rule 81 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 81 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 81 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 81 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 81 (type_specifier -> CHAR .)
    BOOL            reduce using rule 81 (type_specifier -> CHAR .)
    CONST           reduce using rule 81 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 81 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 81 (type_specifier -> CHAR .)
    INLINE          reduce using rule 81 (type_specifier -> CHAR .)
    ENUM            reduce using rule 81 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 81 (type_specifier -> CHAR .)
    UNION           reduce using rule 81 (type_specifier -> CHAR .)
    ;               reduce using rule 81 (type_specifier -> CHAR .)
    *               reduce using rule 81 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 81 (type_specifier -> CHAR .)
    (               reduce using rule 81 (type_specifier -> CHAR .)
    [               reduce using rule 81 (type_specifier -> CHAR .)
    ,               reduce using rule 81 (type_specifier -> CHAR .)
    )               reduce using rule 81 (type_specifier -> CHAR .)
    :               reduce using rule 81 (type_specifier -> CHAR .)


state 17

    (82) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 82 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 82 (type_specifier -> SHORT .)
    STATIC          reduce using rule 82 (type_specifier -> SHORT .)
    AUTO            reduce using rule 82 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 82 (type_specifier -> SHORT .)
    VOID            reduce using rule 82 (type_specifier -> SHORT .)
    CHAR            reduce using rule 82 (type_specifier -> SHORT .)
    SHORT           reduce using rule 82 (type_specifier -> SHORT .)
    INT             reduce using rule 82 (type_specifier -> SHORT .)
    LONG            reduce using rule 82 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 82 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 82 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 82 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 82 (type_specifier -> SHORT .)
    BOOL            reduce using rule 82 (type_specifier -> SHORT .)
    CONST           reduce using rule 82 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 82 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 82 (type_specifier -> SHORT .)
    INLINE          reduce using rule 82 (type_specifier -> SHORT .)
    ENUM            reduce using rule 82 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 82 (type_specifier -> SHORT .)
    UNION           reduce using rule 82 (type_specifier -> SHORT .)
    ;               reduce using rule 82 (type_specifier -> SHORT .)
    *               reduce using rule 82 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 82 (type_specifier -> SHORT .)
    (               reduce using rule 82 (type_specifier -> SHORT .)
    [               reduce using rule 82 (type_specifier -> SHORT .)
    ,               reduce using rule 82 (type_specifier -> SHORT .)
    )               reduce using rule 82 (type_specifier -> SHORT .)
    :               reduce using rule 82 (type_specifier -> SHORT .)


state 18

    (83) type_specifier -> INT .

    TYPEDEF         reduce using rule 83 (type_specifier -> INT .)
    EXTERN          reduce using rule 83 (type_specifier -> INT .)
    STATIC          reduce using rule 83 (type_specifier -> INT .)
    AUTO            reduce using rule 83 (type_specifier -> INT .)
    REGISTER        reduce using rule 83 (type_specifier -> INT .)
    VOID            reduce using rule 83 (type_specifier -> INT .)
    CHAR            reduce using rule 83 (type_specifier -> INT .)
    SHORT           reduce using rule 83 (type_specifier -> INT .)
    INT             reduce using rule 83 (type_specifier -> INT .)
    LONG            reduce using rule 83 (type_specifier -> INT .)
    FLOAT           reduce using rule 83 (type_specifier -> INT .)
    DOUBLE          reduce using rule 83 (type_specifier -> INT .)
    SIGNED          reduce using rule 83 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 83 (type_specifier -> INT .)
    BOOL            reduce using rule 83 (type_specifier -> INT .)
    CONST           reduce using rule 83 (type_specifier -> INT .)
    RESTRICT        reduce using rule 83 (type_specifier -> INT .)
    VOLATILE        reduce using rule 83 (type_specifier -> INT .)
    INLINE          reduce using rule 83 (type_specifier -> INT .)
    ENUM            reduce using rule 83 (type_specifier -> INT .)
    STRUCT          reduce using rule 83 (type_specifier -> INT .)
    UNION           reduce using rule 83 (type_specifier -> INT .)
    ;               reduce using rule 83 (type_specifier -> INT .)
    *               reduce using rule 83 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 83 (type_specifier -> INT .)
    (               reduce using rule 83 (type_specifier -> INT .)
    [               reduce using rule 83 (type_specifier -> INT .)
    ,               reduce using rule 83 (type_specifier -> INT .)
    )               reduce using rule 83 (type_specifier -> INT .)
    :               reduce using rule 83 (type_specifier -> INT .)


state 19

    (84) type_specifier -> LONG .

    TYPEDEF         reduce using rule 84 (type_specifier -> LONG .)
    EXTERN          reduce using rule 84 (type_specifier -> LONG .)
    STATIC          reduce using rule 84 (type_specifier -> LONG .)
    AUTO            reduce using rule 84 (type_specifier -> LONG .)
    REGISTER        reduce using rule 84 (type_specifier -> LONG .)
    VOID            reduce using rule 84 (type_specifier -> LONG .)
    CHAR            reduce using rule 84 (type_specifier -> LONG .)
    SHORT           reduce using rule 84 (type_specifier -> LONG .)
    INT             reduce using rule 84 (type_specifier -> LONG .)
    LONG            reduce using rule 84 (type_specifier -> LONG .)
    FLOAT           reduce using rule 84 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 84 (type_specifier -> LONG .)
    SIGNED          reduce using rule 84 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 84 (type_specifier -> LONG .)
    BOOL            reduce using rule 84 (type_specifier -> LONG .)
    CONST           reduce using rule 84 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 84 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 84 (type_specifier -> LONG .)
    INLINE          reduce using rule 84 (type_specifier -> LONG .)
    ENUM            reduce using rule 84 (type_specifier -> LONG .)
    STRUCT          reduce using rule 84 (type_specifier -> LONG .)
    UNION           reduce using rule 84 (type_specifier -> LONG .)
    ;               reduce using rule 84 (type_specifier -> LONG .)
    *               reduce using rule 84 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 84 (type_specifier -> LONG .)
    (               reduce using rule 84 (type_specifier -> LONG .)
    [               reduce using rule 84 (type_specifier -> LONG .)
    ,               reduce using rule 84 (type_specifier -> LONG .)
    )               reduce using rule 84 (type_specifier -> LONG .)
    :               reduce using rule 84 (type_specifier -> LONG .)


state 20

    (85) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 85 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 85 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 85 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 85 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 85 (type_specifier -> FLOAT .)
    VOID            reduce using rule 85 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 85 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 85 (type_specifier -> FLOAT .)
    INT             reduce using rule 85 (type_specifier -> FLOAT .)
    LONG            reduce using rule 85 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 85 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 85 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 85 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 85 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 85 (type_specifier -> FLOAT .)
    CONST           reduce using rule 85 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 85 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 85 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 85 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 85 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 85 (type_specifier -> FLOAT .)
    UNION           reduce using rule 85 (type_specifier -> FLOAT .)
    ;               reduce using rule 85 (type_specifier -> FLOAT .)
    *               reduce using rule 85 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 85 (type_specifier -> FLOAT .)
    (               reduce using rule 85 (type_specifier -> FLOAT .)
    [               reduce using rule 85 (type_specifier -> FLOAT .)
    ,               reduce using rule 85 (type_specifier -> FLOAT .)
    )               reduce using rule 85 (type_specifier -> FLOAT .)
    :               reduce using rule 85 (type_specifier -> FLOAT .)


state 21

    (86) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 86 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 86 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 86 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 86 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 86 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 86 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 86 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 86 (type_specifier -> DOUBLE .)
    INT             reduce using rule 86 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 86 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 86 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 86 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 86 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 86 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 86 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 86 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 86 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 86 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 86 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 86 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 86 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 86 (type_specifier -> DOUBLE .)
    ;               reduce using rule 86 (type_specifier -> DOUBLE .)
    *               reduce using rule 86 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 86 (type_specifier -> DOUBLE .)
    (               reduce using rule 86 (type_specifier -> DOUBLE .)
    [               reduce using rule 86 (type_specifier -> DOUBLE .)
    ,               reduce using rule 86 (type_specifier -> DOUBLE .)
    )               reduce using rule 86 (type_specifier -> DOUBLE .)
    :               reduce using rule 86 (type_specifier -> DOUBLE .)


state 22

    (87) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 87 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 87 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 87 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 87 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 87 (type_specifier -> SIGNED .)
    VOID            reduce using rule 87 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 87 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 87 (type_specifier -> SIGNED .)
    INT             reduce using rule 87 (type_specifier -> SIGNED .)
    LONG            reduce using rule 87 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 87 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 87 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 87 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 87 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 87 (type_specifier -> SIGNED .)
    CONST           reduce using rule 87 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 87 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 87 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 87 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 87 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 87 (type_specifier -> SIGNED .)
    UNION           reduce using rule 87 (type_specifier -> SIGNED .)
    ;               reduce using rule 87 (type_specifier -> SIGNED .)
    *               reduce using rule 87 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 87 (type_specifier -> SIGNED .)
    (               reduce using rule 87 (type_specifier -> SIGNED .)
    [               reduce using rule 87 (type_specifier -> SIGNED .)
    ,               reduce using rule 87 (type_specifier -> SIGNED .)
    )               reduce using rule 87 (type_specifier -> SIGNED .)
    :               reduce using rule 87 (type_specifier -> SIGNED .)


state 23

    (88) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 88 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 88 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 88 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 88 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 88 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 88 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 88 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 88 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 88 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 88 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 88 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 88 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 88 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 88 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 88 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 88 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 88 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 88 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 88 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 88 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 88 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 88 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 88 (type_specifier -> UNSIGNED .)
    *               reduce using rule 88 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 88 (type_specifier -> UNSIGNED .)
    (               reduce using rule 88 (type_specifier -> UNSIGNED .)
    [               reduce using rule 88 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 88 (type_specifier -> UNSIGNED .)
    )               reduce using rule 88 (type_specifier -> UNSIGNED .)
    :               reduce using rule 88 (type_specifier -> UNSIGNED .)


state 24

    (89) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 89 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 89 (type_specifier -> BOOL .)
    STATIC          reduce using rule 89 (type_specifier -> BOOL .)
    AUTO            reduce using rule 89 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 89 (type_specifier -> BOOL .)
    VOID            reduce using rule 89 (type_specifier -> BOOL .)
    CHAR            reduce using rule 89 (type_specifier -> BOOL .)
    SHORT           reduce using rule 89 (type_specifier -> BOOL .)
    INT             reduce using rule 89 (type_specifier -> BOOL .)
    LONG            reduce using rule 89 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 89 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 89 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 89 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 89 (type_specifier -> BOOL .)
    BOOL            reduce using rule 89 (type_specifier -> BOOL .)
    CONST           reduce using rule 89 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 89 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 89 (type_specifier -> BOOL .)
    INLINE          reduce using rule 89 (type_specifier -> BOOL .)
    ENUM            reduce using rule 89 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 89 (type_specifier -> BOOL .)
    UNION           reduce using rule 89 (type_specifier -> BOOL .)
    ;               reduce using rule 89 (type_specifier -> BOOL .)
    *               reduce using rule 89 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 89 (type_specifier -> BOOL .)
    (               reduce using rule 89 (type_specifier -> BOOL .)
    [               reduce using rule 89 (type_specifier -> BOOL .)
    ,               reduce using rule 89 (type_specifier -> BOOL .)
    )               reduce using rule 89 (type_specifier -> BOOL .)
    :               reduce using rule 89 (type_specifier -> BOOL .)


state 25

    (90) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 90 (type_specifier -> struct_or_union_specifier .)


state 26

    (91) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 91 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 91 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 91 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 91 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 91 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 91 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 91 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 91 (type_specifier -> enum_specifier .)
    INT             reduce using rule 91 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 91 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 91 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 91 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 91 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 91 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 91 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 91 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 91 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 91 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 91 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 91 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 91 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 91 (type_specifier -> enum_specifier .)
    ;               reduce using rule 91 (type_specifier -> enum_specifier .)
    *               reduce using rule 91 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 91 (type_specifier -> enum_specifier .)
    (               reduce using rule 91 (type_specifier -> enum_specifier .)
    [               reduce using rule 91 (type_specifier -> enum_specifier .)
    ,               reduce using rule 91 (type_specifier -> enum_specifier .)
    )               reduce using rule 91 (type_specifier -> enum_specifier .)
    :               reduce using rule 91 (type_specifier -> enum_specifier .)


state 27

    (118) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 118 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 118 (type_qualifier -> CONST .)
    STATIC          reduce using rule 118 (type_qualifier -> CONST .)
    AUTO            reduce using rule 118 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 118 (type_qualifier -> CONST .)
    VOID            reduce using rule 118 (type_qualifier -> CONST .)
    CHAR            reduce using rule 118 (type_qualifier -> CONST .)
    SHORT           reduce using rule 118 (type_qualifier -> CONST .)
    INT             reduce using rule 118 (type_qualifier -> CONST .)
    LONG            reduce using rule 118 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 118 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 118 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 118 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 118 (type_qualifier -> CONST .)
    BOOL            reduce using rule 118 (type_qualifier -> CONST .)
    CONST           reduce using rule 118 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 118 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 118 (type_qualifier -> CONST .)
    INLINE          reduce using rule 118 (type_qualifier -> CONST .)
    ENUM            reduce using rule 118 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 118 (type_qualifier -> CONST .)
    UNION           reduce using rule 118 (type_qualifier -> CONST .)
    ;               reduce using rule 118 (type_qualifier -> CONST .)
    *               reduce using rule 118 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 118 (type_qualifier -> CONST .)
    (               reduce using rule 118 (type_qualifier -> CONST .)
    [               reduce using rule 118 (type_qualifier -> CONST .)
    ,               reduce using rule 118 (type_qualifier -> CONST .)
    )               reduce using rule 118 (type_qualifier -> CONST .)
    :               reduce using rule 118 (type_qualifier -> CONST .)
    ]               reduce using rule 118 (type_qualifier -> CONST .)
    INC_DEC         reduce using rule 118 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 118 (type_qualifier -> CONST .)
    &               reduce using rule 118 (type_qualifier -> CONST .)
    +               reduce using rule 118 (type_qualifier -> CONST .)
    -               reduce using rule 118 (type_qualifier -> CONST .)
    ~               reduce using rule 118 (type_qualifier -> CONST .)
    !               reduce using rule 118 (type_qualifier -> CONST .)
    CONSTANT        reduce using rule 118 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 118 (type_qualifier -> CONST .)


state 28

    (119) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 119 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 119 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 119 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 119 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 119 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 119 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 119 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 119 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 119 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 119 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 119 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 119 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 119 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 119 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 119 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 119 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 119 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 119 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 119 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 119 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 119 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 119 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 119 (type_qualifier -> RESTRICT .)
    *               reduce using rule 119 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 119 (type_qualifier -> RESTRICT .)
    (               reduce using rule 119 (type_qualifier -> RESTRICT .)
    [               reduce using rule 119 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 119 (type_qualifier -> RESTRICT .)
    )               reduce using rule 119 (type_qualifier -> RESTRICT .)
    :               reduce using rule 119 (type_qualifier -> RESTRICT .)
    ]               reduce using rule 119 (type_qualifier -> RESTRICT .)
    INC_DEC         reduce using rule 119 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 119 (type_qualifier -> RESTRICT .)
    &               reduce using rule 119 (type_qualifier -> RESTRICT .)
    +               reduce using rule 119 (type_qualifier -> RESTRICT .)
    -               reduce using rule 119 (type_qualifier -> RESTRICT .)
    ~               reduce using rule 119 (type_qualifier -> RESTRICT .)
    !               reduce using rule 119 (type_qualifier -> RESTRICT .)
    CONSTANT        reduce using rule 119 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 119 (type_qualifier -> RESTRICT .)


state 29

    (120) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 120 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 120 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 120 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 120 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 120 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 120 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 120 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 120 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 120 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 120 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 120 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 120 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 120 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 120 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 120 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 120 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 120 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 120 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 120 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 120 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 120 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 120 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 120 (type_qualifier -> VOLATILE .)
    *               reduce using rule 120 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 120 (type_qualifier -> VOLATILE .)
    (               reduce using rule 120 (type_qualifier -> VOLATILE .)
    [               reduce using rule 120 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 120 (type_qualifier -> VOLATILE .)
    )               reduce using rule 120 (type_qualifier -> VOLATILE .)
    :               reduce using rule 120 (type_qualifier -> VOLATILE .)
    ]               reduce using rule 120 (type_qualifier -> VOLATILE .)
    INC_DEC         reduce using rule 120 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 120 (type_qualifier -> VOLATILE .)
    &               reduce using rule 120 (type_qualifier -> VOLATILE .)
    +               reduce using rule 120 (type_qualifier -> VOLATILE .)
    -               reduce using rule 120 (type_qualifier -> VOLATILE .)
    ~               reduce using rule 120 (type_qualifier -> VOLATILE .)
    !               reduce using rule 120 (type_qualifier -> VOLATILE .)
    CONSTANT        reduce using rule 120 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 120 (type_qualifier -> VOLATILE .)


state 30

    (121) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 121 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 121 (function_specifier -> INLINE .)
    STATIC          reduce using rule 121 (function_specifier -> INLINE .)
    AUTO            reduce using rule 121 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 121 (function_specifier -> INLINE .)
    VOID            reduce using rule 121 (function_specifier -> INLINE .)
    CHAR            reduce using rule 121 (function_specifier -> INLINE .)
    SHORT           reduce using rule 121 (function_specifier -> INLINE .)
    INT             reduce using rule 121 (function_specifier -> INLINE .)
    LONG            reduce using rule 121 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 121 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 121 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 121 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 121 (function_specifier -> INLINE .)
    BOOL            reduce using rule 121 (function_specifier -> INLINE .)
    CONST           reduce using rule 121 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 121 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 121 (function_specifier -> INLINE .)
    INLINE          reduce using rule 121 (function_specifier -> INLINE .)
    ENUM            reduce using rule 121 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 121 (function_specifier -> INLINE .)
    UNION           reduce using rule 121 (function_specifier -> INLINE .)
    ;               reduce using rule 121 (function_specifier -> INLINE .)
    *               reduce using rule 121 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 121 (function_specifier -> INLINE .)
    (               reduce using rule 121 (function_specifier -> INLINE .)
    [               reduce using rule 121 (function_specifier -> INLINE .)
    ,               reduce using rule 121 (function_specifier -> INLINE .)
    )               reduce using rule 121 (function_specifier -> INLINE .)


state 31

    (92) struct_or_union_specifier -> struct_or_union . IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (94) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    {               shift and go to state 50


state 32

    (109) enum_specifier -> ENUM . { enumerator_list }
    (110) enum_specifier -> ENUM . IDENTIFIER { enumerator_list }
    (111) enum_specifier -> ENUM . { enumerator_list , }
    (112) enum_specifier -> ENUM . IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> ENUM . IDENTIFIER

    {               shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 33

    (95) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 95 (struct_or_union -> STRUCT .)
    {               reduce using rule 95 (struct_or_union -> STRUCT .)


state 34

    (96) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 96 (struct_or_union -> UNION .)
    {               reduce using rule 96 (struct_or_union -> UNION .)


state 35

    (2) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 36

    (213) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (214) function_definition -> declaration_specifiers declarator . compound_statement
    (73) init_declarator -> declarator .
    (74) init_declarator -> declarator . = initializer
    (215) declaration_list -> . declaration
    (216) declaration_list -> . declaration_list declaration
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ;               reduce using rule 73 (init_declarator -> declarator .)
    ,               reduce using rule 73 (init_declarator -> declarator .)
    =               shift and go to state 56
    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    declaration_list               shift and go to state 54
    compound_statement             shift and go to state 55
    declaration                    shift and go to state 57
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 37

    (61) declaration -> declaration_specifiers ; .

    TYPEDEF         reduce using rule 61 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 61 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    INLINE          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 61 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 61 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 61 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 61 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 61 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 61 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 61 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    INC_DEC         reduce using rule 61 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 61 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 61 (declaration -> declaration_specifiers ; .)
    CONSTANT        reduce using rule 61 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 61 (declaration -> declaration_specifiers ; .)


state 38

    (62) declaration -> declaration_specifiers init_declarator_list . ;
    (72) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 59
    ,               shift and go to state 60


state 39

    (122) declarator -> pointer . direct_declarator
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    direct_declarator              shift and go to state 61

state 40

    (123) declarator -> direct_declarator .
    (126) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (128) direct_declarator -> direct_declarator . [ assignment_expression ]
    (129) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (132) direct_declarator -> direct_declarator . [ * ]
    (133) direct_declarator -> direct_declarator . [ ]
    (134) direct_declarator -> direct_declarator . ( parameter_type_list )
    (135) direct_declarator -> direct_declarator . ( identifier_list )
    (136) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 123 (declarator -> direct_declarator .)
    {               reduce using rule 123 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 123 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 123 (declarator -> direct_declarator .)
    STATIC          reduce using rule 123 (declarator -> direct_declarator .)
    AUTO            reduce using rule 123 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 123 (declarator -> direct_declarator .)
    VOID            reduce using rule 123 (declarator -> direct_declarator .)
    CHAR            reduce using rule 123 (declarator -> direct_declarator .)
    SHORT           reduce using rule 123 (declarator -> direct_declarator .)
    INT             reduce using rule 123 (declarator -> direct_declarator .)
    LONG            reduce using rule 123 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 123 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 123 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 123 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 123 (declarator -> direct_declarator .)
    BOOL            reduce using rule 123 (declarator -> direct_declarator .)
    CONST           reduce using rule 123 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 123 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 123 (declarator -> direct_declarator .)
    INLINE          reduce using rule 123 (declarator -> direct_declarator .)
    ENUM            reduce using rule 123 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 123 (declarator -> direct_declarator .)
    UNION           reduce using rule 123 (declarator -> direct_declarator .)
    ;               reduce using rule 123 (declarator -> direct_declarator .)
    ,               reduce using rule 123 (declarator -> direct_declarator .)
    )               reduce using rule 123 (declarator -> direct_declarator .)
    :               reduce using rule 123 (declarator -> direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 41

    (71) init_declarator_list -> init_declarator .

    ;               reduce using rule 71 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 71 (init_declarator_list -> init_declarator .)


state 42

    (137) pointer -> * .
    (138) pointer -> * . type_qualifier_list
    (139) pointer -> * . pointer
    (140) pointer -> * . type_qualifier_list pointer
    (141) type_qualifier_list -> . type_qualifier
    (142) type_qualifier_list -> . type_qualifier_list type_qualifier
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 137 (pointer -> * .)
    (               reduce using rule 137 (pointer -> * .)
    [               reduce using rule 137 (pointer -> * .)
    ,               reduce using rule 137 (pointer -> * .)
    )               reduce using rule 137 (pointer -> * .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 64
    pointer                        shift and go to state 65
    type_qualifier                 shift and go to state 66

state 43

    (124) direct_declarator -> IDENTIFIER .

    [               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    (               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    =               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    {               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    ;               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    ,               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    )               reduce using rule 124 (direct_declarator -> IDENTIFIER .)
    :               reduce using rule 124 (direct_declarator -> IDENTIFIER .)


state 44

    (125) direct_declarator -> ( . declarator )
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 67
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 45

    (64) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    ;               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    *               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    (               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ,               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    )               reduce using rule 64 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 46

    (66) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 66 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 47

    (68) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 68 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 48

    (70) declaration_specifiers -> function_specifier declaration_specifiers .

    ;               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    *               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    (               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    [               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    ,               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)
    )               reduce using rule 70 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 49

    (92) struct_or_union_specifier -> struct_or_union IDENTIFIER . { struct_declaration_list }
    (94) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    {               shift and go to state 68
    TYPEDEF         reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    *               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    (               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    [               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    )               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    :               reduce using rule 94 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 50

    (93) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (99) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 69
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 51

    (109) enum_specifier -> ENUM { . enumerator_list }
    (111) enum_specifier -> ENUM { . enumerator_list , }
    (114) enumerator_list -> . enumerator
    (115) enumerator_list -> . enumerator_list , enumerator
    (116) enumerator -> . IDENTIFIER
    (117) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 74
    enumerator                     shift and go to state 75

state 52

    (110) enum_specifier -> ENUM IDENTIFIER . { enumerator_list }
    (112) enum_specifier -> ENUM IDENTIFIER . { enumerator_list , }
    (113) enum_specifier -> ENUM IDENTIFIER .

    {               shift and go to state 77
    TYPEDEF         reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    ;               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    *               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    (               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    [               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    ,               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    )               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)
    :               reduce using rule 113 (enum_specifier -> ENUM IDENTIFIER .)


state 53

    (61) declaration -> declaration_specifiers . ;
    (62) declaration -> declaration_specifiers . init_declarator_list ;
    (71) init_declarator_list -> . init_declarator
    (72) init_declarator_list -> . init_declarator_list , init_declarator
    (73) init_declarator -> . declarator
    (74) init_declarator -> . declarator = initializer
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator_list           shift and go to state 38
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 54

    (213) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (216) declaration_list -> declaration_list . declaration
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    compound_statement             shift and go to state 79
    declaration                    shift and go to state 80
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 55

    (214) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 214 (function_definition -> declaration_specifiers declarator compound_statement .)


state 56

    (74) init_declarator -> declarator = . initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 81
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 57

    (215) declaration_list -> declaration .

    {               reduce using rule 215 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 215 (declaration_list -> declaration .)
    EXTERN          reduce using rule 215 (declaration_list -> declaration .)
    STATIC          reduce using rule 215 (declaration_list -> declaration .)
    AUTO            reduce using rule 215 (declaration_list -> declaration .)
    REGISTER        reduce using rule 215 (declaration_list -> declaration .)
    VOID            reduce using rule 215 (declaration_list -> declaration .)
    CHAR            reduce using rule 215 (declaration_list -> declaration .)
    SHORT           reduce using rule 215 (declaration_list -> declaration .)
    INT             reduce using rule 215 (declaration_list -> declaration .)
    LONG            reduce using rule 215 (declaration_list -> declaration .)
    FLOAT           reduce using rule 215 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 215 (declaration_list -> declaration .)
    SIGNED          reduce using rule 215 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 215 (declaration_list -> declaration .)
    BOOL            reduce using rule 215 (declaration_list -> declaration .)
    CONST           reduce using rule 215 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 215 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 215 (declaration_list -> declaration .)
    INLINE          reduce using rule 215 (declaration_list -> declaration .)
    ENUM            reduce using rule 215 (declaration_list -> declaration .)
    STRUCT          reduce using rule 215 (declaration_list -> declaration .)
    UNION           reduce using rule 215 (declaration_list -> declaration .)


state 58

    (189) compound_statement -> { . }
    (190) compound_statement -> { . block_item_list }
    (191) block_item_list -> . block_item
    (192) block_item_list -> . block_item_list block_item
    (193) block_item -> . declaration
    (194) block_item -> . statement
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 112
    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    block_item_list                shift and go to state 113
    block_item                     shift and go to state 114
    declaration                    shift and go to state 115
    statement                      shift and go to state 116
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 127
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 137
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 59

    (62) declaration -> declaration_specifiers init_declarator_list ; .

    TYPEDEF         reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    INLINE          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_DEC         reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 62 (declaration -> declaration_specifiers init_declarator_list ; .)


state 60

    (72) init_declarator_list -> init_declarator_list , . init_declarator
    (73) init_declarator -> . declarator
    (74) init_declarator -> . declarator = initializer
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator                shift and go to state 138
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 61

    (122) declarator -> pointer direct_declarator .
    (126) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (128) direct_declarator -> direct_declarator . [ assignment_expression ]
    (129) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (132) direct_declarator -> direct_declarator . [ * ]
    (133) direct_declarator -> direct_declarator . [ ]
    (134) direct_declarator -> direct_declarator . ( parameter_type_list )
    (135) direct_declarator -> direct_declarator . ( identifier_list )
    (136) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 122 (declarator -> pointer direct_declarator .)
    {               reduce using rule 122 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 122 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 122 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 122 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 122 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 122 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 122 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 122 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 122 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 122 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 122 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 122 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 122 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 122 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 122 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 122 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 122 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 122 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 122 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 122 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 122 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 122 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 122 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 122 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 122 (declarator -> pointer direct_declarator .)
    )               reduce using rule 122 (declarator -> pointer direct_declarator .)
    :               reduce using rule 122 (declarator -> pointer direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 62

    (126) direct_declarator -> direct_declarator [ . type_qualifier_list assignment_expression ]
    (127) direct_declarator -> direct_declarator [ . type_qualifier_list ]
    (128) direct_declarator -> direct_declarator [ . assignment_expression ]
    (129) direct_declarator -> direct_declarator [ . STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> direct_declarator [ . type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> direct_declarator [ . type_qualifier_list * ]
    (132) direct_declarator -> direct_declarator [ . * ]
    (133) direct_declarator -> direct_declarator [ . ]
    (141) type_qualifier_list -> . type_qualifier
    (142) type_qualifier_list -> . type_qualifier_list type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    STATIC          shift and go to state 142
    *               shift and go to state 143
    ]               shift and go to state 141
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_qualifier_list            shift and go to state 139
    assignment_expression          shift and go to state 140
    type_qualifier                 shift and go to state 66
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 63

    (134) direct_declarator -> direct_declarator ( . parameter_type_list )
    (135) direct_declarator -> direct_declarator ( . identifier_list )
    (136) direct_declarator -> direct_declarator ( . )
    (143) parameter_type_list -> . parameter_list
    (144) parameter_type_list -> . parameter_list , ELLIPSIS
    (150) identifier_list -> . IDENTIFIER
    (151) identifier_list -> . identifier_list , IDENTIFIER
    (145) parameter_list -> . parameter_declaration
    (146) parameter_list -> . parameter_list , parameter_declaration
    (147) parameter_declaration -> . declaration_specifiers declarator
    (148) parameter_declaration -> . declaration_specifiers abstract_declarator
    (149) parameter_declaration -> . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    )               shift and go to state 145
    IDENTIFIER      shift and go to state 148
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 144
    identifier_list                shift and go to state 146
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 64

    (138) pointer -> * type_qualifier_list .
    (140) pointer -> * type_qualifier_list . pointer
    (142) type_qualifier_list -> type_qualifier_list . type_qualifier
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 138 (pointer -> * type_qualifier_list .)
    (               reduce using rule 138 (pointer -> * type_qualifier_list .)
    [               reduce using rule 138 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 138 (pointer -> * type_qualifier_list .)
    )               reduce using rule 138 (pointer -> * type_qualifier_list .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    pointer                        shift and go to state 151
    type_qualifier                 shift and go to state 152

state 65

    (139) pointer -> * pointer .

    IDENTIFIER      reduce using rule 139 (pointer -> * pointer .)
    (               reduce using rule 139 (pointer -> * pointer .)
    [               reduce using rule 139 (pointer -> * pointer .)
    ,               reduce using rule 139 (pointer -> * pointer .)
    )               reduce using rule 139 (pointer -> * pointer .)


state 66

    (141) type_qualifier_list -> type_qualifier .

    *               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    ]               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    INC_DEC         reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    &               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    +               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    -               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    ~               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    !               reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    CONSTANT        reduce using rule 141 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 141 (type_qualifier_list -> type_qualifier .)


state 67

    (125) direct_declarator -> ( declarator . )

    )               shift and go to state 153


state 68

    (92) struct_or_union_specifier -> struct_or_union IDENTIFIER { . struct_declaration_list }
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (99) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 154
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 69

    (93) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (99) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    }               shift and go to state 155
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 156
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 70

    (97) struct_declaration_list -> struct_declaration .

    }               reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 97 (struct_declaration_list -> struct_declaration .)


state 71

    (99) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (104) struct_declarator_list -> . struct_declarator
    (105) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (106) struct_declarator -> . declarator
    (107) struct_declarator -> . : constant_expression
    (108) struct_declarator -> . declarator : constant_expression
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 160
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator_list         shift and go to state 157
    struct_declarator              shift and go to state 158
    declarator                     shift and go to state 159
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 72

    (100) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (101) specifier_qualifier_list -> type_specifier .
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    :               reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 101 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 72
    specifier_qualifier_list       shift and go to state 161
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 73

    (102) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (103) specifier_qualifier_list -> type_qualifier .
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    :               reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 103 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 73
    specifier_qualifier_list       shift and go to state 162
    type_specifier                 shift and go to state 72
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 74

    (109) enum_specifier -> ENUM { enumerator_list . }
    (111) enum_specifier -> ENUM { enumerator_list . , }
    (115) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 163
    ,               shift and go to state 164


state 75

    (114) enumerator_list -> enumerator .

    }               reduce using rule 114 (enumerator_list -> enumerator .)
    ,               reduce using rule 114 (enumerator_list -> enumerator .)


state 76

    (116) enumerator -> IDENTIFIER .
    (117) enumerator -> IDENTIFIER . = constant_expression

    }               reduce using rule 116 (enumerator -> IDENTIFIER .)
    ,               reduce using rule 116 (enumerator -> IDENTIFIER .)
    =               shift and go to state 165


state 77

    (110) enum_specifier -> ENUM IDENTIFIER { . enumerator_list }
    (112) enum_specifier -> ENUM IDENTIFIER { . enumerator_list , }
    (114) enumerator_list -> . enumerator
    (115) enumerator_list -> . enumerator_list , enumerator
    (116) enumerator -> . IDENTIFIER
    (117) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 166
    enumerator                     shift and go to state 75

state 78

    (73) init_declarator -> declarator .
    (74) init_declarator -> declarator . = initializer

    ;               reduce using rule 73 (init_declarator -> declarator .)
    ,               reduce using rule 73 (init_declarator -> declarator .)
    =               shift and go to state 56


state 79

    (213) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 213 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 80

    (216) declaration_list -> declaration_list declaration .

    {               reduce using rule 216 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 216 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 216 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 216 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 216 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 216 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 216 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 216 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 216 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 216 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 216 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 216 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 216 (declaration_list -> declaration_list declaration .)


state 81

    (74) init_declarator -> declarator = initializer .

    ;               reduce using rule 74 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 74 (init_declarator -> declarator = initializer .)


state 82

    (168) initializer -> assignment_expression .

    ;               reduce using rule 168 (initializer -> assignment_expression .)
    ,               reduce using rule 168 (initializer -> assignment_expression .)
    }               reduce using rule 168 (initializer -> assignment_expression .)


state 83

    (169) initializer -> { . initializer_list }
    (170) initializer -> { . initializer_list , }
    (171) initializer_list -> . initializer
    (172) initializer_list -> . designation initializer
    (173) initializer_list -> . initializer_list , initializer
    (174) initializer_list -> . initializer_list , designation initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (175) designation -> . designator_list =
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (176) designator_list -> . designator
    (177) designator_list -> . designator_list designator
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (178) designator -> . [ constant_expression ]
    (179) designator -> . . IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer_list               shift and go to state 167
    initializer                    shift and go to state 168
    designation                    shift and go to state 169
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 84

    (219) assignment_expression -> conditional_expression .

    ;               reduce using rule 219 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 219 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 219 (assignment_expression -> conditional_expression .)
    }               reduce using rule 219 (assignment_expression -> conditional_expression .)
    )               reduce using rule 219 (assignment_expression -> conditional_expression .)
    :               reduce using rule 219 (assignment_expression -> conditional_expression .)


state 85

    (220) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (29) cast_expression -> unary_expression .
    (59) assignment_operator -> . =
    (60) assignment_operator -> . ASSIGN_OP

    *               reduce using rule 29 (cast_expression -> unary_expression .)
    /               reduce using rule 29 (cast_expression -> unary_expression .)
    %               reduce using rule 29 (cast_expression -> unary_expression .)
    +               reduce using rule 29 (cast_expression -> unary_expression .)
    -               reduce using rule 29 (cast_expression -> unary_expression .)
    SHIFT_OP        reduce using rule 29 (cast_expression -> unary_expression .)
    <               reduce using rule 29 (cast_expression -> unary_expression .)
    >               reduce using rule 29 (cast_expression -> unary_expression .)
    GE_LE           reduce using rule 29 (cast_expression -> unary_expression .)
    EQ_NE           reduce using rule 29 (cast_expression -> unary_expression .)
    &               reduce using rule 29 (cast_expression -> unary_expression .)
    ^               reduce using rule 29 (cast_expression -> unary_expression .)
    |               reduce using rule 29 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 29 (cast_expression -> unary_expression .)
    ?               reduce using rule 29 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    ;               reduce using rule 29 (cast_expression -> unary_expression .)
    ,               reduce using rule 29 (cast_expression -> unary_expression .)
    ]               reduce using rule 29 (cast_expression -> unary_expression .)
    }               reduce using rule 29 (cast_expression -> unary_expression .)
    )               reduce using rule 29 (cast_expression -> unary_expression .)
    :               reduce using rule 29 (cast_expression -> unary_expression .)
    =               shift and go to state 175
    ASSIGN_OP       shift and go to state 176

    assignment_operator            shift and go to state 174

state 86

    (56) conditional_expression -> logical_or_expression .
    (57) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (55) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 56 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 177
    OR_OP           shift and go to state 178


state 87

    (18) unary_expression -> postfix_expression .
    (8) postfix_expression -> postfix_expression . [ expression ]
    (9) postfix_expression -> postfix_expression . ( )
    (10) postfix_expression -> postfix_expression . ( argument_expression_list )
    (11) postfix_expression -> postfix_expression . . IDENTIFIER
    (12) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (13) postfix_expression -> postfix_expression . INC_DEC

    =               reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_OP       reduce using rule 18 (unary_expression -> postfix_expression .)
    *               reduce using rule 18 (unary_expression -> postfix_expression .)
    /               reduce using rule 18 (unary_expression -> postfix_expression .)
    %               reduce using rule 18 (unary_expression -> postfix_expression .)
    +               reduce using rule 18 (unary_expression -> postfix_expression .)
    -               reduce using rule 18 (unary_expression -> postfix_expression .)
    SHIFT_OP        reduce using rule 18 (unary_expression -> postfix_expression .)
    <               reduce using rule 18 (unary_expression -> postfix_expression .)
    >               reduce using rule 18 (unary_expression -> postfix_expression .)
    GE_LE           reduce using rule 18 (unary_expression -> postfix_expression .)
    EQ_NE           reduce using rule 18 (unary_expression -> postfix_expression .)
    &               reduce using rule 18 (unary_expression -> postfix_expression .)
    ^               reduce using rule 18 (unary_expression -> postfix_expression .)
    |               reduce using rule 18 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 18 (unary_expression -> postfix_expression .)
    ?               reduce using rule 18 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 18 (unary_expression -> postfix_expression .)
    ;               reduce using rule 18 (unary_expression -> postfix_expression .)
    ,               reduce using rule 18 (unary_expression -> postfix_expression .)
    ]               reduce using rule 18 (unary_expression -> postfix_expression .)
    }               reduce using rule 18 (unary_expression -> postfix_expression .)
    )               reduce using rule 18 (unary_expression -> postfix_expression .)
    :               reduce using rule 18 (unary_expression -> postfix_expression .)
    [               shift and go to state 179
    (               shift and go to state 180
    .               shift and go to state 181
    PTR_OP          shift and go to state 182
    INC_DEC         shift and go to state 183


state 88

    (19) unary_expression -> INC_DEC . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 185
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 184
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 89

    (20) unary_expression -> unary_operator . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    primary_expression             shift and go to state 94

state 90

    (31) multiplicative_expression -> cast_expression .

    *               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    SHIFT_OP        reduce using rule 31 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    GE_LE           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    EQ_NE           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 31 (multiplicative_expression -> cast_expression .)


state 91

    (21) unary_expression -> SIZEOF . unary_expression
    (22) unary_expression -> SIZEOF . ( type_name )
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 190
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 189
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 92

    (14) postfix_expression -> ( . type_name ) { initializer_list }
    (15) postfix_expression -> ( . type_name ) { initializer_list , }
    (6) primary_expression -> ( . expression )
    (30) cast_expression -> ( . type_name ) cast_expression
    (152) type_name -> . specifier_qualifier_list
    (153) type_name -> . specifier_qualifier_list abstract_declarator
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 191
    expression                     shift and go to state 192
    cast_expression                shift and go to state 90
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 93

    (54) logical_or_expression -> logical_and_expression .
    (53) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 54 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 194


state 94

    (7) postfix_expression -> primary_expression .

    [               reduce using rule 7 (postfix_expression -> primary_expression .)
    (               reduce using rule 7 (postfix_expression -> primary_expression .)
    .               reduce using rule 7 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    INC_DEC         reduce using rule 7 (postfix_expression -> primary_expression .)
    =               reduce using rule 7 (postfix_expression -> primary_expression .)
    ASSIGN_OP       reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    SHIFT_OP        reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    GE_LE           reduce using rule 7 (postfix_expression -> primary_expression .)
    EQ_NE           reduce using rule 7 (postfix_expression -> primary_expression .)
    &               reduce using rule 7 (postfix_expression -> primary_expression .)
    ^               reduce using rule 7 (postfix_expression -> primary_expression .)
    |               reduce using rule 7 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    ?               reduce using rule 7 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    ]               reduce using rule 7 (postfix_expression -> primary_expression .)
    }               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    :               reduce using rule 7 (postfix_expression -> primary_expression .)


state 95

    (3) primary_expression -> IDENTIFIER .

    [               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    INC_DEC         reduce using rule 3 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ASSIGN_OP       reduce using rule 3 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    SHIFT_OP        reduce using rule 3 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    GE_LE           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    EQ_NE           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    }               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 3 (primary_expression -> IDENTIFIER .)


state 96

    (23) unary_operator -> & .

    (               reduce using rule 23 (unary_operator -> & .)
    INC_DEC         reduce using rule 23 (unary_operator -> & .)
    SIZEOF          reduce using rule 23 (unary_operator -> & .)
    &               reduce using rule 23 (unary_operator -> & .)
    *               reduce using rule 23 (unary_operator -> & .)
    +               reduce using rule 23 (unary_operator -> & .)
    -               reduce using rule 23 (unary_operator -> & .)
    ~               reduce using rule 23 (unary_operator -> & .)
    !               reduce using rule 23 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 23 (unary_operator -> & .)
    CONSTANT        reduce using rule 23 (unary_operator -> & .)
    STRING_LITERAL  reduce using rule 23 (unary_operator -> & .)


state 97

    (24) unary_operator -> * .

    (               reduce using rule 24 (unary_operator -> * .)
    INC_DEC         reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 98

    (25) unary_operator -> + .

    (               reduce using rule 25 (unary_operator -> + .)
    INC_DEC         reduce using rule 25 (unary_operator -> + .)
    SIZEOF          reduce using rule 25 (unary_operator -> + .)
    &               reduce using rule 25 (unary_operator -> + .)
    *               reduce using rule 25 (unary_operator -> + .)
    +               reduce using rule 25 (unary_operator -> + .)
    -               reduce using rule 25 (unary_operator -> + .)
    ~               reduce using rule 25 (unary_operator -> + .)
    !               reduce using rule 25 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 25 (unary_operator -> + .)
    CONSTANT        reduce using rule 25 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> + .)


state 99

    (26) unary_operator -> - .

    (               reduce using rule 26 (unary_operator -> - .)
    INC_DEC         reduce using rule 26 (unary_operator -> - .)
    SIZEOF          reduce using rule 26 (unary_operator -> - .)
    &               reduce using rule 26 (unary_operator -> - .)
    *               reduce using rule 26 (unary_operator -> - .)
    +               reduce using rule 26 (unary_operator -> - .)
    -               reduce using rule 26 (unary_operator -> - .)
    ~               reduce using rule 26 (unary_operator -> - .)
    !               reduce using rule 26 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> - .)
    CONSTANT        reduce using rule 26 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> - .)


state 100

    (27) unary_operator -> ~ .

    (               reduce using rule 27 (unary_operator -> ~ .)
    INC_DEC         reduce using rule 27 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 27 (unary_operator -> ~ .)
    &               reduce using rule 27 (unary_operator -> ~ .)
    *               reduce using rule 27 (unary_operator -> ~ .)
    +               reduce using rule 27 (unary_operator -> ~ .)
    -               reduce using rule 27 (unary_operator -> ~ .)
    ~               reduce using rule 27 (unary_operator -> ~ .)
    !               reduce using rule 27 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> ~ .)
    CONSTANT        reduce using rule 27 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> ~ .)


state 101

    (28) unary_operator -> ! .

    (               reduce using rule 28 (unary_operator -> ! .)
    INC_DEC         reduce using rule 28 (unary_operator -> ! .)
    SIZEOF          reduce using rule 28 (unary_operator -> ! .)
    &               reduce using rule 28 (unary_operator -> ! .)
    *               reduce using rule 28 (unary_operator -> ! .)
    +               reduce using rule 28 (unary_operator -> ! .)
    -               reduce using rule 28 (unary_operator -> ! .)
    ~               reduce using rule 28 (unary_operator -> ! .)
    !               reduce using rule 28 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> ! .)
    CONSTANT        reduce using rule 28 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> ! .)


state 102

    (52) logical_and_expression -> inclusive_or_expression .
    (51) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 52 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 195


state 103

    (4) primary_expression -> CONSTANT .

    [               reduce using rule 4 (primary_expression -> CONSTANT .)
    (               reduce using rule 4 (primary_expression -> CONSTANT .)
    .               reduce using rule 4 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    INC_DEC         reduce using rule 4 (primary_expression -> CONSTANT .)
    =               reduce using rule 4 (primary_expression -> CONSTANT .)
    ASSIGN_OP       reduce using rule 4 (primary_expression -> CONSTANT .)
    *               reduce using rule 4 (primary_expression -> CONSTANT .)
    /               reduce using rule 4 (primary_expression -> CONSTANT .)
    %               reduce using rule 4 (primary_expression -> CONSTANT .)
    +               reduce using rule 4 (primary_expression -> CONSTANT .)
    -               reduce using rule 4 (primary_expression -> CONSTANT .)
    SHIFT_OP        reduce using rule 4 (primary_expression -> CONSTANT .)
    <               reduce using rule 4 (primary_expression -> CONSTANT .)
    >               reduce using rule 4 (primary_expression -> CONSTANT .)
    GE_LE           reduce using rule 4 (primary_expression -> CONSTANT .)
    EQ_NE           reduce using rule 4 (primary_expression -> CONSTANT .)
    &               reduce using rule 4 (primary_expression -> CONSTANT .)
    ^               reduce using rule 4 (primary_expression -> CONSTANT .)
    |               reduce using rule 4 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    ?               reduce using rule 4 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    ;               reduce using rule 4 (primary_expression -> CONSTANT .)
    ,               reduce using rule 4 (primary_expression -> CONSTANT .)
    ]               reduce using rule 4 (primary_expression -> CONSTANT .)
    }               reduce using rule 4 (primary_expression -> CONSTANT .)
    )               reduce using rule 4 (primary_expression -> CONSTANT .)
    :               reduce using rule 4 (primary_expression -> CONSTANT .)


state 104

    (5) primary_expression -> STRING_LITERAL .

    [               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    (               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    .               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    INC_DEC         reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    =               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ASSIGN_OP       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    *               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    SHIFT_OP        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    GE_LE           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    EQ_NE           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 5 (primary_expression -> STRING_LITERAL .)


state 105

    (50) inclusive_or_expression -> exclusive_or_expression .
    (49) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 50 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 196


state 106

    (48) exclusive_or_expression -> and_expression .
    (47) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 48 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 48 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 48 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 197


state 107

    (46) and_expression -> equality_expression .
    (45) equality_expression -> equality_expression . EQ_NE relational_expression

    &               reduce using rule 46 (and_expression -> equality_expression .)
    ^               reduce using rule 46 (and_expression -> equality_expression .)
    |               reduce using rule 46 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 46 (and_expression -> equality_expression .)
    ?               reduce using rule 46 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 46 (and_expression -> equality_expression .)
    ;               reduce using rule 46 (and_expression -> equality_expression .)
    ,               reduce using rule 46 (and_expression -> equality_expression .)
    ]               reduce using rule 46 (and_expression -> equality_expression .)
    }               reduce using rule 46 (and_expression -> equality_expression .)
    )               reduce using rule 46 (and_expression -> equality_expression .)
    :               reduce using rule 46 (and_expression -> equality_expression .)
    EQ_NE           shift and go to state 198


state 108

    (44) equality_expression -> relational_expression .
    (41) relational_expression -> relational_expression . < shift_expression
    (42) relational_expression -> relational_expression . > shift_expression
    (43) relational_expression -> relational_expression . GE_LE shift_expression

    EQ_NE           reduce using rule 44 (equality_expression -> relational_expression .)
    &               reduce using rule 44 (equality_expression -> relational_expression .)
    ^               reduce using rule 44 (equality_expression -> relational_expression .)
    |               reduce using rule 44 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 44 (equality_expression -> relational_expression .)
    ?               reduce using rule 44 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 44 (equality_expression -> relational_expression .)
    ;               reduce using rule 44 (equality_expression -> relational_expression .)
    ,               reduce using rule 44 (equality_expression -> relational_expression .)
    ]               reduce using rule 44 (equality_expression -> relational_expression .)
    }               reduce using rule 44 (equality_expression -> relational_expression .)
    )               reduce using rule 44 (equality_expression -> relational_expression .)
    :               reduce using rule 44 (equality_expression -> relational_expression .)
    <               shift and go to state 199
    >               shift and go to state 200
    GE_LE           shift and go to state 201


state 109

    (40) relational_expression -> shift_expression .
    (39) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 40 (relational_expression -> shift_expression .)
    >               reduce using rule 40 (relational_expression -> shift_expression .)
    GE_LE           reduce using rule 40 (relational_expression -> shift_expression .)
    EQ_NE           reduce using rule 40 (relational_expression -> shift_expression .)
    &               reduce using rule 40 (relational_expression -> shift_expression .)
    ^               reduce using rule 40 (relational_expression -> shift_expression .)
    |               reduce using rule 40 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 40 (relational_expression -> shift_expression .)
    ?               reduce using rule 40 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 40 (relational_expression -> shift_expression .)
    ;               reduce using rule 40 (relational_expression -> shift_expression .)
    ,               reduce using rule 40 (relational_expression -> shift_expression .)
    ]               reduce using rule 40 (relational_expression -> shift_expression .)
    }               reduce using rule 40 (relational_expression -> shift_expression .)
    )               reduce using rule 40 (relational_expression -> shift_expression .)
    :               reduce using rule 40 (relational_expression -> shift_expression .)
    SHIFT_OP        shift and go to state 202


state 110

    (38) shift_expression -> additive_expression .
    (36) additive_expression -> additive_expression . + multiplicative_expression
    (37) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_OP        reduce using rule 38 (shift_expression -> additive_expression .)
    <               reduce using rule 38 (shift_expression -> additive_expression .)
    >               reduce using rule 38 (shift_expression -> additive_expression .)
    GE_LE           reduce using rule 38 (shift_expression -> additive_expression .)
    EQ_NE           reduce using rule 38 (shift_expression -> additive_expression .)
    &               reduce using rule 38 (shift_expression -> additive_expression .)
    ^               reduce using rule 38 (shift_expression -> additive_expression .)
    |               reduce using rule 38 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 38 (shift_expression -> additive_expression .)
    ?               reduce using rule 38 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    ;               reduce using rule 38 (shift_expression -> additive_expression .)
    ,               reduce using rule 38 (shift_expression -> additive_expression .)
    ]               reduce using rule 38 (shift_expression -> additive_expression .)
    }               reduce using rule 38 (shift_expression -> additive_expression .)
    )               reduce using rule 38 (shift_expression -> additive_expression .)
    :               reduce using rule 38 (shift_expression -> additive_expression .)
    +               shift and go to state 203
    -               shift and go to state 204


state 111

    (35) additive_expression -> multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    SHIFT_OP        reduce using rule 35 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    GE_LE           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    EQ_NE           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 112

    (189) compound_statement -> { } .

    TYPEDEF         reduce using rule 189 (compound_statement -> { } .)
    EXTERN          reduce using rule 189 (compound_statement -> { } .)
    STATIC          reduce using rule 189 (compound_statement -> { } .)
    AUTO            reduce using rule 189 (compound_statement -> { } .)
    REGISTER        reduce using rule 189 (compound_statement -> { } .)
    VOID            reduce using rule 189 (compound_statement -> { } .)
    CHAR            reduce using rule 189 (compound_statement -> { } .)
    SHORT           reduce using rule 189 (compound_statement -> { } .)
    INT             reduce using rule 189 (compound_statement -> { } .)
    LONG            reduce using rule 189 (compound_statement -> { } .)
    FLOAT           reduce using rule 189 (compound_statement -> { } .)
    DOUBLE          reduce using rule 189 (compound_statement -> { } .)
    SIGNED          reduce using rule 189 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 189 (compound_statement -> { } .)
    BOOL            reduce using rule 189 (compound_statement -> { } .)
    CONST           reduce using rule 189 (compound_statement -> { } .)
    RESTRICT        reduce using rule 189 (compound_statement -> { } .)
    VOLATILE        reduce using rule 189 (compound_statement -> { } .)
    INLINE          reduce using rule 189 (compound_statement -> { } .)
    ENUM            reduce using rule 189 (compound_statement -> { } .)
    STRUCT          reduce using rule 189 (compound_statement -> { } .)
    UNION           reduce using rule 189 (compound_statement -> { } .)
    $end            reduce using rule 189 (compound_statement -> { } .)
    }               reduce using rule 189 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 189 (compound_statement -> { } .)
    CASE            reduce using rule 189 (compound_statement -> { } .)
    DEFAULT         reduce using rule 189 (compound_statement -> { } .)
    {               reduce using rule 189 (compound_statement -> { } .)
    ;               reduce using rule 189 (compound_statement -> { } .)
    IF              reduce using rule 189 (compound_statement -> { } .)
    SWITCH          reduce using rule 189 (compound_statement -> { } .)
    WHILE           reduce using rule 189 (compound_statement -> { } .)
    DO              reduce using rule 189 (compound_statement -> { } .)
    FOR             reduce using rule 189 (compound_statement -> { } .)
    GOTO            reduce using rule 189 (compound_statement -> { } .)
    CONTINUE        reduce using rule 189 (compound_statement -> { } .)
    BREAK           reduce using rule 189 (compound_statement -> { } .)
    RETURN          reduce using rule 189 (compound_statement -> { } .)
    INC_DEC         reduce using rule 189 (compound_statement -> { } .)
    SIZEOF          reduce using rule 189 (compound_statement -> { } .)
    (               reduce using rule 189 (compound_statement -> { } .)
    &               reduce using rule 189 (compound_statement -> { } .)
    *               reduce using rule 189 (compound_statement -> { } .)
    +               reduce using rule 189 (compound_statement -> { } .)
    -               reduce using rule 189 (compound_statement -> { } .)
    ~               reduce using rule 189 (compound_statement -> { } .)
    !               reduce using rule 189 (compound_statement -> { } .)
    CONSTANT        reduce using rule 189 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 189 (compound_statement -> { } .)
    ELSE            reduce using rule 189 (compound_statement -> { } .)


state 113

    (190) compound_statement -> { block_item_list . }
    (192) block_item_list -> block_item_list . block_item
    (193) block_item -> . declaration
    (194) block_item -> . statement
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 208
    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    block_item                     shift and go to state 209
    declaration                    shift and go to state 115
    statement                      shift and go to state 116
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 127
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 137
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 114

    (191) block_item_list -> block_item .

    }               reduce using rule 191 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 191 (block_item_list -> block_item .)
    CASE            reduce using rule 191 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 191 (block_item_list -> block_item .)
    {               reduce using rule 191 (block_item_list -> block_item .)
    ;               reduce using rule 191 (block_item_list -> block_item .)
    IF              reduce using rule 191 (block_item_list -> block_item .)
    SWITCH          reduce using rule 191 (block_item_list -> block_item .)
    WHILE           reduce using rule 191 (block_item_list -> block_item .)
    DO              reduce using rule 191 (block_item_list -> block_item .)
    FOR             reduce using rule 191 (block_item_list -> block_item .)
    GOTO            reduce using rule 191 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 191 (block_item_list -> block_item .)
    BREAK           reduce using rule 191 (block_item_list -> block_item .)
    RETURN          reduce using rule 191 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 191 (block_item_list -> block_item .)
    EXTERN          reduce using rule 191 (block_item_list -> block_item .)
    STATIC          reduce using rule 191 (block_item_list -> block_item .)
    AUTO            reduce using rule 191 (block_item_list -> block_item .)
    REGISTER        reduce using rule 191 (block_item_list -> block_item .)
    VOID            reduce using rule 191 (block_item_list -> block_item .)
    CHAR            reduce using rule 191 (block_item_list -> block_item .)
    SHORT           reduce using rule 191 (block_item_list -> block_item .)
    INT             reduce using rule 191 (block_item_list -> block_item .)
    LONG            reduce using rule 191 (block_item_list -> block_item .)
    FLOAT           reduce using rule 191 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 191 (block_item_list -> block_item .)
    SIGNED          reduce using rule 191 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 191 (block_item_list -> block_item .)
    BOOL            reduce using rule 191 (block_item_list -> block_item .)
    CONST           reduce using rule 191 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 191 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 191 (block_item_list -> block_item .)
    INLINE          reduce using rule 191 (block_item_list -> block_item .)
    ENUM            reduce using rule 191 (block_item_list -> block_item .)
    STRUCT          reduce using rule 191 (block_item_list -> block_item .)
    UNION           reduce using rule 191 (block_item_list -> block_item .)
    INC_DEC         reduce using rule 191 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 191 (block_item_list -> block_item .)
    (               reduce using rule 191 (block_item_list -> block_item .)
    &               reduce using rule 191 (block_item_list -> block_item .)
    *               reduce using rule 191 (block_item_list -> block_item .)
    +               reduce using rule 191 (block_item_list -> block_item .)
    -               reduce using rule 191 (block_item_list -> block_item .)
    ~               reduce using rule 191 (block_item_list -> block_item .)
    !               reduce using rule 191 (block_item_list -> block_item .)
    CONSTANT        reduce using rule 191 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 191 (block_item_list -> block_item .)


state 115

    (193) block_item -> declaration .

    }               reduce using rule 193 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 193 (block_item -> declaration .)
    CASE            reduce using rule 193 (block_item -> declaration .)
    DEFAULT         reduce using rule 193 (block_item -> declaration .)
    {               reduce using rule 193 (block_item -> declaration .)
    ;               reduce using rule 193 (block_item -> declaration .)
    IF              reduce using rule 193 (block_item -> declaration .)
    SWITCH          reduce using rule 193 (block_item -> declaration .)
    WHILE           reduce using rule 193 (block_item -> declaration .)
    DO              reduce using rule 193 (block_item -> declaration .)
    FOR             reduce using rule 193 (block_item -> declaration .)
    GOTO            reduce using rule 193 (block_item -> declaration .)
    CONTINUE        reduce using rule 193 (block_item -> declaration .)
    BREAK           reduce using rule 193 (block_item -> declaration .)
    RETURN          reduce using rule 193 (block_item -> declaration .)
    TYPEDEF         reduce using rule 193 (block_item -> declaration .)
    EXTERN          reduce using rule 193 (block_item -> declaration .)
    STATIC          reduce using rule 193 (block_item -> declaration .)
    AUTO            reduce using rule 193 (block_item -> declaration .)
    REGISTER        reduce using rule 193 (block_item -> declaration .)
    VOID            reduce using rule 193 (block_item -> declaration .)
    CHAR            reduce using rule 193 (block_item -> declaration .)
    SHORT           reduce using rule 193 (block_item -> declaration .)
    INT             reduce using rule 193 (block_item -> declaration .)
    LONG            reduce using rule 193 (block_item -> declaration .)
    FLOAT           reduce using rule 193 (block_item -> declaration .)
    DOUBLE          reduce using rule 193 (block_item -> declaration .)
    SIGNED          reduce using rule 193 (block_item -> declaration .)
    UNSIGNED        reduce using rule 193 (block_item -> declaration .)
    BOOL            reduce using rule 193 (block_item -> declaration .)
    CONST           reduce using rule 193 (block_item -> declaration .)
    RESTRICT        reduce using rule 193 (block_item -> declaration .)
    VOLATILE        reduce using rule 193 (block_item -> declaration .)
    INLINE          reduce using rule 193 (block_item -> declaration .)
    ENUM            reduce using rule 193 (block_item -> declaration .)
    STRUCT          reduce using rule 193 (block_item -> declaration .)
    UNION           reduce using rule 193 (block_item -> declaration .)
    INC_DEC         reduce using rule 193 (block_item -> declaration .)
    SIZEOF          reduce using rule 193 (block_item -> declaration .)
    (               reduce using rule 193 (block_item -> declaration .)
    &               reduce using rule 193 (block_item -> declaration .)
    *               reduce using rule 193 (block_item -> declaration .)
    +               reduce using rule 193 (block_item -> declaration .)
    -               reduce using rule 193 (block_item -> declaration .)
    ~               reduce using rule 193 (block_item -> declaration .)
    !               reduce using rule 193 (block_item -> declaration .)
    CONSTANT        reduce using rule 193 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 193 (block_item -> declaration .)


state 116

    (194) block_item -> statement .

    }               reduce using rule 194 (block_item -> statement .)
    IDENTIFIER      reduce using rule 194 (block_item -> statement .)
    CASE            reduce using rule 194 (block_item -> statement .)
    DEFAULT         reduce using rule 194 (block_item -> statement .)
    {               reduce using rule 194 (block_item -> statement .)
    ;               reduce using rule 194 (block_item -> statement .)
    IF              reduce using rule 194 (block_item -> statement .)
    SWITCH          reduce using rule 194 (block_item -> statement .)
    WHILE           reduce using rule 194 (block_item -> statement .)
    DO              reduce using rule 194 (block_item -> statement .)
    FOR             reduce using rule 194 (block_item -> statement .)
    GOTO            reduce using rule 194 (block_item -> statement .)
    CONTINUE        reduce using rule 194 (block_item -> statement .)
    BREAK           reduce using rule 194 (block_item -> statement .)
    RETURN          reduce using rule 194 (block_item -> statement .)
    TYPEDEF         reduce using rule 194 (block_item -> statement .)
    EXTERN          reduce using rule 194 (block_item -> statement .)
    STATIC          reduce using rule 194 (block_item -> statement .)
    AUTO            reduce using rule 194 (block_item -> statement .)
    REGISTER        reduce using rule 194 (block_item -> statement .)
    VOID            reduce using rule 194 (block_item -> statement .)
    CHAR            reduce using rule 194 (block_item -> statement .)
    SHORT           reduce using rule 194 (block_item -> statement .)
    INT             reduce using rule 194 (block_item -> statement .)
    LONG            reduce using rule 194 (block_item -> statement .)
    FLOAT           reduce using rule 194 (block_item -> statement .)
    DOUBLE          reduce using rule 194 (block_item -> statement .)
    SIGNED          reduce using rule 194 (block_item -> statement .)
    UNSIGNED        reduce using rule 194 (block_item -> statement .)
    BOOL            reduce using rule 194 (block_item -> statement .)
    CONST           reduce using rule 194 (block_item -> statement .)
    RESTRICT        reduce using rule 194 (block_item -> statement .)
    VOLATILE        reduce using rule 194 (block_item -> statement .)
    INLINE          reduce using rule 194 (block_item -> statement .)
    ENUM            reduce using rule 194 (block_item -> statement .)
    STRUCT          reduce using rule 194 (block_item -> statement .)
    UNION           reduce using rule 194 (block_item -> statement .)
    INC_DEC         reduce using rule 194 (block_item -> statement .)
    SIZEOF          reduce using rule 194 (block_item -> statement .)
    (               reduce using rule 194 (block_item -> statement .)
    &               reduce using rule 194 (block_item -> statement .)
    *               reduce using rule 194 (block_item -> statement .)
    +               reduce using rule 194 (block_item -> statement .)
    -               reduce using rule 194 (block_item -> statement .)
    ~               reduce using rule 194 (block_item -> statement .)
    !               reduce using rule 194 (block_item -> statement .)
    CONSTANT        reduce using rule 194 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 194 (block_item -> statement .)


state 117

    (195) expression_statement -> ; .

    }               reduce using rule 195 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 195 (expression_statement -> ; .)
    CASE            reduce using rule 195 (expression_statement -> ; .)
    DEFAULT         reduce using rule 195 (expression_statement -> ; .)
    {               reduce using rule 195 (expression_statement -> ; .)
    ;               reduce using rule 195 (expression_statement -> ; .)
    IF              reduce using rule 195 (expression_statement -> ; .)
    SWITCH          reduce using rule 195 (expression_statement -> ; .)
    WHILE           reduce using rule 195 (expression_statement -> ; .)
    DO              reduce using rule 195 (expression_statement -> ; .)
    FOR             reduce using rule 195 (expression_statement -> ; .)
    GOTO            reduce using rule 195 (expression_statement -> ; .)
    CONTINUE        reduce using rule 195 (expression_statement -> ; .)
    BREAK           reduce using rule 195 (expression_statement -> ; .)
    RETURN          reduce using rule 195 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 195 (expression_statement -> ; .)
    EXTERN          reduce using rule 195 (expression_statement -> ; .)
    STATIC          reduce using rule 195 (expression_statement -> ; .)
    AUTO            reduce using rule 195 (expression_statement -> ; .)
    REGISTER        reduce using rule 195 (expression_statement -> ; .)
    VOID            reduce using rule 195 (expression_statement -> ; .)
    CHAR            reduce using rule 195 (expression_statement -> ; .)
    SHORT           reduce using rule 195 (expression_statement -> ; .)
    INT             reduce using rule 195 (expression_statement -> ; .)
    LONG            reduce using rule 195 (expression_statement -> ; .)
    FLOAT           reduce using rule 195 (expression_statement -> ; .)
    DOUBLE          reduce using rule 195 (expression_statement -> ; .)
    SIGNED          reduce using rule 195 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 195 (expression_statement -> ; .)
    BOOL            reduce using rule 195 (expression_statement -> ; .)
    CONST           reduce using rule 195 (expression_statement -> ; .)
    RESTRICT        reduce using rule 195 (expression_statement -> ; .)
    VOLATILE        reduce using rule 195 (expression_statement -> ; .)
    INLINE          reduce using rule 195 (expression_statement -> ; .)
    ENUM            reduce using rule 195 (expression_statement -> ; .)
    STRUCT          reduce using rule 195 (expression_statement -> ; .)
    UNION           reduce using rule 195 (expression_statement -> ; .)
    INC_DEC         reduce using rule 195 (expression_statement -> ; .)
    SIZEOF          reduce using rule 195 (expression_statement -> ; .)
    (               reduce using rule 195 (expression_statement -> ; .)
    &               reduce using rule 195 (expression_statement -> ; .)
    *               reduce using rule 195 (expression_statement -> ; .)
    +               reduce using rule 195 (expression_statement -> ; .)
    -               reduce using rule 195 (expression_statement -> ; .)
    ~               reduce using rule 195 (expression_statement -> ; .)
    !               reduce using rule 195 (expression_statement -> ; .)
    CONSTANT        reduce using rule 195 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 195 (expression_statement -> ; .)
    ELSE            reduce using rule 195 (expression_statement -> ; .)
    )               reduce using rule 195 (expression_statement -> ; .)


state 118

    (180) statement -> labeled_statement .

    }               reduce using rule 180 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 180 (statement -> labeled_statement .)
    CASE            reduce using rule 180 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 180 (statement -> labeled_statement .)
    {               reduce using rule 180 (statement -> labeled_statement .)
    ;               reduce using rule 180 (statement -> labeled_statement .)
    IF              reduce using rule 180 (statement -> labeled_statement .)
    SWITCH          reduce using rule 180 (statement -> labeled_statement .)
    WHILE           reduce using rule 180 (statement -> labeled_statement .)
    DO              reduce using rule 180 (statement -> labeled_statement .)
    FOR             reduce using rule 180 (statement -> labeled_statement .)
    GOTO            reduce using rule 180 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 180 (statement -> labeled_statement .)
    BREAK           reduce using rule 180 (statement -> labeled_statement .)
    RETURN          reduce using rule 180 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 180 (statement -> labeled_statement .)
    EXTERN          reduce using rule 180 (statement -> labeled_statement .)
    STATIC          reduce using rule 180 (statement -> labeled_statement .)
    AUTO            reduce using rule 180 (statement -> labeled_statement .)
    REGISTER        reduce using rule 180 (statement -> labeled_statement .)
    VOID            reduce using rule 180 (statement -> labeled_statement .)
    CHAR            reduce using rule 180 (statement -> labeled_statement .)
    SHORT           reduce using rule 180 (statement -> labeled_statement .)
    INT             reduce using rule 180 (statement -> labeled_statement .)
    LONG            reduce using rule 180 (statement -> labeled_statement .)
    FLOAT           reduce using rule 180 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 180 (statement -> labeled_statement .)
    SIGNED          reduce using rule 180 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 180 (statement -> labeled_statement .)
    BOOL            reduce using rule 180 (statement -> labeled_statement .)
    CONST           reduce using rule 180 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 180 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 180 (statement -> labeled_statement .)
    INLINE          reduce using rule 180 (statement -> labeled_statement .)
    ENUM            reduce using rule 180 (statement -> labeled_statement .)
    STRUCT          reduce using rule 180 (statement -> labeled_statement .)
    UNION           reduce using rule 180 (statement -> labeled_statement .)
    INC_DEC         reduce using rule 180 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 180 (statement -> labeled_statement .)
    (               reduce using rule 180 (statement -> labeled_statement .)
    &               reduce using rule 180 (statement -> labeled_statement .)
    *               reduce using rule 180 (statement -> labeled_statement .)
    +               reduce using rule 180 (statement -> labeled_statement .)
    -               reduce using rule 180 (statement -> labeled_statement .)
    ~               reduce using rule 180 (statement -> labeled_statement .)
    !               reduce using rule 180 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 180 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 180 (statement -> labeled_statement .)
    ELSE            reduce using rule 180 (statement -> labeled_statement .)


state 119

    (181) statement -> compound_statement .

    }               reduce using rule 181 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 181 (statement -> compound_statement .)
    CASE            reduce using rule 181 (statement -> compound_statement .)
    DEFAULT         reduce using rule 181 (statement -> compound_statement .)
    {               reduce using rule 181 (statement -> compound_statement .)
    ;               reduce using rule 181 (statement -> compound_statement .)
    IF              reduce using rule 181 (statement -> compound_statement .)
    SWITCH          reduce using rule 181 (statement -> compound_statement .)
    WHILE           reduce using rule 181 (statement -> compound_statement .)
    DO              reduce using rule 181 (statement -> compound_statement .)
    FOR             reduce using rule 181 (statement -> compound_statement .)
    GOTO            reduce using rule 181 (statement -> compound_statement .)
    CONTINUE        reduce using rule 181 (statement -> compound_statement .)
    BREAK           reduce using rule 181 (statement -> compound_statement .)
    RETURN          reduce using rule 181 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 181 (statement -> compound_statement .)
    EXTERN          reduce using rule 181 (statement -> compound_statement .)
    STATIC          reduce using rule 181 (statement -> compound_statement .)
    AUTO            reduce using rule 181 (statement -> compound_statement .)
    REGISTER        reduce using rule 181 (statement -> compound_statement .)
    VOID            reduce using rule 181 (statement -> compound_statement .)
    CHAR            reduce using rule 181 (statement -> compound_statement .)
    SHORT           reduce using rule 181 (statement -> compound_statement .)
    INT             reduce using rule 181 (statement -> compound_statement .)
    LONG            reduce using rule 181 (statement -> compound_statement .)
    FLOAT           reduce using rule 181 (statement -> compound_statement .)
    DOUBLE          reduce using rule 181 (statement -> compound_statement .)
    SIGNED          reduce using rule 181 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 181 (statement -> compound_statement .)
    BOOL            reduce using rule 181 (statement -> compound_statement .)
    CONST           reduce using rule 181 (statement -> compound_statement .)
    RESTRICT        reduce using rule 181 (statement -> compound_statement .)
    VOLATILE        reduce using rule 181 (statement -> compound_statement .)
    INLINE          reduce using rule 181 (statement -> compound_statement .)
    ENUM            reduce using rule 181 (statement -> compound_statement .)
    STRUCT          reduce using rule 181 (statement -> compound_statement .)
    UNION           reduce using rule 181 (statement -> compound_statement .)
    INC_DEC         reduce using rule 181 (statement -> compound_statement .)
    SIZEOF          reduce using rule 181 (statement -> compound_statement .)
    (               reduce using rule 181 (statement -> compound_statement .)
    &               reduce using rule 181 (statement -> compound_statement .)
    *               reduce using rule 181 (statement -> compound_statement .)
    +               reduce using rule 181 (statement -> compound_statement .)
    -               reduce using rule 181 (statement -> compound_statement .)
    ~               reduce using rule 181 (statement -> compound_statement .)
    !               reduce using rule 181 (statement -> compound_statement .)
    CONSTANT        reduce using rule 181 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 181 (statement -> compound_statement .)
    ELSE            reduce using rule 181 (statement -> compound_statement .)


state 120

    (182) statement -> expression_statement .

    }               reduce using rule 182 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 182 (statement -> expression_statement .)
    CASE            reduce using rule 182 (statement -> expression_statement .)
    DEFAULT         reduce using rule 182 (statement -> expression_statement .)
    {               reduce using rule 182 (statement -> expression_statement .)
    ;               reduce using rule 182 (statement -> expression_statement .)
    IF              reduce using rule 182 (statement -> expression_statement .)
    SWITCH          reduce using rule 182 (statement -> expression_statement .)
    WHILE           reduce using rule 182 (statement -> expression_statement .)
    DO              reduce using rule 182 (statement -> expression_statement .)
    FOR             reduce using rule 182 (statement -> expression_statement .)
    GOTO            reduce using rule 182 (statement -> expression_statement .)
    CONTINUE        reduce using rule 182 (statement -> expression_statement .)
    BREAK           reduce using rule 182 (statement -> expression_statement .)
    RETURN          reduce using rule 182 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 182 (statement -> expression_statement .)
    EXTERN          reduce using rule 182 (statement -> expression_statement .)
    STATIC          reduce using rule 182 (statement -> expression_statement .)
    AUTO            reduce using rule 182 (statement -> expression_statement .)
    REGISTER        reduce using rule 182 (statement -> expression_statement .)
    VOID            reduce using rule 182 (statement -> expression_statement .)
    CHAR            reduce using rule 182 (statement -> expression_statement .)
    SHORT           reduce using rule 182 (statement -> expression_statement .)
    INT             reduce using rule 182 (statement -> expression_statement .)
    LONG            reduce using rule 182 (statement -> expression_statement .)
    FLOAT           reduce using rule 182 (statement -> expression_statement .)
    DOUBLE          reduce using rule 182 (statement -> expression_statement .)
    SIGNED          reduce using rule 182 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 182 (statement -> expression_statement .)
    BOOL            reduce using rule 182 (statement -> expression_statement .)
    CONST           reduce using rule 182 (statement -> expression_statement .)
    RESTRICT        reduce using rule 182 (statement -> expression_statement .)
    VOLATILE        reduce using rule 182 (statement -> expression_statement .)
    INLINE          reduce using rule 182 (statement -> expression_statement .)
    ENUM            reduce using rule 182 (statement -> expression_statement .)
    STRUCT          reduce using rule 182 (statement -> expression_statement .)
    UNION           reduce using rule 182 (statement -> expression_statement .)
    INC_DEC         reduce using rule 182 (statement -> expression_statement .)
    SIZEOF          reduce using rule 182 (statement -> expression_statement .)
    (               reduce using rule 182 (statement -> expression_statement .)
    &               reduce using rule 182 (statement -> expression_statement .)
    *               reduce using rule 182 (statement -> expression_statement .)
    +               reduce using rule 182 (statement -> expression_statement .)
    -               reduce using rule 182 (statement -> expression_statement .)
    ~               reduce using rule 182 (statement -> expression_statement .)
    !               reduce using rule 182 (statement -> expression_statement .)
    CONSTANT        reduce using rule 182 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 182 (statement -> expression_statement .)
    ELSE            reduce using rule 182 (statement -> expression_statement .)


state 121

    (183) statement -> selection_statement .

    }               reduce using rule 183 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 183 (statement -> selection_statement .)
    CASE            reduce using rule 183 (statement -> selection_statement .)
    DEFAULT         reduce using rule 183 (statement -> selection_statement .)
    {               reduce using rule 183 (statement -> selection_statement .)
    ;               reduce using rule 183 (statement -> selection_statement .)
    IF              reduce using rule 183 (statement -> selection_statement .)
    SWITCH          reduce using rule 183 (statement -> selection_statement .)
    WHILE           reduce using rule 183 (statement -> selection_statement .)
    DO              reduce using rule 183 (statement -> selection_statement .)
    FOR             reduce using rule 183 (statement -> selection_statement .)
    GOTO            reduce using rule 183 (statement -> selection_statement .)
    CONTINUE        reduce using rule 183 (statement -> selection_statement .)
    BREAK           reduce using rule 183 (statement -> selection_statement .)
    RETURN          reduce using rule 183 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 183 (statement -> selection_statement .)
    EXTERN          reduce using rule 183 (statement -> selection_statement .)
    STATIC          reduce using rule 183 (statement -> selection_statement .)
    AUTO            reduce using rule 183 (statement -> selection_statement .)
    REGISTER        reduce using rule 183 (statement -> selection_statement .)
    VOID            reduce using rule 183 (statement -> selection_statement .)
    CHAR            reduce using rule 183 (statement -> selection_statement .)
    SHORT           reduce using rule 183 (statement -> selection_statement .)
    INT             reduce using rule 183 (statement -> selection_statement .)
    LONG            reduce using rule 183 (statement -> selection_statement .)
    FLOAT           reduce using rule 183 (statement -> selection_statement .)
    DOUBLE          reduce using rule 183 (statement -> selection_statement .)
    SIGNED          reduce using rule 183 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 183 (statement -> selection_statement .)
    BOOL            reduce using rule 183 (statement -> selection_statement .)
    CONST           reduce using rule 183 (statement -> selection_statement .)
    RESTRICT        reduce using rule 183 (statement -> selection_statement .)
    VOLATILE        reduce using rule 183 (statement -> selection_statement .)
    INLINE          reduce using rule 183 (statement -> selection_statement .)
    ENUM            reduce using rule 183 (statement -> selection_statement .)
    STRUCT          reduce using rule 183 (statement -> selection_statement .)
    UNION           reduce using rule 183 (statement -> selection_statement .)
    INC_DEC         reduce using rule 183 (statement -> selection_statement .)
    SIZEOF          reduce using rule 183 (statement -> selection_statement .)
    (               reduce using rule 183 (statement -> selection_statement .)
    &               reduce using rule 183 (statement -> selection_statement .)
    *               reduce using rule 183 (statement -> selection_statement .)
    +               reduce using rule 183 (statement -> selection_statement .)
    -               reduce using rule 183 (statement -> selection_statement .)
    ~               reduce using rule 183 (statement -> selection_statement .)
    !               reduce using rule 183 (statement -> selection_statement .)
    CONSTANT        reduce using rule 183 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 183 (statement -> selection_statement .)
    ELSE            reduce using rule 183 (statement -> selection_statement .)


state 122

    (184) statement -> iteration_statement .

    }               reduce using rule 184 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 184 (statement -> iteration_statement .)
    CASE            reduce using rule 184 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 184 (statement -> iteration_statement .)
    {               reduce using rule 184 (statement -> iteration_statement .)
    ;               reduce using rule 184 (statement -> iteration_statement .)
    IF              reduce using rule 184 (statement -> iteration_statement .)
    SWITCH          reduce using rule 184 (statement -> iteration_statement .)
    WHILE           reduce using rule 184 (statement -> iteration_statement .)
    DO              reduce using rule 184 (statement -> iteration_statement .)
    FOR             reduce using rule 184 (statement -> iteration_statement .)
    GOTO            reduce using rule 184 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 184 (statement -> iteration_statement .)
    BREAK           reduce using rule 184 (statement -> iteration_statement .)
    RETURN          reduce using rule 184 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 184 (statement -> iteration_statement .)
    EXTERN          reduce using rule 184 (statement -> iteration_statement .)
    STATIC          reduce using rule 184 (statement -> iteration_statement .)
    AUTO            reduce using rule 184 (statement -> iteration_statement .)
    REGISTER        reduce using rule 184 (statement -> iteration_statement .)
    VOID            reduce using rule 184 (statement -> iteration_statement .)
    CHAR            reduce using rule 184 (statement -> iteration_statement .)
    SHORT           reduce using rule 184 (statement -> iteration_statement .)
    INT             reduce using rule 184 (statement -> iteration_statement .)
    LONG            reduce using rule 184 (statement -> iteration_statement .)
    FLOAT           reduce using rule 184 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 184 (statement -> iteration_statement .)
    SIGNED          reduce using rule 184 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 184 (statement -> iteration_statement .)
    BOOL            reduce using rule 184 (statement -> iteration_statement .)
    CONST           reduce using rule 184 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 184 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 184 (statement -> iteration_statement .)
    INLINE          reduce using rule 184 (statement -> iteration_statement .)
    ENUM            reduce using rule 184 (statement -> iteration_statement .)
    STRUCT          reduce using rule 184 (statement -> iteration_statement .)
    UNION           reduce using rule 184 (statement -> iteration_statement .)
    INC_DEC         reduce using rule 184 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 184 (statement -> iteration_statement .)
    (               reduce using rule 184 (statement -> iteration_statement .)
    &               reduce using rule 184 (statement -> iteration_statement .)
    *               reduce using rule 184 (statement -> iteration_statement .)
    +               reduce using rule 184 (statement -> iteration_statement .)
    -               reduce using rule 184 (statement -> iteration_statement .)
    ~               reduce using rule 184 (statement -> iteration_statement .)
    !               reduce using rule 184 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 184 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 184 (statement -> iteration_statement .)
    ELSE            reduce using rule 184 (statement -> iteration_statement .)


state 123

    (185) statement -> jump_statement .

    }               reduce using rule 185 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 185 (statement -> jump_statement .)
    CASE            reduce using rule 185 (statement -> jump_statement .)
    DEFAULT         reduce using rule 185 (statement -> jump_statement .)
    {               reduce using rule 185 (statement -> jump_statement .)
    ;               reduce using rule 185 (statement -> jump_statement .)
    IF              reduce using rule 185 (statement -> jump_statement .)
    SWITCH          reduce using rule 185 (statement -> jump_statement .)
    WHILE           reduce using rule 185 (statement -> jump_statement .)
    DO              reduce using rule 185 (statement -> jump_statement .)
    FOR             reduce using rule 185 (statement -> jump_statement .)
    GOTO            reduce using rule 185 (statement -> jump_statement .)
    CONTINUE        reduce using rule 185 (statement -> jump_statement .)
    BREAK           reduce using rule 185 (statement -> jump_statement .)
    RETURN          reduce using rule 185 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 185 (statement -> jump_statement .)
    EXTERN          reduce using rule 185 (statement -> jump_statement .)
    STATIC          reduce using rule 185 (statement -> jump_statement .)
    AUTO            reduce using rule 185 (statement -> jump_statement .)
    REGISTER        reduce using rule 185 (statement -> jump_statement .)
    VOID            reduce using rule 185 (statement -> jump_statement .)
    CHAR            reduce using rule 185 (statement -> jump_statement .)
    SHORT           reduce using rule 185 (statement -> jump_statement .)
    INT             reduce using rule 185 (statement -> jump_statement .)
    LONG            reduce using rule 185 (statement -> jump_statement .)
    FLOAT           reduce using rule 185 (statement -> jump_statement .)
    DOUBLE          reduce using rule 185 (statement -> jump_statement .)
    SIGNED          reduce using rule 185 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 185 (statement -> jump_statement .)
    BOOL            reduce using rule 185 (statement -> jump_statement .)
    CONST           reduce using rule 185 (statement -> jump_statement .)
    RESTRICT        reduce using rule 185 (statement -> jump_statement .)
    VOLATILE        reduce using rule 185 (statement -> jump_statement .)
    INLINE          reduce using rule 185 (statement -> jump_statement .)
    ENUM            reduce using rule 185 (statement -> jump_statement .)
    STRUCT          reduce using rule 185 (statement -> jump_statement .)
    UNION           reduce using rule 185 (statement -> jump_statement .)
    INC_DEC         reduce using rule 185 (statement -> jump_statement .)
    SIZEOF          reduce using rule 185 (statement -> jump_statement .)
    (               reduce using rule 185 (statement -> jump_statement .)
    &               reduce using rule 185 (statement -> jump_statement .)
    *               reduce using rule 185 (statement -> jump_statement .)
    +               reduce using rule 185 (statement -> jump_statement .)
    -               reduce using rule 185 (statement -> jump_statement .)
    ~               reduce using rule 185 (statement -> jump_statement .)
    !               reduce using rule 185 (statement -> jump_statement .)
    CONSTANT        reduce using rule 185 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 185 (statement -> jump_statement .)
    ELSE            reduce using rule 185 (statement -> jump_statement .)


state 124

    (186) labeled_statement -> IDENTIFIER . : statement
    (3) primary_expression -> IDENTIFIER .

    :               shift and go to state 210
    [               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    INC_DEC         reduce using rule 3 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ASSIGN_OP       reduce using rule 3 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    SHIFT_OP        reduce using rule 3 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    GE_LE           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    EQ_NE           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 3 (primary_expression -> IDENTIFIER .)


state 125

    (187) labeled_statement -> CASE . constant_expression : statement
    (58) constant_expression -> . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 211
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 126

    (188) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 213


state 127

    (196) expression_statement -> expression . ;
    (218) expression -> expression . , assignment_expression

    ;               shift and go to state 214
    ,               shift and go to state 215


state 128

    (197) selection_statement -> IF . ( expression ) statement ELSE statement
    (198) selection_statement -> IF . ( expression ) statement

    (               shift and go to state 216


state 129

    (199) selection_statement -> SWITCH . ( expression ) statement

    (               shift and go to state 217


state 130

    (200) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 218


state 131

    (201) iteration_statement -> DO . statement WHILE ( expression ) ;
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 219
    expression                     shift and go to state 127
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 132

    (202) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (203) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (205) iteration_statement -> FOR . ( declaration expression_statement expression ) statement

    (               shift and go to state 220


state 133

    (206) jump_statement -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 221


state 134

    (207) jump_statement -> CONTINUE . ;

    ;               shift and go to state 222


state 135

    (208) jump_statement -> BREAK . ;

    ;               shift and go to state 223


state 136

    (209) jump_statement -> RETURN . ;
    (210) jump_statement -> RETURN . expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 224
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 225
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 137

    (217) expression -> assignment_expression .

    ;               reduce using rule 217 (expression -> assignment_expression .)
    ,               reduce using rule 217 (expression -> assignment_expression .)
    )               reduce using rule 217 (expression -> assignment_expression .)
    :               reduce using rule 217 (expression -> assignment_expression .)
    ]               reduce using rule 217 (expression -> assignment_expression .)


state 138

    (72) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 72 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 72 (init_declarator_list -> init_declarator_list , init_declarator .)


state 139

    (126) direct_declarator -> direct_declarator [ type_qualifier_list . assignment_expression ]
    (127) direct_declarator -> direct_declarator [ type_qualifier_list . ]
    (130) direct_declarator -> direct_declarator [ type_qualifier_list . STATIC assignment_expression ]
    (131) direct_declarator -> direct_declarator [ type_qualifier_list . * ]
    (142) type_qualifier_list -> type_qualifier_list . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 227
    STATIC          shift and go to state 228
    *               shift and go to state 229
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 226
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 140

    (128) direct_declarator -> direct_declarator [ assignment_expression . ]

    ]               shift and go to state 230


state 141

    (133) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    TYPEDEF         reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    EXTERN          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    STATIC          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    AUTO            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    REGISTER        reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    SHORT           reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    LONG            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    DOUBLE          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    SIGNED          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    UNSIGNED        reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    CONST           reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    RESTRICT        reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    VOLATILE        reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    INLINE          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    ENUM            reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    UNION           reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 133 (direct_declarator -> direct_declarator [ ] .)


state 142

    (129) direct_declarator -> direct_declarator [ STATIC . type_qualifier_list assignment_expression ]
    (141) type_qualifier_list -> . type_qualifier
    (142) type_qualifier_list -> . type_qualifier_list type_qualifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 231
    type_qualifier                 shift and go to state 66

state 143

    (132) direct_declarator -> direct_declarator [ * . ]
    (24) unary_operator -> * .

    ]               shift and go to state 232
    (               reduce using rule 24 (unary_operator -> * .)
    INC_DEC         reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 144

    (134) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 233


state 145

    (136) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    TYPEDEF         reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    EXTERN          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    STATIC          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    AUTO            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    REGISTER        reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    SHORT           reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    LONG            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    DOUBLE          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    SIGNED          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    UNSIGNED        reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    CONST           reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    RESTRICT        reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    VOLATILE        reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    INLINE          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    ENUM            reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    UNION           reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 136 (direct_declarator -> direct_declarator ( ) .)


state 146

    (135) direct_declarator -> direct_declarator ( identifier_list . )
    (151) identifier_list -> identifier_list . , IDENTIFIER

    )               shift and go to state 234
    ,               shift and go to state 235


state 147

    (143) parameter_type_list -> parameter_list .
    (144) parameter_type_list -> parameter_list . , ELLIPSIS
    (146) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 143 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 236


state 148

    (150) identifier_list -> IDENTIFIER .

    )               reduce using rule 150 (identifier_list -> IDENTIFIER .)
    ,               reduce using rule 150 (identifier_list -> IDENTIFIER .)


state 149

    (145) parameter_list -> parameter_declaration .

    ,               reduce using rule 145 (parameter_list -> parameter_declaration .)
    )               reduce using rule 145 (parameter_list -> parameter_declaration .)


state 150

    (147) parameter_declaration -> declaration_specifiers . declarator
    (148) parameter_declaration -> declaration_specifiers . abstract_declarator
    (149) parameter_declaration -> declaration_specifiers .
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (154) abstract_declarator -> . pointer
    (155) abstract_declarator -> . direct_abstract_declarator
    (156) abstract_declarator -> . pointer direct_abstract_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 149 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 149 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242

    declarator                     shift and go to state 237
    abstract_declarator            shift and go to state 238
    pointer                        shift and go to state 239
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 240

state 151

    (140) pointer -> * type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 140 (pointer -> * type_qualifier_list pointer .)
    (               reduce using rule 140 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 140 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 140 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 140 (pointer -> * type_qualifier_list pointer .)


state 152

    (142) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ]               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_DEC         reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    &               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    +               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    -               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ~               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    !               reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONSTANT        reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 142 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 153

    (125) direct_declarator -> ( declarator ) .

    [               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    TYPEDEF         reduce using rule 125 (direct_declarator -> ( declarator ) .)
    EXTERN          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    STATIC          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    AUTO            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    REGISTER        reduce using rule 125 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    SHORT           reduce using rule 125 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 125 (direct_declarator -> ( declarator ) .)
    LONG            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    FLOAT           reduce using rule 125 (direct_declarator -> ( declarator ) .)
    DOUBLE          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    SIGNED          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    UNSIGNED        reduce using rule 125 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    CONST           reduce using rule 125 (direct_declarator -> ( declarator ) .)
    RESTRICT        reduce using rule 125 (direct_declarator -> ( declarator ) .)
    VOLATILE        reduce using rule 125 (direct_declarator -> ( declarator ) .)
    INLINE          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    ENUM            reduce using rule 125 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 125 (direct_declarator -> ( declarator ) .)
    UNION           reduce using rule 125 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 125 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 125 (direct_declarator -> ( declarator ) .)


state 154

    (92) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list . }
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (99) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    }               shift and go to state 243
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 156
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 155

    (93) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOID            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CHAR            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SHORT           reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INT             reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    LONG            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    FLOAT           reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    DOUBLE          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SIGNED          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNSIGNED        reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    BOOL            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INLINE          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ENUM            reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STRUCT          reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNION           reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 93 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 156

    (98) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 157

    (99) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (105) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 244
    ,               shift and go to state 245


state 158

    (104) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 104 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 104 (struct_declarator_list -> struct_declarator .)


state 159

    (106) struct_declarator -> declarator .
    (108) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 106 (struct_declarator -> declarator .)
    ,               reduce using rule 106 (struct_declarator -> declarator .)
    :               shift and go to state 246


state 160

    (107) struct_declarator -> : . constant_expression
    (58) constant_expression -> . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 247
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 161

    (100) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    :               reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 100 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 162

    (102) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 102 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 163

    (109) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    VOID            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    CHAR            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    SHORT           reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    INT             reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    LONG            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    FLOAT           reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    DOUBLE          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    SIGNED          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    UNSIGNED        reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    BOOL            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    INLINE          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    ENUM            reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    STRUCT          reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    UNION           reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    IDENTIFIER      reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 109 (enum_specifier -> ENUM { enumerator_list } .)


state 164

    (111) enum_specifier -> ENUM { enumerator_list , . }
    (115) enumerator_list -> enumerator_list , . enumerator
    (116) enumerator -> . IDENTIFIER
    (117) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 248
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 249

state 165

    (117) enumerator -> IDENTIFIER = . constant_expression
    (58) constant_expression -> . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 250
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 166

    (110) enum_specifier -> ENUM IDENTIFIER { enumerator_list . }
    (112) enum_specifier -> ENUM IDENTIFIER { enumerator_list . , }
    (115) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 251
    ,               shift and go to state 252


state 167

    (169) initializer -> { initializer_list . }
    (170) initializer -> { initializer_list . , }
    (173) initializer_list -> initializer_list . , initializer
    (174) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 253
    ,               shift and go to state 254


state 168

    (171) initializer_list -> initializer .

    }               reduce using rule 171 (initializer_list -> initializer .)
    ,               reduce using rule 171 (initializer_list -> initializer .)


state 169

    (172) initializer_list -> designation . initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 255
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 170

    (175) designation -> designator_list . =
    (177) designator_list -> designator_list . designator
    (178) designator -> . [ constant_expression ]
    (179) designator -> . . IDENTIFIER

    =               shift and go to state 256
    [               shift and go to state 172
    .               shift and go to state 173

    designator                     shift and go to state 257

state 171

    (176) designator_list -> designator .

    =               reduce using rule 176 (designator_list -> designator .)
    [               reduce using rule 176 (designator_list -> designator .)
    .               reduce using rule 176 (designator_list -> designator .)


state 172

    (178) designator -> [ . constant_expression ]
    (58) constant_expression -> . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 258
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 173

    (179) designator -> . . IDENTIFIER

    IDENTIFIER      shift and go to state 259


state 174

    (220) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 85
    assignment_expression          shift and go to state 260
    conditional_expression         shift and go to state 84
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 175

    (59) assignment_operator -> = .

    INC_DEC         reduce using rule 59 (assignment_operator -> = .)
    SIZEOF          reduce using rule 59 (assignment_operator -> = .)
    (               reduce using rule 59 (assignment_operator -> = .)
    &               reduce using rule 59 (assignment_operator -> = .)
    *               reduce using rule 59 (assignment_operator -> = .)
    +               reduce using rule 59 (assignment_operator -> = .)
    -               reduce using rule 59 (assignment_operator -> = .)
    ~               reduce using rule 59 (assignment_operator -> = .)
    !               reduce using rule 59 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 59 (assignment_operator -> = .)
    CONSTANT        reduce using rule 59 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 59 (assignment_operator -> = .)


state 176

    (60) assignment_operator -> ASSIGN_OP .

    INC_DEC         reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    SIZEOF          reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    (               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    &               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    *               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    +               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    -               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    ~               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    !               reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    IDENTIFIER      reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    CONSTANT        reduce using rule 60 (assignment_operator -> ASSIGN_OP .)
    STRING_LITERAL  reduce using rule 60 (assignment_operator -> ASSIGN_OP .)


state 177

    (57) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_or_expression          shift and go to state 86
    expression                     shift and go to state 261
    conditional_expression         shift and go to state 84
    assignment_expression          shift and go to state 137
    unary_expression               shift and go to state 85
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 178

    (55) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_and_expression         shift and go to state 262
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 179

    (8) postfix_expression -> postfix_expression [ . expression ]
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    postfix_expression             shift and go to state 87
    expression                     shift and go to state 263
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 180

    (9) postfix_expression -> postfix_expression ( . )
    (10) postfix_expression -> postfix_expression ( . argument_expression_list )
    (16) argument_expression_list -> . assignment_expression
    (17) argument_expression_list -> . argument_expression_list , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 264
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    postfix_expression             shift and go to state 87
    argument_expression_list       shift and go to state 265
    assignment_expression          shift and go to state 266
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 181

    (11) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 267


state 182

    (12) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 268


state 183

    (13) postfix_expression -> postfix_expression INC_DEC .

    [               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    (               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    .               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    INC_DEC         reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    =               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ASSIGN_OP       reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    *               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    /               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    %               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    +               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    -               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    SHIFT_OP        reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    <               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    >               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    GE_LE           reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    EQ_NE           reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    &               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ^               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    |               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ?               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ;               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ,               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    ]               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    }               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    )               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)
    :               reduce using rule 13 (postfix_expression -> postfix_expression INC_DEC .)


state 184

    (19) unary_expression -> INC_DEC unary_expression .

    =               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ASSIGN_OP       reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    *               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    /               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    %               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    +               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    -               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    SHIFT_OP        reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    <               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    >               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    GE_LE           reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    EQ_NE           reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    &               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ^               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    |               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ?               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ;               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ,               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    ]               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    }               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    )               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)
    :               reduce using rule 19 (unary_expression -> INC_DEC unary_expression .)


state 185

    (14) postfix_expression -> ( . type_name ) { initializer_list }
    (15) postfix_expression -> ( . type_name ) { initializer_list , }
    (6) primary_expression -> ( . expression )
    (152) type_name -> . specifier_qualifier_list
    (153) type_name -> . specifier_qualifier_list abstract_declarator
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 269
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 186

    (20) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_OP       reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    SHIFT_OP        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    GE_LE           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    EQ_NE           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)


state 187

    (29) cast_expression -> unary_expression .

    =               reduce using rule 29 (cast_expression -> unary_expression .)
    ASSIGN_OP       reduce using rule 29 (cast_expression -> unary_expression .)
    *               reduce using rule 29 (cast_expression -> unary_expression .)
    /               reduce using rule 29 (cast_expression -> unary_expression .)
    %               reduce using rule 29 (cast_expression -> unary_expression .)
    +               reduce using rule 29 (cast_expression -> unary_expression .)
    -               reduce using rule 29 (cast_expression -> unary_expression .)
    SHIFT_OP        reduce using rule 29 (cast_expression -> unary_expression .)
    <               reduce using rule 29 (cast_expression -> unary_expression .)
    >               reduce using rule 29 (cast_expression -> unary_expression .)
    GE_LE           reduce using rule 29 (cast_expression -> unary_expression .)
    EQ_NE           reduce using rule 29 (cast_expression -> unary_expression .)
    &               reduce using rule 29 (cast_expression -> unary_expression .)
    ^               reduce using rule 29 (cast_expression -> unary_expression .)
    |               reduce using rule 29 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 29 (cast_expression -> unary_expression .)
    ?               reduce using rule 29 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    ;               reduce using rule 29 (cast_expression -> unary_expression .)
    ,               reduce using rule 29 (cast_expression -> unary_expression .)
    ]               reduce using rule 29 (cast_expression -> unary_expression .)
    }               reduce using rule 29 (cast_expression -> unary_expression .)
    )               reduce using rule 29 (cast_expression -> unary_expression .)
    :               reduce using rule 29 (cast_expression -> unary_expression .)


state 188

    (30) cast_expression -> ( . type_name ) cast_expression
    (14) postfix_expression -> ( . type_name ) { initializer_list }
    (15) postfix_expression -> ( . type_name ) { initializer_list , }
    (6) primary_expression -> ( . expression )
    (152) type_name -> . specifier_qualifier_list
    (153) type_name -> . specifier_qualifier_list abstract_declarator
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 270
    cast_expression                shift and go to state 90
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 189

    (21) unary_expression -> SIZEOF unary_expression .

    =               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ASSIGN_OP       reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_OP        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    GE_LE           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    EQ_NE           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)


state 190

    (22) unary_expression -> SIZEOF ( . type_name )
    (14) postfix_expression -> ( . type_name ) { initializer_list }
    (15) postfix_expression -> ( . type_name ) { initializer_list , }
    (6) primary_expression -> ( . expression )
    (152) type_name -> . specifier_qualifier_list
    (153) type_name -> . specifier_qualifier_list abstract_declarator
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (100) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (101) specifier_qualifier_list -> . type_specifier
    (102) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (103) specifier_qualifier_list -> . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 271
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 191

    (14) postfix_expression -> ( type_name . ) { initializer_list }
    (15) postfix_expression -> ( type_name . ) { initializer_list , }
    (30) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 272


state 192

    (6) primary_expression -> ( expression . )
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 273
    ,               shift and go to state 215


state 193

    (152) type_name -> specifier_qualifier_list .
    (153) type_name -> specifier_qualifier_list . abstract_declarator
    (154) abstract_declarator -> . pointer
    (155) abstract_declarator -> . direct_abstract_declarator
    (156) abstract_declarator -> . pointer direct_abstract_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 152 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 42
    (               shift and go to state 276
    [               shift and go to state 242

    abstract_declarator            shift and go to state 274
    pointer                        shift and go to state 275
    direct_abstract_declarator     shift and go to state 240

state 194

    (53) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    inclusive_or_expression        shift and go to state 277
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 195

    (51) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    exclusive_or_expression        shift and go to state 278
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 196

    (49) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    and_expression                 shift and go to state 279
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 197

    (47) and_expression -> and_expression & . equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    equality_expression            shift and go to state 280
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 198

    (45) equality_expression -> equality_expression EQ_NE . relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    relational_expression          shift and go to state 281
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 199

    (41) relational_expression -> relational_expression < . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 282
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 200

    (42) relational_expression -> relational_expression > . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 201

    (43) relational_expression -> relational_expression GE_LE . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 202

    (39) shift_expression -> shift_expression SHIFT_OP . additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    additive_expression            shift and go to state 285
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 203

    (36) additive_expression -> additive_expression + . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    multiplicative_expression      shift and go to state 286
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 204

    (37) additive_expression -> additive_expression - . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    multiplicative_expression      shift and go to state 287
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 205

    (32) multiplicative_expression -> multiplicative_expression * . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 288
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 206

    (33) multiplicative_expression -> multiplicative_expression / . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 289
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 207

    (34) multiplicative_expression -> multiplicative_expression % . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 290
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 208

    (190) compound_statement -> { block_item_list } .

    TYPEDEF         reduce using rule 190 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 190 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 190 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 190 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 190 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 190 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 190 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 190 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 190 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 190 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 190 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 190 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 190 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 190 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 190 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 190 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 190 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 190 (compound_statement -> { block_item_list } .)
    INLINE          reduce using rule 190 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 190 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 190 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 190 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 190 (compound_statement -> { block_item_list } .)
    }               reduce using rule 190 (compound_statement -> { block_item_list } .)
    IDENTIFIER      reduce using rule 190 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 190 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 190 (compound_statement -> { block_item_list } .)
    {               reduce using rule 190 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 190 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 190 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 190 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 190 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 190 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 190 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 190 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 190 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 190 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 190 (compound_statement -> { block_item_list } .)
    INC_DEC         reduce using rule 190 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 190 (compound_statement -> { block_item_list } .)
    (               reduce using rule 190 (compound_statement -> { block_item_list } .)
    &               reduce using rule 190 (compound_statement -> { block_item_list } .)
    *               reduce using rule 190 (compound_statement -> { block_item_list } .)
    +               reduce using rule 190 (compound_statement -> { block_item_list } .)
    -               reduce using rule 190 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 190 (compound_statement -> { block_item_list } .)
    !               reduce using rule 190 (compound_statement -> { block_item_list } .)
    CONSTANT        reduce using rule 190 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 190 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 190 (compound_statement -> { block_item_list } .)


state 209

    (192) block_item_list -> block_item_list block_item .

    }               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 192 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 192 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 192 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 192 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 192 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 192 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 192 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 192 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 192 (block_item_list -> block_item_list block_item .)
    INC_DEC         reduce using rule 192 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 192 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 192 (block_item_list -> block_item_list block_item .)
    CONSTANT        reduce using rule 192 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 192 (block_item_list -> block_item_list block_item .)


state 210

    (186) labeled_statement -> IDENTIFIER : . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 291
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 211

    (187) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 292


state 212

    (58) constant_expression -> conditional_expression .

    :               reduce using rule 58 (constant_expression -> conditional_expression .)
    ;               reduce using rule 58 (constant_expression -> conditional_expression .)
    ,               reduce using rule 58 (constant_expression -> conditional_expression .)
    }               reduce using rule 58 (constant_expression -> conditional_expression .)
    ]               reduce using rule 58 (constant_expression -> conditional_expression .)


state 213

    (188) labeled_statement -> DEFAULT : . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 293
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 214

    (196) expression_statement -> expression ; .

    }               reduce using rule 196 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 196 (expression_statement -> expression ; .)
    CASE            reduce using rule 196 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 196 (expression_statement -> expression ; .)
    {               reduce using rule 196 (expression_statement -> expression ; .)
    ;               reduce using rule 196 (expression_statement -> expression ; .)
    IF              reduce using rule 196 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 196 (expression_statement -> expression ; .)
    WHILE           reduce using rule 196 (expression_statement -> expression ; .)
    DO              reduce using rule 196 (expression_statement -> expression ; .)
    FOR             reduce using rule 196 (expression_statement -> expression ; .)
    GOTO            reduce using rule 196 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 196 (expression_statement -> expression ; .)
    BREAK           reduce using rule 196 (expression_statement -> expression ; .)
    RETURN          reduce using rule 196 (expression_statement -> expression ; .)
    TYPEDEF         reduce using rule 196 (expression_statement -> expression ; .)
    EXTERN          reduce using rule 196 (expression_statement -> expression ; .)
    STATIC          reduce using rule 196 (expression_statement -> expression ; .)
    AUTO            reduce using rule 196 (expression_statement -> expression ; .)
    REGISTER        reduce using rule 196 (expression_statement -> expression ; .)
    VOID            reduce using rule 196 (expression_statement -> expression ; .)
    CHAR            reduce using rule 196 (expression_statement -> expression ; .)
    SHORT           reduce using rule 196 (expression_statement -> expression ; .)
    INT             reduce using rule 196 (expression_statement -> expression ; .)
    LONG            reduce using rule 196 (expression_statement -> expression ; .)
    FLOAT           reduce using rule 196 (expression_statement -> expression ; .)
    DOUBLE          reduce using rule 196 (expression_statement -> expression ; .)
    SIGNED          reduce using rule 196 (expression_statement -> expression ; .)
    UNSIGNED        reduce using rule 196 (expression_statement -> expression ; .)
    BOOL            reduce using rule 196 (expression_statement -> expression ; .)
    CONST           reduce using rule 196 (expression_statement -> expression ; .)
    RESTRICT        reduce using rule 196 (expression_statement -> expression ; .)
    VOLATILE        reduce using rule 196 (expression_statement -> expression ; .)
    INLINE          reduce using rule 196 (expression_statement -> expression ; .)
    ENUM            reduce using rule 196 (expression_statement -> expression ; .)
    STRUCT          reduce using rule 196 (expression_statement -> expression ; .)
    UNION           reduce using rule 196 (expression_statement -> expression ; .)
    INC_DEC         reduce using rule 196 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 196 (expression_statement -> expression ; .)
    (               reduce using rule 196 (expression_statement -> expression ; .)
    &               reduce using rule 196 (expression_statement -> expression ; .)
    *               reduce using rule 196 (expression_statement -> expression ; .)
    +               reduce using rule 196 (expression_statement -> expression ; .)
    -               reduce using rule 196 (expression_statement -> expression ; .)
    ~               reduce using rule 196 (expression_statement -> expression ; .)
    !               reduce using rule 196 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 196 (expression_statement -> expression ; .)
    STRING_LITERAL  reduce using rule 196 (expression_statement -> expression ; .)
    ELSE            reduce using rule 196 (expression_statement -> expression ; .)
    )               reduce using rule 196 (expression_statement -> expression ; .)


state 215

    (218) expression -> expression , . assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 294
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 216

    (197) selection_statement -> IF ( . expression ) statement ELSE statement
    (198) selection_statement -> IF ( . expression ) statement
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 295
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 217

    (199) selection_statement -> SWITCH ( . expression ) statement
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 296
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 218

    (200) iteration_statement -> WHILE ( . expression ) statement
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 297
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 219

    (201) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 298


state 220

    (202) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (203) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (204) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (205) iteration_statement -> FOR ( . declaration expression_statement expression ) statement
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (61) declaration -> . declaration_specifiers ;
    (62) declaration -> . declaration_specifiers init_declarator_list ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 299
    expression                     shift and go to state 127
    declaration                    shift and go to state 300
    declaration_specifiers         shift and go to state 53
    assignment_expression          shift and go to state 137
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 221

    (206) jump_statement -> GOTO IDENTIFIER . ;

    ;               shift and go to state 301


state 222

    (207) jump_statement -> CONTINUE ; .

    }               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 207 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 207 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 207 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 207 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 207 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 207 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 207 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    INLINE          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 207 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 207 (jump_statement -> CONTINUE ; .)
    INC_DEC         reduce using rule 207 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 207 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 207 (jump_statement -> CONTINUE ; .)
    CONSTANT        reduce using rule 207 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 207 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 207 (jump_statement -> CONTINUE ; .)


state 223

    (208) jump_statement -> BREAK ; .

    }               reduce using rule 208 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 208 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 208 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 208 (jump_statement -> BREAK ; .)
    {               reduce using rule 208 (jump_statement -> BREAK ; .)
    ;               reduce using rule 208 (jump_statement -> BREAK ; .)
    IF              reduce using rule 208 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 208 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 208 (jump_statement -> BREAK ; .)
    DO              reduce using rule 208 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 208 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 208 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 208 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 208 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 208 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 208 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 208 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 208 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 208 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 208 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 208 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 208 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 208 (jump_statement -> BREAK ; .)
    INT             reduce using rule 208 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 208 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 208 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 208 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 208 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 208 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 208 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 208 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 208 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 208 (jump_statement -> BREAK ; .)
    INLINE          reduce using rule 208 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 208 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 208 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 208 (jump_statement -> BREAK ; .)
    INC_DEC         reduce using rule 208 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 208 (jump_statement -> BREAK ; .)
    (               reduce using rule 208 (jump_statement -> BREAK ; .)
    &               reduce using rule 208 (jump_statement -> BREAK ; .)
    *               reduce using rule 208 (jump_statement -> BREAK ; .)
    +               reduce using rule 208 (jump_statement -> BREAK ; .)
    -               reduce using rule 208 (jump_statement -> BREAK ; .)
    ~               reduce using rule 208 (jump_statement -> BREAK ; .)
    !               reduce using rule 208 (jump_statement -> BREAK ; .)
    CONSTANT        reduce using rule 208 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 208 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 208 (jump_statement -> BREAK ; .)


state 224

    (209) jump_statement -> RETURN ; .

    }               reduce using rule 209 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 209 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 209 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 209 (jump_statement -> RETURN ; .)
    {               reduce using rule 209 (jump_statement -> RETURN ; .)
    ;               reduce using rule 209 (jump_statement -> RETURN ; .)
    IF              reduce using rule 209 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 209 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 209 (jump_statement -> RETURN ; .)
    DO              reduce using rule 209 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 209 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 209 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 209 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 209 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 209 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 209 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 209 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 209 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 209 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 209 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 209 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 209 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 209 (jump_statement -> RETURN ; .)
    INT             reduce using rule 209 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 209 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 209 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 209 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 209 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 209 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 209 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 209 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 209 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 209 (jump_statement -> RETURN ; .)
    INLINE          reduce using rule 209 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 209 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 209 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 209 (jump_statement -> RETURN ; .)
    INC_DEC         reduce using rule 209 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 209 (jump_statement -> RETURN ; .)
    (               reduce using rule 209 (jump_statement -> RETURN ; .)
    &               reduce using rule 209 (jump_statement -> RETURN ; .)
    *               reduce using rule 209 (jump_statement -> RETURN ; .)
    +               reduce using rule 209 (jump_statement -> RETURN ; .)
    -               reduce using rule 209 (jump_statement -> RETURN ; .)
    ~               reduce using rule 209 (jump_statement -> RETURN ; .)
    !               reduce using rule 209 (jump_statement -> RETURN ; .)
    CONSTANT        reduce using rule 209 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 209 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 209 (jump_statement -> RETURN ; .)


state 225

    (210) jump_statement -> RETURN expression . ;
    (218) expression -> expression . , assignment_expression

    ;               shift and go to state 302
    ,               shift and go to state 215


state 226

    (126) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression . ]

    ]               shift and go to state 303


state 227

    (127) direct_declarator -> direct_declarator [ type_qualifier_list ] .

    [               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    (               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    =               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    {               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    TYPEDEF         reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    EXTERN          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STATIC          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    AUTO            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    REGISTER        reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOID            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CHAR            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SHORT           reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INT             reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    LONG            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    FLOAT           reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    DOUBLE          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SIGNED          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNSIGNED        reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    BOOL            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CONST           reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    RESTRICT        reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOLATILE        reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INLINE          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ENUM            reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STRUCT          reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNION           reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ;               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ,               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    )               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    :               reduce using rule 127 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)


state 228

    (130) direct_declarator -> direct_declarator [ type_qualifier_list STATIC . assignment_expression ]
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 304
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 229

    (131) direct_declarator -> direct_declarator [ type_qualifier_list * . ]
    (24) unary_operator -> * .

    ]               shift and go to state 305
    (               reduce using rule 24 (unary_operator -> * .)
    INC_DEC         reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 230

    (128) direct_declarator -> direct_declarator [ assignment_expression ] .

    [               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    (               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    =               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    {               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    TYPEDEF         reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    EXTERN          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STATIC          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    AUTO            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    REGISTER        reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOID            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CHAR            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SHORT           reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INT             reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    LONG            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    FLOAT           reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    DOUBLE          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SIGNED          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNSIGNED        reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    BOOL            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CONST           reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    RESTRICT        reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOLATILE        reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INLINE          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ENUM            reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STRUCT          reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNION           reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ;               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ,               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    )               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    :               reduce using rule 128 (direct_declarator -> direct_declarator [ assignment_expression ] .)


state 231

    (129) direct_declarator -> direct_declarator [ STATIC type_qualifier_list . assignment_expression ]
    (142) type_qualifier_list -> type_qualifier_list . type_qualifier
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 306
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 232

    (132) direct_declarator -> direct_declarator [ * ] .

    [               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    (               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    =               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    {               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    TYPEDEF         reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    EXTERN          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    STATIC          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    AUTO            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    REGISTER        reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    VOID            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    CHAR            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    SHORT           reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    INT             reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    LONG            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    FLOAT           reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    DOUBLE          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    SIGNED          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    UNSIGNED        reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    BOOL            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    CONST           reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    RESTRICT        reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    VOLATILE        reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    INLINE          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    ENUM            reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    STRUCT          reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    UNION           reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    ;               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    ,               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    )               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)
    :               reduce using rule 132 (direct_declarator -> direct_declarator [ * ] .)


state 233

    (134) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPEDEF         reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    EXTERN          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STATIC          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    AUTO            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    REGISTER        reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SHORT           reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    LONG            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    FLOAT           reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    DOUBLE          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SIGNED          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNSIGNED        reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    BOOL            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CONST           reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    RESTRICT        reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOLATILE        reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INLINE          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ENUM            reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNION           reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 134 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 234

    (135) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPEDEF         reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    EXTERN          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STATIC          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    AUTO            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    REGISTER        reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SHORT           reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    LONG            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    FLOAT           reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    DOUBLE          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SIGNED          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNSIGNED        reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CONST           reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    RESTRICT        reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOLATILE        reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INLINE          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ENUM            reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNION           reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 135 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 235

    (151) identifier_list -> identifier_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 307


state 236

    (144) parameter_type_list -> parameter_list , . ELLIPSIS
    (146) parameter_list -> parameter_list , . parameter_declaration
    (147) parameter_declaration -> . declaration_specifiers declarator
    (148) parameter_declaration -> . declaration_specifiers abstract_declarator
    (149) parameter_declaration -> . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 308
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_declaration          shift and go to state 309
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 237

    (147) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 147 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 147 (parameter_declaration -> declaration_specifiers declarator .)


state 238

    (148) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 148 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 148 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 239

    (122) declarator -> pointer . direct_declarator
    (154) abstract_declarator -> pointer .
    (156) abstract_declarator -> pointer . direct_abstract_declarator
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 154 (abstract_declarator -> pointer .)
    )               reduce using rule 154 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242

    direct_declarator              shift and go to state 61
    direct_abstract_declarator     shift and go to state 310

state 240

    (155) abstract_declarator -> direct_abstract_declarator .
    (160) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (161) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (163) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (166) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (167) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 155 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 155 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 311
    (               shift and go to state 312


state 241

    (125) direct_declarator -> ( . declarator )
    (157) direct_abstract_declarator -> ( . abstract_declarator )
    (164) direct_abstract_declarator -> ( . )
    (165) direct_abstract_declarator -> ( . parameter_type_list )
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (154) abstract_declarator -> . pointer
    (155) abstract_declarator -> . direct_abstract_declarator
    (156) abstract_declarator -> . pointer direct_abstract_declarator
    (143) parameter_type_list -> . parameter_list
    (144) parameter_type_list -> . parameter_list , ELLIPSIS
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (145) parameter_list -> . parameter_declaration
    (146) parameter_list -> . parameter_list , parameter_declaration
    (147) parameter_declaration -> . declaration_specifiers declarator
    (148) parameter_declaration -> . declaration_specifiers abstract_declarator
    (149) parameter_declaration -> . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    )               shift and go to state 313
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declarator                     shift and go to state 67
    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    pointer                        shift and go to state 239
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 240
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 242

    (158) direct_abstract_declarator -> [ . ]
    (159) direct_abstract_declarator -> [ . assignment_expression ]
    (162) direct_abstract_declarator -> [ . * ]
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 316
    *               shift and go to state 318
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 243

    (92) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .

    TYPEDEF         reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    EXTERN          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STATIC          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    AUTO            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    REGISTER        reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOID            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CHAR            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SHORT           reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INT             reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    LONG            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    FLOAT           reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    DOUBLE          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SIGNED          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNSIGNED        reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    BOOL            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CONST           reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    RESTRICT        reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOLATILE        reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INLINE          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ENUM            reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STRUCT          reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNION           reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ;               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    *               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    (               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    [               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ,               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    )               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    :               reduce using rule 92 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)


state 244

    (99) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 99 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 245

    (105) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (106) struct_declarator -> . declarator
    (107) struct_declarator -> . : constant_expression
    (108) struct_declarator -> . declarator : constant_expression
    (122) declarator -> . pointer direct_declarator
    (123) declarator -> . direct_declarator
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (124) direct_declarator -> . IDENTIFIER
    (125) direct_declarator -> . ( declarator )
    (126) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (127) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (128) direct_declarator -> . direct_declarator [ assignment_expression ]
    (129) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (130) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (131) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (132) direct_declarator -> . direct_declarator [ * ]
    (133) direct_declarator -> . direct_declarator [ ]
    (134) direct_declarator -> . direct_declarator ( parameter_type_list )
    (135) direct_declarator -> . direct_declarator ( identifier_list )
    (136) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 160
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator              shift and go to state 319
    declarator                     shift and go to state 159
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 246

    (108) struct_declarator -> declarator : . constant_expression
    (58) constant_expression -> . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 320
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 247

    (107) struct_declarator -> : constant_expression .

    ;               reduce using rule 107 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 107 (struct_declarator -> : constant_expression .)


state 248

    (111) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    VOID            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    CHAR            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    SHORT           reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    INT             reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    LONG            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    FLOAT           reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    DOUBLE          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    SIGNED          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    UNSIGNED        reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    BOOL            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    INLINE          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    ENUM            reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    STRUCT          reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    UNION           reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    IDENTIFIER      reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 111 (enum_specifier -> ENUM { enumerator_list , } .)


state 249

    (115) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 115 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 115 (enumerator_list -> enumerator_list , enumerator .)


state 250

    (117) enumerator -> IDENTIFIER = constant_expression .

    }               reduce using rule 117 (enumerator -> IDENTIFIER = constant_expression .)
    ,               reduce using rule 117 (enumerator -> IDENTIFIER = constant_expression .)


state 251

    (110) enum_specifier -> ENUM IDENTIFIER { enumerator_list } .

    TYPEDEF         reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    EXTERN          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STATIC          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    AUTO            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    REGISTER        reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOID            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CHAR            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SHORT           reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INT             reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    LONG            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    FLOAT           reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    DOUBLE          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SIGNED          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNSIGNED        reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    BOOL            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CONST           reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    RESTRICT        reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOLATILE        reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INLINE          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ENUM            reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STRUCT          reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNION           reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ;               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    *               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    IDENTIFIER      reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    (               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    [               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ,               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    )               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    :               reduce using rule 110 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)


state 252

    (112) enum_specifier -> ENUM IDENTIFIER { enumerator_list , . }
    (115) enumerator_list -> enumerator_list , . enumerator
    (116) enumerator -> . IDENTIFIER
    (117) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 321
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 249

state 253

    (169) initializer -> { initializer_list } .

    ;               reduce using rule 169 (initializer -> { initializer_list } .)
    ,               reduce using rule 169 (initializer -> { initializer_list } .)
    }               reduce using rule 169 (initializer -> { initializer_list } .)


state 254

    (170) initializer -> { initializer_list , . }
    (173) initializer_list -> initializer_list , . initializer
    (174) initializer_list -> initializer_list , . designation initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (175) designation -> . designator_list =
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (176) designator_list -> . designator
    (177) designator_list -> . designator_list designator
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (178) designator -> . [ constant_expression ]
    (179) designator -> . . IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 322
    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 323
    designation                    shift and go to state 324
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 255

    (172) initializer_list -> designation initializer .

    }               reduce using rule 172 (initializer_list -> designation initializer .)
    ,               reduce using rule 172 (initializer_list -> designation initializer .)


state 256

    (175) designation -> designator_list = .

    {               reduce using rule 175 (designation -> designator_list = .)
    INC_DEC         reduce using rule 175 (designation -> designator_list = .)
    SIZEOF          reduce using rule 175 (designation -> designator_list = .)
    (               reduce using rule 175 (designation -> designator_list = .)
    &               reduce using rule 175 (designation -> designator_list = .)
    *               reduce using rule 175 (designation -> designator_list = .)
    +               reduce using rule 175 (designation -> designator_list = .)
    -               reduce using rule 175 (designation -> designator_list = .)
    ~               reduce using rule 175 (designation -> designator_list = .)
    !               reduce using rule 175 (designation -> designator_list = .)
    IDENTIFIER      reduce using rule 175 (designation -> designator_list = .)
    CONSTANT        reduce using rule 175 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 175 (designation -> designator_list = .)


state 257

    (177) designator_list -> designator_list designator .

    =               reduce using rule 177 (designator_list -> designator_list designator .)
    [               reduce using rule 177 (designator_list -> designator_list designator .)
    .               reduce using rule 177 (designator_list -> designator_list designator .)


state 258

    (178) designator -> [ constant_expression . ]

    ]               shift and go to state 325


state 259

    (179) designator -> . IDENTIFIER .

    =               reduce using rule 179 (designator -> . IDENTIFIER .)
    [               reduce using rule 179 (designator -> . IDENTIFIER .)
    .               reduce using rule 179 (designator -> . IDENTIFIER .)


state 260

    (220) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 220 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 261

    (57) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (218) expression -> expression . , assignment_expression

    :               shift and go to state 326
    ,               shift and go to state 215


state 262

    (55) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (53) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 55 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 194


state 263

    (8) postfix_expression -> postfix_expression [ expression . ]
    (218) expression -> expression . , assignment_expression

    ]               shift and go to state 327
    ,               shift and go to state 215


state 264

    (9) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    INC_DEC         reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ASSIGN_OP       reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    SHIFT_OP        reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    GE_LE           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    EQ_NE           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)


state 265

    (10) postfix_expression -> postfix_expression ( argument_expression_list . )
    (17) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 328
    ,               shift and go to state 329


state 266

    (16) argument_expression_list -> assignment_expression .

    )               reduce using rule 16 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 16 (argument_expression_list -> assignment_expression .)


state 267

    (11) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_DEC         reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ASSIGN_OP       reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SHIFT_OP        reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_LE           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_NE           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    }               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 268

    (12) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    [               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    (               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    .               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_DEC         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    =               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ASSIGN_OP       reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    *               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    /               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    %               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    +               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    -               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SHIFT_OP        reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    <               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    >               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_LE           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_NE           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    &               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ^               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    |               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ?               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ;               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ,               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ]               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    }               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    )               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    :               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 269

    (14) postfix_expression -> ( type_name . ) { initializer_list }
    (15) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 330


state 270

    (30) cast_expression -> ( type_name . ) cast_expression
    (14) postfix_expression -> ( type_name . ) { initializer_list }
    (15) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 331


state 271

    (22) unary_expression -> SIZEOF ( type_name . )
    (14) postfix_expression -> ( type_name . ) { initializer_list }
    (15) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 332


state 272

    (14) postfix_expression -> ( type_name ) . { initializer_list }
    (15) postfix_expression -> ( type_name ) . { initializer_list , }
    (30) cast_expression -> ( type_name ) . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    {               shift and go to state 333
    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 334
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 273

    (6) primary_expression -> ( expression ) .

    [               reduce using rule 6 (primary_expression -> ( expression ) .)
    (               reduce using rule 6 (primary_expression -> ( expression ) .)
    .               reduce using rule 6 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    INC_DEC         reduce using rule 6 (primary_expression -> ( expression ) .)
    =               reduce using rule 6 (primary_expression -> ( expression ) .)
    ASSIGN_OP       reduce using rule 6 (primary_expression -> ( expression ) .)
    *               reduce using rule 6 (primary_expression -> ( expression ) .)
    /               reduce using rule 6 (primary_expression -> ( expression ) .)
    %               reduce using rule 6 (primary_expression -> ( expression ) .)
    +               reduce using rule 6 (primary_expression -> ( expression ) .)
    -               reduce using rule 6 (primary_expression -> ( expression ) .)
    SHIFT_OP        reduce using rule 6 (primary_expression -> ( expression ) .)
    <               reduce using rule 6 (primary_expression -> ( expression ) .)
    >               reduce using rule 6 (primary_expression -> ( expression ) .)
    GE_LE           reduce using rule 6 (primary_expression -> ( expression ) .)
    EQ_NE           reduce using rule 6 (primary_expression -> ( expression ) .)
    &               reduce using rule 6 (primary_expression -> ( expression ) .)
    ^               reduce using rule 6 (primary_expression -> ( expression ) .)
    |               reduce using rule 6 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    ?               reduce using rule 6 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    ;               reduce using rule 6 (primary_expression -> ( expression ) .)
    ,               reduce using rule 6 (primary_expression -> ( expression ) .)
    ]               reduce using rule 6 (primary_expression -> ( expression ) .)
    }               reduce using rule 6 (primary_expression -> ( expression ) .)
    )               reduce using rule 6 (primary_expression -> ( expression ) .)
    :               reduce using rule 6 (primary_expression -> ( expression ) .)


state 274

    (153) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 153 (type_name -> specifier_qualifier_list abstract_declarator .)


state 275

    (154) abstract_declarator -> pointer .
    (156) abstract_declarator -> pointer . direct_abstract_declarator
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 154 (abstract_declarator -> pointer .)
    (               shift and go to state 276
    [               shift and go to state 242

    direct_abstract_declarator     shift and go to state 310

state 276

    (157) direct_abstract_declarator -> ( . abstract_declarator )
    (164) direct_abstract_declarator -> ( . )
    (165) direct_abstract_declarator -> ( . parameter_type_list )
    (154) abstract_declarator -> . pointer
    (155) abstract_declarator -> . direct_abstract_declarator
    (156) abstract_declarator -> . pointer direct_abstract_declarator
    (143) parameter_type_list -> . parameter_list
    (144) parameter_type_list -> . parameter_list , ELLIPSIS
    (137) pointer -> . *
    (138) pointer -> . * type_qualifier_list
    (139) pointer -> . * pointer
    (140) pointer -> . * type_qualifier_list pointer
    (157) direct_abstract_declarator -> . ( abstract_declarator )
    (158) direct_abstract_declarator -> . [ ]
    (159) direct_abstract_declarator -> . [ assignment_expression ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (162) direct_abstract_declarator -> . [ * ]
    (163) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (164) direct_abstract_declarator -> . ( )
    (165) direct_abstract_declarator -> . ( parameter_type_list )
    (166) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (167) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (145) parameter_list -> . parameter_declaration
    (146) parameter_list -> . parameter_list , parameter_declaration
    (147) parameter_declaration -> . declaration_specifiers declarator
    (148) parameter_declaration -> . declaration_specifiers abstract_declarator
    (149) parameter_declaration -> . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    )               shift and go to state 313
    *               shift and go to state 42
    (               shift and go to state 276
    [               shift and go to state 242
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    pointer                        shift and go to state 275
    direct_abstract_declarator     shift and go to state 240
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 277

    (53) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (51) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 53 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 195


state 278

    (51) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (49) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 51 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 196


state 279

    (49) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (47) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 49 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 197


state 280

    (47) and_expression -> and_expression & equality_expression .
    (45) equality_expression -> equality_expression . EQ_NE relational_expression

    &               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 47 (and_expression -> and_expression & equality_expression .)
    EQ_NE           shift and go to state 198


state 281

    (45) equality_expression -> equality_expression EQ_NE relational_expression .
    (41) relational_expression -> relational_expression . < shift_expression
    (42) relational_expression -> relational_expression . > shift_expression
    (43) relational_expression -> relational_expression . GE_LE shift_expression

    EQ_NE           reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    &               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ^               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    |               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    AND_OP          reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ?               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    OR_OP           reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ;               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ,               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ]               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    }               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    )               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    :               reduce using rule 45 (equality_expression -> equality_expression EQ_NE relational_expression .)
    <               shift and go to state 199
    >               shift and go to state 200
    GE_LE           shift and go to state 201


state 282

    (41) relational_expression -> relational_expression < shift_expression .
    (39) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    GE_LE           reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    EQ_NE           reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 41 (relational_expression -> relational_expression < shift_expression .)
    SHIFT_OP        shift and go to state 202


state 283

    (42) relational_expression -> relational_expression > shift_expression .
    (39) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    GE_LE           reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    EQ_NE           reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 42 (relational_expression -> relational_expression > shift_expression .)
    SHIFT_OP        shift and go to state 202


state 284

    (43) relational_expression -> relational_expression GE_LE shift_expression .
    (39) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    >               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    GE_LE           reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    EQ_NE           reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    &               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    ^               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    |               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    ?               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    ;               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    ,               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    ]               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    }               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    )               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    :               reduce using rule 43 (relational_expression -> relational_expression GE_LE shift_expression .)
    SHIFT_OP        shift and go to state 202


state 285

    (39) shift_expression -> shift_expression SHIFT_OP additive_expression .
    (36) additive_expression -> additive_expression . + multiplicative_expression
    (37) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_OP        reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    <               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    >               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    GE_LE           reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    EQ_NE           reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    &               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ^               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    |               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    AND_OP          reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ?               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    OR_OP           reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ;               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ,               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ]               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    }               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    )               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    :               reduce using rule 39 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    +               shift and go to state 203
    -               shift and go to state 204


state 286

    (36) additive_expression -> additive_expression + multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_OP        reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_LE           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_NE           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 287

    (37) additive_expression -> additive_expression - multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_OP        reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_LE           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_NE           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 288

    (32) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_OP        reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_LE           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_NE           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 289

    (33) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_OP        reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_LE           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_NE           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 290

    (34) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_OP        reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_LE           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_NE           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 291

    (186) labeled_statement -> IDENTIFIER : statement .

    }               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    IDENTIFIER      reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    CASE            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    DEFAULT         reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    {               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    ;               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    IF              reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    SWITCH          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    WHILE           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    DO              reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    FOR             reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    GOTO            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    CONTINUE        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    BREAK           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    RETURN          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    TYPEDEF         reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    EXTERN          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    STATIC          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    AUTO            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    REGISTER        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    VOID            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    CHAR            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    SHORT           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    INT             reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    LONG            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    FLOAT           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    DOUBLE          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    SIGNED          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    UNSIGNED        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    BOOL            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    CONST           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    RESTRICT        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    VOLATILE        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    INLINE          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    ENUM            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    STRUCT          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    UNION           reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    INC_DEC         reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    SIZEOF          reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    (               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    &               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    *               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    +               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    -               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    ~               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    !               reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    CONSTANT        reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    STRING_LITERAL  reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)
    ELSE            reduce using rule 186 (labeled_statement -> IDENTIFIER : statement .)


state 292

    (187) labeled_statement -> CASE constant_expression : . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 335
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 293

    (188) labeled_statement -> DEFAULT : statement .

    }               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    CASE            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    GOTO            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    EXTERN          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    STATIC          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    AUTO            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    REGISTER        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    VOID            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    CHAR            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    SHORT           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    INT             reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    LONG            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    FLOAT           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    DOUBLE          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    SIGNED          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    BOOL            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    CONST           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    RESTRICT        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    VOLATILE        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    INLINE          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    ENUM            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    STRUCT          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    UNION           reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    INC_DEC         reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    ~               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    CONSTANT        reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 188 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 188 (labeled_statement -> DEFAULT : statement .)


state 294

    (218) expression -> expression , assignment_expression .

    ;               reduce using rule 218 (expression -> expression , assignment_expression .)
    ,               reduce using rule 218 (expression -> expression , assignment_expression .)
    )               reduce using rule 218 (expression -> expression , assignment_expression .)
    :               reduce using rule 218 (expression -> expression , assignment_expression .)
    ]               reduce using rule 218 (expression -> expression , assignment_expression .)


state 295

    (197) selection_statement -> IF ( expression . ) statement ELSE statement
    (198) selection_statement -> IF ( expression . ) statement
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 336
    ,               shift and go to state 215


state 296

    (199) selection_statement -> SWITCH ( expression . ) statement
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 337
    ,               shift and go to state 215


state 297

    (200) iteration_statement -> WHILE ( expression . ) statement
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 338
    ,               shift and go to state 215


state 298

    (201) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 339


state 299

    (202) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (203) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 340
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 300

    (204) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (205) iteration_statement -> FOR ( declaration . expression_statement expression ) statement
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 341
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 301

    (206) jump_statement -> GOTO IDENTIFIER ; .

    }               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    {               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    TYPEDEF         reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    EXTERN          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    STATIC          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    AUTO            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    REGISTER        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    VOID            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    CHAR            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    SHORT           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    INT             reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    LONG            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    FLOAT           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    DOUBLE          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    SIGNED          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    UNSIGNED        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    BOOL            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    CONST           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    RESTRICT        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    VOLATILE        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    INLINE          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    ENUM            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    STRUCT          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    UNION           reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    INC_DEC         reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    (               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    &               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    *               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    +               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    -               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    !               reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 206 (jump_statement -> GOTO IDENTIFIER ; .)


state 302

    (210) jump_statement -> RETURN expression ; .

    }               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 210 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 210 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 210 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 210 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 210 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    TYPEDEF         reduce using rule 210 (jump_statement -> RETURN expression ; .)
    EXTERN          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    STATIC          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    AUTO            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    REGISTER        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 210 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    BOOL            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    CONST           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    RESTRICT        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    VOLATILE        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    INLINE          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    ENUM            reduce using rule 210 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    UNION           reduce using rule 210 (jump_statement -> RETURN expression ; .)
    INC_DEC         reduce using rule 210 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 210 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 210 (jump_statement -> RETURN expression ; .)
    CONSTANT        reduce using rule 210 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 210 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 210 (jump_statement -> RETURN expression ; .)


state 303

    (126) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .

    [               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    (               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    =               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    {               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    )               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    :               reduce using rule 126 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)


state 304

    (130) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression . ]

    ]               shift and go to state 342


state 305

    (131) direct_declarator -> direct_declarator [ type_qualifier_list * ] .

    [               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    (               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    =               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    {               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    TYPEDEF         reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    EXTERN          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STATIC          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    AUTO            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    REGISTER        reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOID            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CHAR            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SHORT           reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INT             reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    LONG            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    FLOAT           reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    DOUBLE          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SIGNED          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNSIGNED        reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    BOOL            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CONST           reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    RESTRICT        reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOLATILE        reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INLINE          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ENUM            reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STRUCT          reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNION           reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ;               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ,               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    )               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    :               reduce using rule 131 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)


state 306

    (129) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression . ]

    ]               shift and go to state 343


state 307

    (151) identifier_list -> identifier_list , IDENTIFIER .

    )               reduce using rule 151 (identifier_list -> identifier_list , IDENTIFIER .)
    ,               reduce using rule 151 (identifier_list -> identifier_list , IDENTIFIER .)


state 308

    (144) parameter_type_list -> parameter_list , ELLIPSIS .

    )               reduce using rule 144 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 309

    (146) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 146 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 146 (parameter_list -> parameter_list , parameter_declaration .)


state 310

    (156) abstract_declarator -> pointer direct_abstract_declarator .
    (160) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (161) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (163) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (166) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (167) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 156 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 156 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 311
    (               shift and go to state 312


state 311

    (160) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (161) direct_abstract_declarator -> direct_abstract_declarator [ . assignment_expression ]
    (163) direct_abstract_declarator -> direct_abstract_declarator [ . * ]
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 344
    *               shift and go to state 346
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 345
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 312

    (166) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (167) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (143) parameter_type_list -> . parameter_list
    (144) parameter_type_list -> . parameter_list , ELLIPSIS
    (145) parameter_list -> . parameter_declaration
    (146) parameter_list -> . parameter_list , parameter_declaration
    (147) parameter_declaration -> . declaration_specifiers declarator
    (148) parameter_declaration -> . declaration_specifiers abstract_declarator
    (149) parameter_declaration -> . declaration_specifiers
    (63) declaration_specifiers -> . storage_class_specifier
    (64) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (65) declaration_specifiers -> . type_specifier
    (66) declaration_specifiers -> . type_specifier declaration_specifiers
    (67) declaration_specifiers -> . type_qualifier
    (68) declaration_specifiers -> . type_qualifier declaration_specifiers
    (69) declaration_specifiers -> . function_specifier
    (70) declaration_specifiers -> . function_specifier declaration_specifiers
    (75) storage_class_specifier -> . TYPEDEF
    (76) storage_class_specifier -> . EXTERN
    (77) storage_class_specifier -> . STATIC
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) type_specifier -> . VOID
    (81) type_specifier -> . CHAR
    (82) type_specifier -> . SHORT
    (83) type_specifier -> . INT
    (84) type_specifier -> . LONG
    (85) type_specifier -> . FLOAT
    (86) type_specifier -> . DOUBLE
    (87) type_specifier -> . SIGNED
    (88) type_specifier -> . UNSIGNED
    (89) type_specifier -> . BOOL
    (90) type_specifier -> . struct_or_union_specifier
    (91) type_specifier -> . enum_specifier
    (118) type_qualifier -> . CONST
    (119) type_qualifier -> . RESTRICT
    (120) type_qualifier -> . VOLATILE
    (121) function_specifier -> . INLINE
    (92) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (93) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (94) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (109) enum_specifier -> . ENUM { enumerator_list }
    (110) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (111) enum_specifier -> . ENUM { enumerator_list , }
    (112) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (113) enum_specifier -> . ENUM IDENTIFIER
    (95) struct_or_union -> . STRUCT
    (96) struct_or_union -> . UNION

    )               shift and go to state 347
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 348
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 313

    (164) direct_abstract_declarator -> ( ) .

    [               reduce using rule 164 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 164 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 164 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 164 (direct_abstract_declarator -> ( ) .)


state 314

    (157) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 349


state 315

    (165) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 350


state 316

    (158) direct_abstract_declarator -> [ ] .

    [               reduce using rule 158 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 158 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 158 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 158 (direct_abstract_declarator -> [ ] .)


state 317

    (159) direct_abstract_declarator -> [ assignment_expression . ]

    ]               shift and go to state 351


state 318

    (162) direct_abstract_declarator -> [ * . ]
    (24) unary_operator -> * .

    ]               shift and go to state 352
    (               reduce using rule 24 (unary_operator -> * .)
    INC_DEC         reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 319

    (105) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 105 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 105 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 320

    (108) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 108 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 108 (struct_declarator -> declarator : constant_expression .)


state 321

    (112) enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .

    TYPEDEF         reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    EXTERN          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STATIC          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    AUTO            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    REGISTER        reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOID            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CHAR            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SHORT           reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INT             reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    LONG            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    FLOAT           reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    DOUBLE          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SIGNED          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNSIGNED        reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    BOOL            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CONST           reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    RESTRICT        reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOLATILE        reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INLINE          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ENUM            reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STRUCT          reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNION           reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ;               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    *               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    IDENTIFIER      reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    (               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    [               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ,               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    )               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    :               reduce using rule 112 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)


state 322

    (170) initializer -> { initializer_list , } .

    ;               reduce using rule 170 (initializer -> { initializer_list , } .)
    ,               reduce using rule 170 (initializer -> { initializer_list , } .)
    }               reduce using rule 170 (initializer -> { initializer_list , } .)


state 323

    (173) initializer_list -> initializer_list , initializer .

    }               reduce using rule 173 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 173 (initializer_list -> initializer_list , initializer .)


state 324

    (174) initializer_list -> initializer_list , designation . initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 353
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 325

    (178) designator -> [ constant_expression ] .

    =               reduce using rule 178 (designator -> [ constant_expression ] .)
    [               reduce using rule 178 (designator -> [ constant_expression ] .)
    .               reduce using rule 178 (designator -> [ constant_expression ] .)


state 326

    (57) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_or_expression          shift and go to state 86
    conditional_expression         shift and go to state 354
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 327

    (8) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    INC_DEC         reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ASSIGN_OP       reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    SHIFT_OP        reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    GE_LE           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_NE           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)


state 328

    (10) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_DEC         reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ASSIGN_OP       reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SHIFT_OP        reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_LE           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_NE           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 329

    (17) argument_expression_list -> argument_expression_list , . assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 355
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 330

    (14) postfix_expression -> ( type_name ) . { initializer_list }
    (15) postfix_expression -> ( type_name ) . { initializer_list , }

    {               shift and go to state 333


state 331

    (30) cast_expression -> ( type_name ) . cast_expression
    (14) postfix_expression -> ( type_name ) . { initializer_list }
    (15) postfix_expression -> ( type_name ) . { initializer_list , }
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    {               shift and go to state 333
    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 334
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 332

    (22) unary_expression -> SIZEOF ( type_name ) .
    (14) postfix_expression -> ( type_name ) . { initializer_list }
    (15) postfix_expression -> ( type_name ) . { initializer_list , }

    =               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ASSIGN_OP       reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    SHIFT_OP        reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    GE_LE           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_NE           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    {               shift and go to state 333


state 333

    (14) postfix_expression -> ( type_name ) { . initializer_list }
    (15) postfix_expression -> ( type_name ) { . initializer_list , }
    (171) initializer_list -> . initializer
    (172) initializer_list -> . designation initializer
    (173) initializer_list -> . initializer_list , initializer
    (174) initializer_list -> . initializer_list , designation initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (175) designation -> . designator_list =
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (176) designator_list -> . designator
    (177) designator_list -> . designator_list designator
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (178) designator -> . [ constant_expression ]
    (179) designator -> . . IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer_list               shift and go to state 356
    initializer                    shift and go to state 168
    designation                    shift and go to state 169
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 334

    (30) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    SHIFT_OP        reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    GE_LE           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    EQ_NE           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ASSIGN_OP       reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)


state 335

    (187) labeled_statement -> CASE constant_expression : statement .

    }               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    CASE            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    GOTO            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    STATIC          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    AUTO            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    VOID            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    CHAR            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    SHORT           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    INT             reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    LONG            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    BOOL            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    CONST           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    INLINE          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    ENUM            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    UNION           reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    INC_DEC         reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    ~               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    CONSTANT        reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 187 (labeled_statement -> CASE constant_expression : statement .)


state 336

    (197) selection_statement -> IF ( expression ) . statement ELSE statement
    (198) selection_statement -> IF ( expression ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 357
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 337

    (199) selection_statement -> SWITCH ( expression ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 358
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 338

    (200) iteration_statement -> WHILE ( expression ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 359
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 339

    (201) iteration_statement -> DO statement WHILE ( . expression ) ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 360
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 340

    (202) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (203) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 361
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 362
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 341

    (204) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (205) iteration_statement -> FOR ( declaration expression_statement . expression ) statement
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 363
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 364
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 342

    (130) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .

    [               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    (               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    =               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    {               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    TYPEDEF         reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    EXTERN          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STATIC          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    AUTO            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    REGISTER        reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOID            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CHAR            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SHORT           reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INT             reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    LONG            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    FLOAT           reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    DOUBLE          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SIGNED          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNSIGNED        reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    BOOL            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CONST           reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    RESTRICT        reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOLATILE        reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INLINE          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ENUM            reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STRUCT          reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNION           reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ;               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ,               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    )               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    :               reduce using rule 130 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)


state 343

    (129) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .

    [               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    (               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    =               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    {               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    )               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    :               reduce using rule 129 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)


state 344

    (160) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 345

    (161) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression . ]

    ]               shift and go to state 365


state 346

    (163) direct_abstract_declarator -> direct_abstract_declarator [ * . ]
    (24) unary_operator -> * .

    ]               shift and go to state 366
    (               reduce using rule 24 (unary_operator -> * .)
    INC_DEC         reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 347

    (166) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 348

    (167) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 367


state 349

    (157) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 157 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 157 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 157 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 157 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 350

    (165) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 165 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 165 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 165 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 165 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 351

    (159) direct_abstract_declarator -> [ assignment_expression ] .

    [               reduce using rule 159 (direct_abstract_declarator -> [ assignment_expression ] .)
    (               reduce using rule 159 (direct_abstract_declarator -> [ assignment_expression ] .)
    ,               reduce using rule 159 (direct_abstract_declarator -> [ assignment_expression ] .)
    )               reduce using rule 159 (direct_abstract_declarator -> [ assignment_expression ] .)


state 352

    (162) direct_abstract_declarator -> [ * ] .

    [               reduce using rule 162 (direct_abstract_declarator -> [ * ] .)
    (               reduce using rule 162 (direct_abstract_declarator -> [ * ] .)
    ,               reduce using rule 162 (direct_abstract_declarator -> [ * ] .)
    )               reduce using rule 162 (direct_abstract_declarator -> [ * ] .)


state 353

    (174) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 174 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 174 (initializer_list -> initializer_list , designation initializer .)


state 354

    (57) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 57 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 355

    (17) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 17 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 17 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 356

    (14) postfix_expression -> ( type_name ) { initializer_list . }
    (15) postfix_expression -> ( type_name ) { initializer_list . , }
    (173) initializer_list -> initializer_list . , initializer
    (174) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 368
    ,               shift and go to state 369


state 357

    (197) selection_statement -> IF ( expression ) statement . ELSE statement
    (198) selection_statement -> IF ( expression ) statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 370
    }               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    GOTO            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    TYPEDEF         reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    EXTERN          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    STATIC          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    AUTO            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    REGISTER        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    CONST           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    RESTRICT        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    VOLATILE        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    INLINE          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    ENUM            reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    UNION           reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    INC_DEC         reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 198 (selection_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 198 (selection_statement -> IF ( expression ) statement .)

  ! ELSE            [ reduce using rule 198 (selection_statement -> IF ( expression ) statement .) ]


state 358

    (199) selection_statement -> SWITCH ( expression ) statement .

    }               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    IDENTIFIER      reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    CASE            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    DEFAULT         reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    {               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    ;               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    IF              reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    SWITCH          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    WHILE           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    DO              reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    FOR             reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    GOTO            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    CONTINUE        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    BREAK           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    RETURN          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    TYPEDEF         reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    EXTERN          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    STATIC          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    AUTO            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    REGISTER        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    VOID            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    CHAR            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    SHORT           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    INT             reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    LONG            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    FLOAT           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    DOUBLE          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    SIGNED          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    UNSIGNED        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    BOOL            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    CONST           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    RESTRICT        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    VOLATILE        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    INLINE          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    ENUM            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    STRUCT          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    UNION           reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    INC_DEC         reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    SIZEOF          reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    (               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    &               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    *               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    +               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    -               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    ~               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    !               reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    CONSTANT        reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    STRING_LITERAL  reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)
    ELSE            reduce using rule 199 (selection_statement -> SWITCH ( expression ) statement .)


state 359

    (200) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    GOTO            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    TYPEDEF         reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    EXTERN          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    STATIC          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    AUTO            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    REGISTER        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    CONST           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    RESTRICT        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    VOLATILE        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    INLINE          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    ENUM            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    UNION           reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    INC_DEC         reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 200 (iteration_statement -> WHILE ( expression ) statement .)


state 360

    (201) iteration_statement -> DO statement WHILE ( expression . ) ;
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 371
    ,               shift and go to state 215


state 361

    (202) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    statement                      shift and go to state 372
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 362

    (203) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 373
    ,               shift and go to state 215


state 363

    (204) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    statement                      shift and go to state 374
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 364

    (205) iteration_statement -> FOR ( declaration expression_statement expression . ) statement
    (218) expression -> expression . , assignment_expression

    )               shift and go to state 375
    ,               shift and go to state 215


state 365

    (161) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .

    [               reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    (               reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    ,               reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    )               reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)


state 366

    (163) direct_abstract_declarator -> direct_abstract_declarator [ * ] .

    [               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    (               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    ,               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    )               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)


state 367

    (167) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 368

    (14) postfix_expression -> ( type_name ) { initializer_list } .

    [               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    (               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    .               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    PTR_OP          reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    INC_DEC         reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    =               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ASSIGN_OP       reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    *               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    /               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    %               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    +               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    -               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    SHIFT_OP        reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    <               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    >               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    GE_LE           reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    EQ_NE           reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    &               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ^               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    |               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_OP          reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ?               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_OP           reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ;               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ,               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    ]               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    }               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    )               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)
    :               reduce using rule 14 (postfix_expression -> ( type_name ) { initializer_list } .)


state 369

    (15) postfix_expression -> ( type_name ) { initializer_list , . }
    (173) initializer_list -> initializer_list , . initializer
    (174) initializer_list -> initializer_list , . designation initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . { initializer_list }
    (170) initializer -> . { initializer_list , }
    (175) designation -> . designator_list =
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (176) designator_list -> . designator
    (177) designator_list -> . designator_list designator
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (178) designator -> . [ constant_expression ]
    (179) designator -> . . IDENTIFIER
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 376
    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 323
    designation                    shift and go to state 324
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 370

    (197) selection_statement -> IF ( expression ) statement ELSE . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 377
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 371

    (201) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 378


state 372

    (202) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IDENTIFIER      reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    TYPEDEF         reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    EXTERN          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STATIC          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    AUTO            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    REGISTER        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SHORT           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    LONG            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FLOAT           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DOUBLE          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIGNED          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNSIGNED        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONST           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RESTRICT        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOLATILE        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INLINE          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ENUM            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNION           reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_DEC         reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANT        reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 202 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 373

    (203) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    expression                     shift and go to state 127
    statement                      shift and go to state 379
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 374

    (204) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IDENTIFIER      reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CASE            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEFAULT         reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SWITCH          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    GOTO            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONTINUE        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BREAK           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RETURN          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    TYPEDEF         reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    EXTERN          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STATIC          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    AUTO            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    REGISTER        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SHORT           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    LONG            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FLOAT           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DOUBLE          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIGNED          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNSIGNED        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONST           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RESTRICT        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOLATILE        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INLINE          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ENUM            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNION           reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC_DEC         reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONSTANT        reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 204 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 375

    (205) iteration_statement -> FOR ( declaration expression_statement expression ) . statement
    (180) statement -> . labeled_statement
    (181) statement -> . compound_statement
    (182) statement -> . expression_statement
    (183) statement -> . selection_statement
    (184) statement -> . iteration_statement
    (185) statement -> . jump_statement
    (186) labeled_statement -> . IDENTIFIER : statement
    (187) labeled_statement -> . CASE constant_expression : statement
    (188) labeled_statement -> . DEFAULT : statement
    (189) compound_statement -> . { }
    (190) compound_statement -> . { block_item_list }
    (195) expression_statement -> . ;
    (196) expression_statement -> . expression ;
    (197) selection_statement -> . IF ( expression ) statement ELSE statement
    (198) selection_statement -> . IF ( expression ) statement
    (199) selection_statement -> . SWITCH ( expression ) statement
    (200) iteration_statement -> . WHILE ( expression ) statement
    (201) iteration_statement -> . DO statement WHILE ( expression ) ;
    (202) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (203) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (204) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (205) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (206) jump_statement -> . GOTO IDENTIFIER ;
    (207) jump_statement -> . CONTINUE ;
    (208) jump_statement -> . BREAK ;
    (209) jump_statement -> . RETURN ;
    (210) jump_statement -> . RETURN expression ;
    (217) expression -> . assignment_expression
    (218) expression -> . expression , assignment_expression
    (219) assignment_expression -> . conditional_expression
    (220) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (56) conditional_expression -> . logical_or_expression
    (57) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . INC_DEC unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (54) logical_or_expression -> . logical_and_expression
    (55) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_DEC
    (14) postfix_expression -> . ( type_name ) { initializer_list }
    (15) postfix_expression -> . ( type_name ) { initializer_list , }
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (52) logical_and_expression -> . inclusive_or_expression
    (53) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (50) inclusive_or_expression -> . exclusive_or_expression
    (51) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (48) exclusive_or_expression -> . and_expression
    (49) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression & equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_NE relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression < shift_expression
    (42) relational_expression -> . relational_expression > shift_expression
    (43) relational_expression -> . relational_expression GE_LE shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    expression                     shift and go to state 127
    statement                      shift and go to state 380
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 376

    (15) postfix_expression -> ( type_name ) { initializer_list , } .

    [               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    (               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    .               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    PTR_OP          reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INC_DEC         reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    =               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ASSIGN_OP       reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    *               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    /               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    %               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    +               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    -               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SHIFT_OP        reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    <               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    >               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    GE_LE           reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    EQ_NE           reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    &               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ^               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    |               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_OP          reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ?               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_OP           reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ;               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ,               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ]               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    }               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    )               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)
    :               reduce using rule 15 (postfix_expression -> ( type_name ) { initializer_list , } .)


state 377

    (197) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CASE            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    GOTO            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TYPEDEF         reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    EXTERN          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STATIC          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    AUTO            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    REGISTER        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONST           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RESTRICT        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOLATILE        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INLINE          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ENUM            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNION           reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_DEC         reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 197 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 378

    (201) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    GOTO            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    TYPEDEF         reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    EXTERN          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STATIC          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    AUTO            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    REGISTER        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIGNED          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNSIGNED        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONST           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RESTRICT        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOLATILE        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INLINE          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ENUM            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNION           reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_DEC         reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANT        reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 201 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 379

    (203) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CASE            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEFAULT         reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SWITCH          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    GOTO            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    EXTERN          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STATIC          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    AUTO            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    REGISTER        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOID            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SHORT           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT             reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    LONG            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FLOAT           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DOUBLE          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIGNED          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONST           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RESTRICT        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOLATILE        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INLINE          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ENUM            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRUCT          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNION           reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_DEC         reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 203 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 380

    (205) iteration_statement -> FOR ( declaration expression_statement expression ) statement .

    }               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CASE            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEFAULT         reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    {               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ;               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IF              reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SWITCH          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    WHILE           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DO              reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FOR             reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    GOTO            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONTINUE        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BREAK           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RETURN          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    EXTERN          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STATIC          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    AUTO            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    REGISTER        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOID            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SHORT           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT             reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    LONG            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FLOAT           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DOUBLE          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIGNED          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONST           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RESTRICT        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOLATILE        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INLINE          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ENUM            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRUCT          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNION           reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INC_DEC         reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIZEOF          reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    (               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    &               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    *               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    +               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    -               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ~               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    !               reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONSTANT        reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ELSE            reduce using rule 205 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 357 resolved as shift
