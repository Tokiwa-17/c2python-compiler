Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     declaration -> declaration_specifiers ;
Rule 6     declaration -> declaration_specifiers init_declarator_list ;
Rule 7     init_declarator_list -> init_declarator
Rule 8     init_declarator_list -> init_declarator_list , init_declarator
Rule 9     init_declarator -> declarator
Rule 10    init_declarator -> declarator = initializer
Rule 11    declaration_specifiers -> storage_class_specifier
Rule 12    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 13    declaration_specifiers -> type_specifier
Rule 14    declaration_specifiers -> type_specifier declaration_specifiers
Rule 15    declaration_specifiers -> type_qualifier
Rule 16    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 17    declaration_specifiers -> function_specifier
Rule 18    declaration_specifiers -> function_specifier declaration_specifiers
Rule 19    storage_class_specifier -> TYPEDEF
Rule 20    storage_class_specifier -> EXTERN
Rule 21    storage_class_specifier -> STATIC
Rule 22    storage_class_specifier -> AUTO
Rule 23    storage_class_specifier -> REGISTER
Rule 24    function_specifier -> INLINE
Rule 25    type_specifier -> VOID
Rule 26    type_specifier -> CHAR
Rule 27    type_specifier -> SHORT
Rule 28    type_specifier -> INT
Rule 29    type_specifier -> LONG
Rule 30    type_specifier -> FLOAT
Rule 31    type_specifier -> DOUBLE
Rule 32    type_specifier -> SIGNED
Rule 33    type_specifier -> UNSIGNED
Rule 34    type_specifier -> BOOL
Rule 35    type_specifier -> struct_or_union_specifier
Rule 36    type_specifier -> enum_specifier
Rule 37    type_qualifier -> CONST
Rule 38    type_qualifier -> RESTRICT
Rule 39    type_qualifier -> VOLATILE
Rule 40    enum_specifier -> ENUM { enumerator_list }
Rule 41    enum_specifier -> ENUM IDENTIFIER { enumerator_list }
Rule 42    enum_specifier -> ENUM { enumerator_list , }
Rule 43    enum_specifier -> ENUM IDENTIFIER { enumerator_list , }
Rule 44    enum_specifier -> ENUM IDENTIFIER
Rule 45    enumerator_list -> enumerator
Rule 46    enumerator_list -> enumerator_list , enumerator
Rule 47    enumerator -> IDENTIFIER
Rule 48    enumerator -> IDENTIFIER = constant_expression
Rule 49    struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }
Rule 50    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 51    struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 52    struct_or_union -> STRUCT
Rule 53    struct_or_union -> UNION
Rule 54    struct_declaration_list -> struct_declaration
Rule 55    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 56    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 57    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 58    specifier_qualifier_list -> type_specifier
Rule 59    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 60    specifier_qualifier_list -> type_qualifier
Rule 61    struct_declarator_list -> struct_declarator
Rule 62    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 63    struct_declarator -> declarator
Rule 64    struct_declarator -> : constant_expression
Rule 65    struct_declarator -> declarator : constant_expression
Rule 66    declarator -> pointer direct_declarator
Rule 67    declarator -> direct_declarator
Rule 68    pointer -> *
Rule 69    pointer -> * type_qualifier_list
Rule 70    pointer -> * pointer
Rule 71    pointer -> * type_qualifier_list pointer
Rule 72    type_qualifier_list -> type_qualifier
Rule 73    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 74    direct_declarator -> IDENTIFIER
Rule 75    direct_declarator -> ( declarator )
Rule 76    direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]
Rule 77    direct_declarator -> direct_declarator [ type_qualifier_list ]
Rule 78    direct_declarator -> direct_declarator [ assignment_expression ]
Rule 79    direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]
Rule 80    direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]
Rule 81    direct_declarator -> direct_declarator [ type_qualifier_list * ]
Rule 82    direct_declarator -> direct_declarator [ * ]
Rule 83    direct_declarator -> direct_declarator [ ]
Rule 84    direct_declarator -> direct_declarator ( parameter_type_list )
Rule 85    direct_declarator -> direct_declarator ( identifier_list )
Rule 86    direct_declarator -> direct_declarator ( )
Rule 87    identifier_list -> IDENTIFIER
Rule 88    identifier_list -> identifier_list , IDENTIFIER
Rule 89    assignment_expression -> conditional_expression
Rule 90    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 91    assignment_operator -> =
Rule 92    assignment_operator -> ASSIGN_OP
Rule 93    constant_expression -> conditional_expression
Rule 94    conditional_expression -> logical_or_expression
Rule 95    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 96    logical_or_expression -> logical_and_expression
Rule 97    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 98    logical_and_expression -> inclusive_or_expression
Rule 99    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 100   inclusive_or_expression -> exclusive_or_expression
Rule 101   inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 102   exclusive_or_expression -> and_expression
Rule 103   exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 104   and_expression -> equality_expression
Rule 105   and_expression -> and_expression & equality_expression
Rule 106   equality_expression -> relational_expression
Rule 107   equality_expression -> equality_expression EQ_NE relational_expression
Rule 108   relational_expression -> shift_expression
Rule 109   relational_expression -> relational_expression < shift_expression
Rule 110   relational_expression -> relational_expression > shift_expression
Rule 111   relational_expression -> relational_expression GE_LE shift_expression
Rule 112   shift_expression -> additive_expression
Rule 113   shift_expression -> shift_expression SHIFT_OP additive_expression
Rule 114   additive_expression -> multiplicative_expression
Rule 115   additive_expression -> additive_expression + multiplicative_expression
Rule 116   additive_expression -> additive_expression - multiplicative_expression
Rule 117   multiplicative_expression -> cast_expression
Rule 118   multiplicative_expression -> multiplicative_expression * cast_expression
Rule 119   multiplicative_expression -> multiplicative_expression / cast_expression
Rule 120   multiplicative_expression -> multiplicative_expression % cast_expression
Rule 121   cast_expression -> unary_expression
Rule 122   cast_expression -> ( type_name ) cast_expression
Rule 123   unary_expression -> postfix_expression
Rule 124   unary_expression -> INC_DEC unary_expression
Rule 125   unary_expression -> unary_operator cast_expression
Rule 126   unary_expression -> SIZEOF unary_expression
Rule 127   unary_expression -> SIZEOF ( type_name )
Rule 128   unary_operator -> &
Rule 129   unary_operator -> *
Rule 130   unary_operator -> +
Rule 131   unary_operator -> -
Rule 132   unary_operator -> ~
Rule 133   unary_operator -> !
Rule 134   postfix_expression -> primary_expression
Rule 135   postfix_expression -> postfix_expression [ expression ]
Rule 136   postfix_expression -> postfix_expression ( )
Rule 137   postfix_expression -> postfix_expression ( argument_expression_list )
Rule 138   postfix_expression -> postfix_expression . IDENTIFIER
Rule 139   postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 140   postfix_expression -> postfix_expression INC_DEC
Rule 141   postfix_expression -> ( type_name ) { initializer_list }
Rule 142   postfix_expression -> ( type_name ) { initializer_list , }
Rule 143   primary_expression -> IDENTIFIER
Rule 144   primary_expression -> CONSTANT
Rule 145   primary_expression -> STRING_LITERAL
Rule 146   primary_expression -> ( expression )
Rule 147   expression -> assignment_expression
Rule 148   expression -> expression , assignment_expression
Rule 149   type_name -> specifier_qualifier_list
Rule 150   type_name -> specifier_qualifier_list abstract_declarator
Rule 151   abstract_declarator -> pointer
Rule 152   abstract_declarator -> direct_abstract_declarator
Rule 153   abstract_declarator -> pointer direct_abstract_declarator
Rule 154   direct_abstract_declarator -> ( abstract_declarator )
Rule 155   direct_abstract_declarator -> [ ]
Rule 156   direct_abstract_declarator -> [ assignment_expression ]
Rule 157   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 158   direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]
Rule 159   direct_abstract_declarator -> [ * ]
Rule 160   direct_abstract_declarator -> direct_abstract_declarator [ * ]
Rule 161   direct_abstract_declarator -> ( )
Rule 162   direct_abstract_declarator -> ( parameter_type_list )
Rule 163   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 164   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 165   parameter_type_list -> parameter_list
Rule 166   parameter_type_list -> parameter_list , ELLIPSIS
Rule 167   parameter_list -> parameter_declaration
Rule 168   parameter_list -> parameter_list , parameter_declaration
Rule 169   parameter_declaration -> declaration_specifiers declarator
Rule 170   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 171   parameter_declaration -> declaration_specifiers
Rule 172   argument_expression_list -> assignment_expression
Rule 173   argument_expression_list -> argument_expression_list , assignment_expression
Rule 174   initializer_list -> initializer
Rule 175   initializer_list -> designation initializer
Rule 176   initializer_list -> initializer_list , initializer
Rule 177   initializer_list -> initializer_list , designation initializer
Rule 178   initializer -> assignment_expression
Rule 179   initializer -> { initializer_list }
Rule 180   initializer -> { initializer_list , }
Rule 181   designation -> designator_list =
Rule 182   designator_list -> designator
Rule 183   designator_list -> designator_list designator
Rule 184   designator -> [ constant_expression ]
Rule 185   designator -> . IDENTIFIER
Rule 186   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 187   function_definition -> declaration_specifiers declarator compound_statement
Rule 188   declaration_list -> declaration
Rule 189   declaration_list -> declaration_list declaration
Rule 190   compound_statement -> { }
Rule 191   compound_statement -> { block_item_list }
Rule 192   block_item_list -> block_item
Rule 193   block_item_list -> block_item_list block_item
Rule 194   block_item -> declaration
Rule 195   block_item -> statement
Rule 196   statement -> labeled_statement
Rule 197   statement -> compound_statement
Rule 198   statement -> expression_statement
Rule 199   statement -> selection_statement
Rule 200   statement -> iteration_statement
Rule 201   statement -> jump_statement
Rule 202   labeled_statement -> IDENTIFIER : statement
Rule 203   labeled_statement -> CASE constant_expression : statement
Rule 204   labeled_statement -> DEFAULT : statement
Rule 205   expression_statement -> ;
Rule 206   expression_statement -> expression ;
Rule 207   selection_statement -> IF ( expression ) statement ELSE statement
Rule 208   selection_statement -> IF ( expression ) statement
Rule 209   selection_statement -> SWITCH ( expression ) statement
Rule 210   iteration_statement -> WHILE ( expression ) statement
Rule 211   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 212   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 213   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 214   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 215   iteration_statement -> FOR ( declaration expression_statement expression ) statement
Rule 216   jump_statement -> GOTO IDENTIFIER ;
Rule 217   jump_statement -> CONTINUE ;
Rule 218   jump_statement -> BREAK ;
Rule 219   jump_statement -> RETURN ;
Rule 220   jump_statement -> RETURN expression ;

Terminals, with rules where they appear

!                    : 133
%                    : 120
&                    : 105 128
(                    : 75 84 85 86 122 127 136 137 141 142 146 154 161 162 163 164 207 208 209 210 211 212 213 214 215
)                    : 75 84 85 86 122 127 136 137 141 142 146 154 161 162 163 164 207 208 209 210 211 212 213 214 215
*                    : 68 69 70 71 81 82 118 129 159 160
+                    : 115 130
,                    : 8 42 43 46 62 88 142 148 166 168 173 176 177 180
-                    : 116 131
.                    : 138 185
/                    : 119
:                    : 64 65 95 202 203 204
;                    : 5 6 56 205 206 211 216 217 218 219 220
<                    : 109
=                    : 10 48 91 181
>                    : 110
?                    : 95
AND_OP               : 99
ASSIGN_OP            : 92
AUTO                 : 22
BOOL                 : 34
BREAK                : 218
CASE                 : 203
CHAR                 : 26
CONST                : 37
CONSTANT             : 144
CONTINUE             : 217
DEFAULT              : 204
DO                   : 211
DOUBLE               : 31
ELLIPSIS             : 166
ELSE                 : 207
ENUM                 : 40 41 42 43 44
EQ_NE                : 107
EXTERN               : 20
FLOAT                : 30
FOR                  : 212 213 214 215
GE_LE                : 111
GOTO                 : 216
IDENTIFIER           : 41 43 44 47 48 49 51 74 87 88 138 139 143 185 202 216
IF                   : 207 208
INC_DEC              : 124 140
INLINE               : 24
INT                  : 28
LONG                 : 29
OR_OP                : 97
PTR_OP               : 139
REGISTER             : 23
RESTRICT             : 38
RETURN               : 219 220
SHIFT_OP             : 113
SHORT                : 27
SIGNED               : 32
SIZEOF               : 126 127
STATIC               : 21 79 80
STRING_LITERAL       : 145
STRUCT               : 52
SWITCH               : 209
TYPEDEF              : 19
UNION                : 53
UNSIGNED             : 33
VOID                 : 25
VOLATILE             : 39
WHILE                : 210 211
[                    : 76 77 78 79 80 81 82 83 135 155 156 157 158 159 160 184
]                    : 76 77 78 79 80 81 82 83 135 155 156 157 158 159 160 184
^                    : 103
error                : 
{                    : 40 41 42 43 49 50 141 142 179 180 190 191
|                    : 101
}                    : 40 41 42 43 49 50 141 142 179 180 190 191
~                    : 132

Nonterminals, with rules where they appear

abstract_declarator  : 150 154 170
additive_expression  : 112 113 115 116
and_expression       : 102 103 105
argument_expression_list : 137 173
assignment_expression : 76 78 79 80 90 147 148 156 158 172 173 178
assignment_operator  : 90
block_item           : 192 193
block_item_list      : 191 193
cast_expression      : 117 118 119 120 122 125
compound_statement   : 186 187 197
conditional_expression : 89 93 95
constant_expression  : 48 64 65 184 203
declaration          : 4 188 189 194 214 215
declaration_list     : 186 189
declaration_specifiers : 5 6 12 14 16 18 169 170 171 186 187
declarator           : 9 10 63 65 75 169 186 187
designation          : 175 177
designator           : 182 183
designator_list      : 181 183
direct_abstract_declarator : 152 153 157 158 160 163 164
direct_declarator    : 66 67 76 77 78 79 80 81 82 83 84 85 86
enum_specifier       : 36
enumerator           : 45 46
enumerator_list      : 40 41 42 43 46
equality_expression  : 104 105 107
exclusive_or_expression : 100 101 103
expression           : 95 135 146 148 206 207 208 209 210 211 213 215 220
expression_statement : 198 212 212 213 213 214 215
external_declaration : 1 2
function_definition  : 3
function_specifier   : 17 18
identifier_list      : 85 88
inclusive_or_expression : 98 99 101
init_declarator      : 7 8
init_declarator_list : 6 8
initializer          : 10 174 175 176 177
initializer_list     : 141 142 176 177 179 180
iteration_statement  : 200
jump_statement       : 201
labeled_statement    : 196
logical_and_expression : 96 97 99
logical_or_expression : 94 95 97
multiplicative_expression : 114 115 116 118 119 120
parameter_declaration : 167 168
parameter_list       : 165 166 168
parameter_type_list  : 84 162 164
pointer              : 66 70 71 151 153
postfix_expression   : 123 135 136 137 138 139 140
primary_expression   : 134
relational_expression : 106 107 109 110 111
selection_statement  : 199
shift_expression     : 108 109 110 111 113
specifier_qualifier_list : 56 57 59 149 150
statement            : 195 202 203 204 207 207 208 209 210 211 212 213 214 215
storage_class_specifier : 11 12
struct_declaration   : 54 55
struct_declaration_list : 49 50 55
struct_declarator    : 61 62
struct_declarator_list : 56 62
struct_or_union      : 49 50 51
struct_or_union_specifier : 35
translation_unit     : 2 0
type_name            : 122 127 141 142
type_qualifier       : 15 16 59 60 72 73
type_qualifier_list  : 69 71 73 76 77 79 80 81
type_specifier       : 13 14 57 58
unary_expression     : 90 121 124 126
unary_operator       : 125

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (186) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (187) function_definition -> . declaration_specifiers declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (186) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (187) function_definition -> . declaration_specifiers declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    external_declaration           shift and go to state 35
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 2

    (1) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    AUTO            reduce using rule 3 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    BOOL            reduce using rule 3 (external_declaration -> function_definition .)
    CONST           reduce using rule 3 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 3 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (external_declaration -> function_definition .)
    INLINE          reduce using rule 3 (external_declaration -> function_definition .)
    ENUM            reduce using rule 3 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (external_declaration -> function_definition .)
    UNION           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    TYPEDEF         reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    AUTO            reduce using rule 4 (external_declaration -> declaration .)
    REGISTER        reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    BOOL            reduce using rule 4 (external_declaration -> declaration .)
    CONST           reduce using rule 4 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 4 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (external_declaration -> declaration .)
    INLINE          reduce using rule 4 (external_declaration -> declaration .)
    ENUM            reduce using rule 4 (external_declaration -> declaration .)
    STRUCT          reduce using rule 4 (external_declaration -> declaration .)
    UNION           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (186) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (187) function_definition -> declaration_specifiers . declarator compound_statement
    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 36
    init_declarator_list           shift and go to state 38
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40
    init_declarator                shift and go to state 41

state 6

    (11) declaration_specifiers -> storage_class_specifier .
    (12) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    *               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    (               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    ,               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    )               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    storage_class_specifier        shift and go to state 6
    declaration_specifiers         shift and go to state 45
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 7

    (13) declaration_specifiers -> type_specifier .
    (14) declaration_specifiers -> type_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 13 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 46
    storage_class_specifier        shift and go to state 6
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 8

    (15) declaration_specifiers -> type_qualifier .
    (16) declaration_specifiers -> type_qualifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    *               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    (               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    ,               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    )               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 9

    (17) declaration_specifiers -> function_specifier .
    (18) declaration_specifiers -> function_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    *               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 17 (declaration_specifiers -> function_specifier .)
    (               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    [               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    ,               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    )               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    function_specifier             shift and go to state 9
    declaration_specifiers         shift and go to state 48
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 10

    (19) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)


state 11

    (20) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 20 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 20 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 20 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 20 (storage_class_specifier -> EXTERN .)


state 12

    (21) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 21 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 21 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 21 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 21 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 21 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 21 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 21 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 21 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 21 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 21 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 21 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 21 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 21 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 21 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 21 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 21 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 21 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 21 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 21 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 21 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 21 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 21 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 21 (storage_class_specifier -> STATIC .)
    *               reduce using rule 21 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 21 (storage_class_specifier -> STATIC .)
    (               reduce using rule 21 (storage_class_specifier -> STATIC .)
    [               reduce using rule 21 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 21 (storage_class_specifier -> STATIC .)
    )               reduce using rule 21 (storage_class_specifier -> STATIC .)


state 13

    (22) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 22 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 22 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 22 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 22 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 22 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 22 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 22 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 22 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 22 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 22 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 22 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 22 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 22 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 22 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 22 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 22 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 22 (storage_class_specifier -> AUTO .)
    *               reduce using rule 22 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 22 (storage_class_specifier -> AUTO .)
    (               reduce using rule 22 (storage_class_specifier -> AUTO .)
    [               reduce using rule 22 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 22 (storage_class_specifier -> AUTO .)
    )               reduce using rule 22 (storage_class_specifier -> AUTO .)


state 14

    (23) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 23 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 23 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 23 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 23 (storage_class_specifier -> REGISTER .)


state 15

    (25) type_specifier -> VOID .

    TYPEDEF         reduce using rule 25 (type_specifier -> VOID .)
    EXTERN          reduce using rule 25 (type_specifier -> VOID .)
    STATIC          reduce using rule 25 (type_specifier -> VOID .)
    AUTO            reduce using rule 25 (type_specifier -> VOID .)
    REGISTER        reduce using rule 25 (type_specifier -> VOID .)
    VOID            reduce using rule 25 (type_specifier -> VOID .)
    CHAR            reduce using rule 25 (type_specifier -> VOID .)
    SHORT           reduce using rule 25 (type_specifier -> VOID .)
    INT             reduce using rule 25 (type_specifier -> VOID .)
    LONG            reduce using rule 25 (type_specifier -> VOID .)
    FLOAT           reduce using rule 25 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 25 (type_specifier -> VOID .)
    SIGNED          reduce using rule 25 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 25 (type_specifier -> VOID .)
    BOOL            reduce using rule 25 (type_specifier -> VOID .)
    CONST           reduce using rule 25 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 25 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 25 (type_specifier -> VOID .)
    INLINE          reduce using rule 25 (type_specifier -> VOID .)
    ENUM            reduce using rule 25 (type_specifier -> VOID .)
    STRUCT          reduce using rule 25 (type_specifier -> VOID .)
    UNION           reduce using rule 25 (type_specifier -> VOID .)
    ;               reduce using rule 25 (type_specifier -> VOID .)
    *               reduce using rule 25 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 25 (type_specifier -> VOID .)
    (               reduce using rule 25 (type_specifier -> VOID .)
    [               reduce using rule 25 (type_specifier -> VOID .)
    ,               reduce using rule 25 (type_specifier -> VOID .)
    )               reduce using rule 25 (type_specifier -> VOID .)
    :               reduce using rule 25 (type_specifier -> VOID .)


state 16

    (26) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 26 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 26 (type_specifier -> CHAR .)
    STATIC          reduce using rule 26 (type_specifier -> CHAR .)
    AUTO            reduce using rule 26 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 26 (type_specifier -> CHAR .)
    VOID            reduce using rule 26 (type_specifier -> CHAR .)
    CHAR            reduce using rule 26 (type_specifier -> CHAR .)
    SHORT           reduce using rule 26 (type_specifier -> CHAR .)
    INT             reduce using rule 26 (type_specifier -> CHAR .)
    LONG            reduce using rule 26 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 26 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 26 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 26 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 26 (type_specifier -> CHAR .)
    BOOL            reduce using rule 26 (type_specifier -> CHAR .)
    CONST           reduce using rule 26 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 26 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 26 (type_specifier -> CHAR .)
    INLINE          reduce using rule 26 (type_specifier -> CHAR .)
    ENUM            reduce using rule 26 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 26 (type_specifier -> CHAR .)
    UNION           reduce using rule 26 (type_specifier -> CHAR .)
    ;               reduce using rule 26 (type_specifier -> CHAR .)
    *               reduce using rule 26 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 26 (type_specifier -> CHAR .)
    (               reduce using rule 26 (type_specifier -> CHAR .)
    [               reduce using rule 26 (type_specifier -> CHAR .)
    ,               reduce using rule 26 (type_specifier -> CHAR .)
    )               reduce using rule 26 (type_specifier -> CHAR .)
    :               reduce using rule 26 (type_specifier -> CHAR .)


state 17

    (27) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 27 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 27 (type_specifier -> SHORT .)
    STATIC          reduce using rule 27 (type_specifier -> SHORT .)
    AUTO            reduce using rule 27 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 27 (type_specifier -> SHORT .)
    VOID            reduce using rule 27 (type_specifier -> SHORT .)
    CHAR            reduce using rule 27 (type_specifier -> SHORT .)
    SHORT           reduce using rule 27 (type_specifier -> SHORT .)
    INT             reduce using rule 27 (type_specifier -> SHORT .)
    LONG            reduce using rule 27 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 27 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 27 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 27 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 27 (type_specifier -> SHORT .)
    BOOL            reduce using rule 27 (type_specifier -> SHORT .)
    CONST           reduce using rule 27 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 27 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 27 (type_specifier -> SHORT .)
    INLINE          reduce using rule 27 (type_specifier -> SHORT .)
    ENUM            reduce using rule 27 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 27 (type_specifier -> SHORT .)
    UNION           reduce using rule 27 (type_specifier -> SHORT .)
    ;               reduce using rule 27 (type_specifier -> SHORT .)
    *               reduce using rule 27 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 27 (type_specifier -> SHORT .)
    (               reduce using rule 27 (type_specifier -> SHORT .)
    [               reduce using rule 27 (type_specifier -> SHORT .)
    ,               reduce using rule 27 (type_specifier -> SHORT .)
    )               reduce using rule 27 (type_specifier -> SHORT .)
    :               reduce using rule 27 (type_specifier -> SHORT .)


state 18

    (28) type_specifier -> INT .

    TYPEDEF         reduce using rule 28 (type_specifier -> INT .)
    EXTERN          reduce using rule 28 (type_specifier -> INT .)
    STATIC          reduce using rule 28 (type_specifier -> INT .)
    AUTO            reduce using rule 28 (type_specifier -> INT .)
    REGISTER        reduce using rule 28 (type_specifier -> INT .)
    VOID            reduce using rule 28 (type_specifier -> INT .)
    CHAR            reduce using rule 28 (type_specifier -> INT .)
    SHORT           reduce using rule 28 (type_specifier -> INT .)
    INT             reduce using rule 28 (type_specifier -> INT .)
    LONG            reduce using rule 28 (type_specifier -> INT .)
    FLOAT           reduce using rule 28 (type_specifier -> INT .)
    DOUBLE          reduce using rule 28 (type_specifier -> INT .)
    SIGNED          reduce using rule 28 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 28 (type_specifier -> INT .)
    BOOL            reduce using rule 28 (type_specifier -> INT .)
    CONST           reduce using rule 28 (type_specifier -> INT .)
    RESTRICT        reduce using rule 28 (type_specifier -> INT .)
    VOLATILE        reduce using rule 28 (type_specifier -> INT .)
    INLINE          reduce using rule 28 (type_specifier -> INT .)
    ENUM            reduce using rule 28 (type_specifier -> INT .)
    STRUCT          reduce using rule 28 (type_specifier -> INT .)
    UNION           reduce using rule 28 (type_specifier -> INT .)
    ;               reduce using rule 28 (type_specifier -> INT .)
    *               reduce using rule 28 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 28 (type_specifier -> INT .)
    (               reduce using rule 28 (type_specifier -> INT .)
    [               reduce using rule 28 (type_specifier -> INT .)
    ,               reduce using rule 28 (type_specifier -> INT .)
    )               reduce using rule 28 (type_specifier -> INT .)
    :               reduce using rule 28 (type_specifier -> INT .)


state 19

    (29) type_specifier -> LONG .

    TYPEDEF         reduce using rule 29 (type_specifier -> LONG .)
    EXTERN          reduce using rule 29 (type_specifier -> LONG .)
    STATIC          reduce using rule 29 (type_specifier -> LONG .)
    AUTO            reduce using rule 29 (type_specifier -> LONG .)
    REGISTER        reduce using rule 29 (type_specifier -> LONG .)
    VOID            reduce using rule 29 (type_specifier -> LONG .)
    CHAR            reduce using rule 29 (type_specifier -> LONG .)
    SHORT           reduce using rule 29 (type_specifier -> LONG .)
    INT             reduce using rule 29 (type_specifier -> LONG .)
    LONG            reduce using rule 29 (type_specifier -> LONG .)
    FLOAT           reduce using rule 29 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 29 (type_specifier -> LONG .)
    SIGNED          reduce using rule 29 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 29 (type_specifier -> LONG .)
    BOOL            reduce using rule 29 (type_specifier -> LONG .)
    CONST           reduce using rule 29 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 29 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 29 (type_specifier -> LONG .)
    INLINE          reduce using rule 29 (type_specifier -> LONG .)
    ENUM            reduce using rule 29 (type_specifier -> LONG .)
    STRUCT          reduce using rule 29 (type_specifier -> LONG .)
    UNION           reduce using rule 29 (type_specifier -> LONG .)
    ;               reduce using rule 29 (type_specifier -> LONG .)
    *               reduce using rule 29 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 29 (type_specifier -> LONG .)
    (               reduce using rule 29 (type_specifier -> LONG .)
    [               reduce using rule 29 (type_specifier -> LONG .)
    ,               reduce using rule 29 (type_specifier -> LONG .)
    )               reduce using rule 29 (type_specifier -> LONG .)
    :               reduce using rule 29 (type_specifier -> LONG .)


state 20

    (30) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 30 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 30 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 30 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 30 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 30 (type_specifier -> FLOAT .)
    VOID            reduce using rule 30 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 30 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 30 (type_specifier -> FLOAT .)
    INT             reduce using rule 30 (type_specifier -> FLOAT .)
    LONG            reduce using rule 30 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 30 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 30 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 30 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 30 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 30 (type_specifier -> FLOAT .)
    CONST           reduce using rule 30 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 30 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 30 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 30 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 30 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 30 (type_specifier -> FLOAT .)
    UNION           reduce using rule 30 (type_specifier -> FLOAT .)
    ;               reduce using rule 30 (type_specifier -> FLOAT .)
    *               reduce using rule 30 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 30 (type_specifier -> FLOAT .)
    (               reduce using rule 30 (type_specifier -> FLOAT .)
    [               reduce using rule 30 (type_specifier -> FLOAT .)
    ,               reduce using rule 30 (type_specifier -> FLOAT .)
    )               reduce using rule 30 (type_specifier -> FLOAT .)
    :               reduce using rule 30 (type_specifier -> FLOAT .)


state 21

    (31) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 31 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 31 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 31 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 31 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 31 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 31 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 31 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 31 (type_specifier -> DOUBLE .)
    INT             reduce using rule 31 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 31 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 31 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 31 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 31 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 31 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 31 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 31 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 31 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 31 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 31 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 31 (type_specifier -> DOUBLE .)
    ;               reduce using rule 31 (type_specifier -> DOUBLE .)
    *               reduce using rule 31 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 31 (type_specifier -> DOUBLE .)
    (               reduce using rule 31 (type_specifier -> DOUBLE .)
    [               reduce using rule 31 (type_specifier -> DOUBLE .)
    ,               reduce using rule 31 (type_specifier -> DOUBLE .)
    )               reduce using rule 31 (type_specifier -> DOUBLE .)
    :               reduce using rule 31 (type_specifier -> DOUBLE .)


state 22

    (32) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 32 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 32 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 32 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 32 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 32 (type_specifier -> SIGNED .)
    VOID            reduce using rule 32 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 32 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 32 (type_specifier -> SIGNED .)
    INT             reduce using rule 32 (type_specifier -> SIGNED .)
    LONG            reduce using rule 32 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 32 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 32 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 32 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 32 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 32 (type_specifier -> SIGNED .)
    CONST           reduce using rule 32 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 32 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 32 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 32 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 32 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 32 (type_specifier -> SIGNED .)
    UNION           reduce using rule 32 (type_specifier -> SIGNED .)
    ;               reduce using rule 32 (type_specifier -> SIGNED .)
    *               reduce using rule 32 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 32 (type_specifier -> SIGNED .)
    (               reduce using rule 32 (type_specifier -> SIGNED .)
    [               reduce using rule 32 (type_specifier -> SIGNED .)
    ,               reduce using rule 32 (type_specifier -> SIGNED .)
    )               reduce using rule 32 (type_specifier -> SIGNED .)
    :               reduce using rule 32 (type_specifier -> SIGNED .)


state 23

    (33) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 33 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 33 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 33 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 33 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 33 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 33 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 33 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 33 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 33 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 33 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 33 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 33 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 33 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 33 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 33 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 33 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 33 (type_specifier -> UNSIGNED .)
    *               reduce using rule 33 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 33 (type_specifier -> UNSIGNED .)
    (               reduce using rule 33 (type_specifier -> UNSIGNED .)
    [               reduce using rule 33 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 33 (type_specifier -> UNSIGNED .)
    )               reduce using rule 33 (type_specifier -> UNSIGNED .)
    :               reduce using rule 33 (type_specifier -> UNSIGNED .)


state 24

    (34) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 34 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 34 (type_specifier -> BOOL .)
    STATIC          reduce using rule 34 (type_specifier -> BOOL .)
    AUTO            reduce using rule 34 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 34 (type_specifier -> BOOL .)
    VOID            reduce using rule 34 (type_specifier -> BOOL .)
    CHAR            reduce using rule 34 (type_specifier -> BOOL .)
    SHORT           reduce using rule 34 (type_specifier -> BOOL .)
    INT             reduce using rule 34 (type_specifier -> BOOL .)
    LONG            reduce using rule 34 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 34 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 34 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 34 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 34 (type_specifier -> BOOL .)
    BOOL            reduce using rule 34 (type_specifier -> BOOL .)
    CONST           reduce using rule 34 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 34 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 34 (type_specifier -> BOOL .)
    INLINE          reduce using rule 34 (type_specifier -> BOOL .)
    ENUM            reduce using rule 34 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 34 (type_specifier -> BOOL .)
    UNION           reduce using rule 34 (type_specifier -> BOOL .)
    ;               reduce using rule 34 (type_specifier -> BOOL .)
    *               reduce using rule 34 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 34 (type_specifier -> BOOL .)
    (               reduce using rule 34 (type_specifier -> BOOL .)
    [               reduce using rule 34 (type_specifier -> BOOL .)
    ,               reduce using rule 34 (type_specifier -> BOOL .)
    )               reduce using rule 34 (type_specifier -> BOOL .)
    :               reduce using rule 34 (type_specifier -> BOOL .)


state 25

    (35) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)


state 26

    (36) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 36 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 36 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 36 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 36 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 36 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 36 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 36 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 36 (type_specifier -> enum_specifier .)
    INT             reduce using rule 36 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 36 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 36 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 36 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 36 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 36 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 36 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 36 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 36 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 36 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 36 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 36 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 36 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 36 (type_specifier -> enum_specifier .)
    ;               reduce using rule 36 (type_specifier -> enum_specifier .)
    *               reduce using rule 36 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 36 (type_specifier -> enum_specifier .)
    (               reduce using rule 36 (type_specifier -> enum_specifier .)
    [               reduce using rule 36 (type_specifier -> enum_specifier .)
    ,               reduce using rule 36 (type_specifier -> enum_specifier .)
    )               reduce using rule 36 (type_specifier -> enum_specifier .)
    :               reduce using rule 36 (type_specifier -> enum_specifier .)


state 27

    (37) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 37 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 37 (type_qualifier -> CONST .)
    STATIC          reduce using rule 37 (type_qualifier -> CONST .)
    AUTO            reduce using rule 37 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 37 (type_qualifier -> CONST .)
    VOID            reduce using rule 37 (type_qualifier -> CONST .)
    CHAR            reduce using rule 37 (type_qualifier -> CONST .)
    SHORT           reduce using rule 37 (type_qualifier -> CONST .)
    INT             reduce using rule 37 (type_qualifier -> CONST .)
    LONG            reduce using rule 37 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 37 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 37 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 37 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 37 (type_qualifier -> CONST .)
    BOOL            reduce using rule 37 (type_qualifier -> CONST .)
    CONST           reduce using rule 37 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 37 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 37 (type_qualifier -> CONST .)
    INLINE          reduce using rule 37 (type_qualifier -> CONST .)
    ENUM            reduce using rule 37 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 37 (type_qualifier -> CONST .)
    UNION           reduce using rule 37 (type_qualifier -> CONST .)
    ;               reduce using rule 37 (type_qualifier -> CONST .)
    *               reduce using rule 37 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 37 (type_qualifier -> CONST .)
    (               reduce using rule 37 (type_qualifier -> CONST .)
    [               reduce using rule 37 (type_qualifier -> CONST .)
    ,               reduce using rule 37 (type_qualifier -> CONST .)
    )               reduce using rule 37 (type_qualifier -> CONST .)
    :               reduce using rule 37 (type_qualifier -> CONST .)
    ]               reduce using rule 37 (type_qualifier -> CONST .)
    INC_DEC         reduce using rule 37 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 37 (type_qualifier -> CONST .)
    &               reduce using rule 37 (type_qualifier -> CONST .)
    +               reduce using rule 37 (type_qualifier -> CONST .)
    -               reduce using rule 37 (type_qualifier -> CONST .)
    ~               reduce using rule 37 (type_qualifier -> CONST .)
    !               reduce using rule 37 (type_qualifier -> CONST .)
    CONSTANT        reduce using rule 37 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 37 (type_qualifier -> CONST .)


state 28

    (38) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 38 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 38 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 38 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 38 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 38 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 38 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 38 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 38 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 38 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 38 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 38 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 38 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 38 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 38 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 38 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 38 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 38 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 38 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 38 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 38 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 38 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 38 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 38 (type_qualifier -> RESTRICT .)
    *               reduce using rule 38 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 38 (type_qualifier -> RESTRICT .)
    (               reduce using rule 38 (type_qualifier -> RESTRICT .)
    [               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 38 (type_qualifier -> RESTRICT .)
    )               reduce using rule 38 (type_qualifier -> RESTRICT .)
    :               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ]               reduce using rule 38 (type_qualifier -> RESTRICT .)
    INC_DEC         reduce using rule 38 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 38 (type_qualifier -> RESTRICT .)
    &               reduce using rule 38 (type_qualifier -> RESTRICT .)
    +               reduce using rule 38 (type_qualifier -> RESTRICT .)
    -               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ~               reduce using rule 38 (type_qualifier -> RESTRICT .)
    !               reduce using rule 38 (type_qualifier -> RESTRICT .)
    CONSTANT        reduce using rule 38 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 38 (type_qualifier -> RESTRICT .)


state 29

    (39) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 39 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 39 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 39 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 39 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 39 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 39 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 39 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 39 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 39 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 39 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 39 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 39 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 39 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 39 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 39 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 39 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 39 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 39 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 39 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 39 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 39 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 39 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 39 (type_qualifier -> VOLATILE .)
    *               reduce using rule 39 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 39 (type_qualifier -> VOLATILE .)
    (               reduce using rule 39 (type_qualifier -> VOLATILE .)
    [               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 39 (type_qualifier -> VOLATILE .)
    )               reduce using rule 39 (type_qualifier -> VOLATILE .)
    :               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ]               reduce using rule 39 (type_qualifier -> VOLATILE .)
    INC_DEC         reduce using rule 39 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 39 (type_qualifier -> VOLATILE .)
    &               reduce using rule 39 (type_qualifier -> VOLATILE .)
    +               reduce using rule 39 (type_qualifier -> VOLATILE .)
    -               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ~               reduce using rule 39 (type_qualifier -> VOLATILE .)
    !               reduce using rule 39 (type_qualifier -> VOLATILE .)
    CONSTANT        reduce using rule 39 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 39 (type_qualifier -> VOLATILE .)


state 30

    (24) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 24 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 24 (function_specifier -> INLINE .)
    STATIC          reduce using rule 24 (function_specifier -> INLINE .)
    AUTO            reduce using rule 24 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 24 (function_specifier -> INLINE .)
    VOID            reduce using rule 24 (function_specifier -> INLINE .)
    CHAR            reduce using rule 24 (function_specifier -> INLINE .)
    SHORT           reduce using rule 24 (function_specifier -> INLINE .)
    INT             reduce using rule 24 (function_specifier -> INLINE .)
    LONG            reduce using rule 24 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 24 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 24 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 24 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 24 (function_specifier -> INLINE .)
    BOOL            reduce using rule 24 (function_specifier -> INLINE .)
    CONST           reduce using rule 24 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 24 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 24 (function_specifier -> INLINE .)
    INLINE          reduce using rule 24 (function_specifier -> INLINE .)
    ENUM            reduce using rule 24 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 24 (function_specifier -> INLINE .)
    UNION           reduce using rule 24 (function_specifier -> INLINE .)
    ;               reduce using rule 24 (function_specifier -> INLINE .)
    *               reduce using rule 24 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 24 (function_specifier -> INLINE .)
    (               reduce using rule 24 (function_specifier -> INLINE .)
    [               reduce using rule 24 (function_specifier -> INLINE .)
    ,               reduce using rule 24 (function_specifier -> INLINE .)
    )               reduce using rule 24 (function_specifier -> INLINE .)


state 31

    (49) struct_or_union_specifier -> struct_or_union . IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (51) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    {               shift and go to state 50


state 32

    (40) enum_specifier -> ENUM . { enumerator_list }
    (41) enum_specifier -> ENUM . IDENTIFIER { enumerator_list }
    (42) enum_specifier -> ENUM . { enumerator_list , }
    (43) enum_specifier -> ENUM . IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> ENUM . IDENTIFIER

    {               shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 33

    (52) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 52 (struct_or_union -> STRUCT .)
    {               reduce using rule 52 (struct_or_union -> STRUCT .)


state 34

    (53) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 53 (struct_or_union -> UNION .)
    {               reduce using rule 53 (struct_or_union -> UNION .)


state 35

    (2) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 36

    (186) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (187) function_definition -> declaration_specifiers declarator . compound_statement
    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 56
    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    declaration_list               shift and go to state 54
    compound_statement             shift and go to state 55
    declaration                    shift and go to state 57
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 37

    (5) declaration -> declaration_specifiers ; .

    TYPEDEF         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INLINE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INC_DEC         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONSTANT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 5 (declaration -> declaration_specifiers ; .)


state 38

    (6) declaration -> declaration_specifiers init_declarator_list . ;
    (8) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 59
    ,               shift and go to state 60


state 39

    (66) declarator -> pointer . direct_declarator
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    direct_declarator              shift and go to state 61

state 40

    (67) declarator -> direct_declarator .
    (76) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (78) direct_declarator -> direct_declarator . [ assignment_expression ]
    (79) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator . [ * ]
    (83) direct_declarator -> direct_declarator . [ ]
    (84) direct_declarator -> direct_declarator . ( parameter_type_list )
    (85) direct_declarator -> direct_declarator . ( identifier_list )
    (86) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 67 (declarator -> direct_declarator .)
    {               reduce using rule 67 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 67 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 67 (declarator -> direct_declarator .)
    STATIC          reduce using rule 67 (declarator -> direct_declarator .)
    AUTO            reduce using rule 67 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 67 (declarator -> direct_declarator .)
    VOID            reduce using rule 67 (declarator -> direct_declarator .)
    CHAR            reduce using rule 67 (declarator -> direct_declarator .)
    SHORT           reduce using rule 67 (declarator -> direct_declarator .)
    INT             reduce using rule 67 (declarator -> direct_declarator .)
    LONG            reduce using rule 67 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 67 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 67 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 67 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 67 (declarator -> direct_declarator .)
    BOOL            reduce using rule 67 (declarator -> direct_declarator .)
    CONST           reduce using rule 67 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 67 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 67 (declarator -> direct_declarator .)
    INLINE          reduce using rule 67 (declarator -> direct_declarator .)
    ENUM            reduce using rule 67 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 67 (declarator -> direct_declarator .)
    UNION           reduce using rule 67 (declarator -> direct_declarator .)
    ;               reduce using rule 67 (declarator -> direct_declarator .)
    ,               reduce using rule 67 (declarator -> direct_declarator .)
    )               reduce using rule 67 (declarator -> direct_declarator .)
    :               reduce using rule 67 (declarator -> direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 41

    (7) init_declarator_list -> init_declarator .

    ;               reduce using rule 7 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 7 (init_declarator_list -> init_declarator .)


state 42

    (68) pointer -> * .
    (69) pointer -> * . type_qualifier_list
    (70) pointer -> * . pointer
    (71) pointer -> * . type_qualifier_list pointer
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 68 (pointer -> * .)
    (               reduce using rule 68 (pointer -> * .)
    [               reduce using rule 68 (pointer -> * .)
    ,               reduce using rule 68 (pointer -> * .)
    )               reduce using rule 68 (pointer -> * .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 64
    pointer                        shift and go to state 65
    type_qualifier                 shift and go to state 66

state 43

    (74) direct_declarator -> IDENTIFIER .

    [               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    (               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    =               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    {               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ;               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ,               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    )               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    :               reduce using rule 74 (direct_declarator -> IDENTIFIER .)


state 44

    (75) direct_declarator -> ( . declarator )
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 67
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 45

    (12) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    ;               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    *               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    (               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ,               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    )               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 46

    (14) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 47

    (16) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 48

    (18) declaration_specifiers -> function_specifier declaration_specifiers .

    ;               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    *               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    (               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    [               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    ,               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    )               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 49

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER . { struct_declaration_list }
    (51) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    {               shift and go to state 68
    TYPEDEF         reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    *               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    (               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    [               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    )               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    :               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 50

    (50) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (54) struct_declaration_list -> . struct_declaration
    (55) struct_declaration_list -> . struct_declaration_list struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 69
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 51

    (40) enum_specifier -> ENUM { . enumerator_list }
    (42) enum_specifier -> ENUM { . enumerator_list , }
    (45) enumerator_list -> . enumerator
    (46) enumerator_list -> . enumerator_list , enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 74
    enumerator                     shift and go to state 75

state 52

    (41) enum_specifier -> ENUM IDENTIFIER . { enumerator_list }
    (43) enum_specifier -> ENUM IDENTIFIER . { enumerator_list , }
    (44) enum_specifier -> ENUM IDENTIFIER .

    {               shift and go to state 77
    TYPEDEF         reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ;               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    *               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    (               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    [               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ,               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    )               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    :               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)


state 53

    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator_list           shift and go to state 38
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 54

    (186) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (189) declaration_list -> declaration_list . declaration
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    compound_statement             shift and go to state 79
    declaration                    shift and go to state 80
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 55

    (187) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 187 (function_definition -> declaration_specifiers declarator compound_statement .)


state 56

    (10) init_declarator -> declarator = . initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 81
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 57

    (188) declaration_list -> declaration .

    {               reduce using rule 188 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 188 (declaration_list -> declaration .)
    EXTERN          reduce using rule 188 (declaration_list -> declaration .)
    STATIC          reduce using rule 188 (declaration_list -> declaration .)
    AUTO            reduce using rule 188 (declaration_list -> declaration .)
    REGISTER        reduce using rule 188 (declaration_list -> declaration .)
    VOID            reduce using rule 188 (declaration_list -> declaration .)
    CHAR            reduce using rule 188 (declaration_list -> declaration .)
    SHORT           reduce using rule 188 (declaration_list -> declaration .)
    INT             reduce using rule 188 (declaration_list -> declaration .)
    LONG            reduce using rule 188 (declaration_list -> declaration .)
    FLOAT           reduce using rule 188 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 188 (declaration_list -> declaration .)
    SIGNED          reduce using rule 188 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 188 (declaration_list -> declaration .)
    BOOL            reduce using rule 188 (declaration_list -> declaration .)
    CONST           reduce using rule 188 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 188 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 188 (declaration_list -> declaration .)
    INLINE          reduce using rule 188 (declaration_list -> declaration .)
    ENUM            reduce using rule 188 (declaration_list -> declaration .)
    STRUCT          reduce using rule 188 (declaration_list -> declaration .)
    UNION           reduce using rule 188 (declaration_list -> declaration .)


state 58

    (190) compound_statement -> { . }
    (191) compound_statement -> { . block_item_list }
    (192) block_item_list -> . block_item
    (193) block_item_list -> . block_item_list block_item
    (194) block_item -> . declaration
    (195) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 112
    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    block_item_list                shift and go to state 113
    block_item                     shift and go to state 114
    declaration                    shift and go to state 115
    statement                      shift and go to state 116
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 127
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 137
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 59

    (6) declaration -> declaration_specifiers init_declarator_list ; .

    TYPEDEF         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INLINE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_DEC         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)


state 60

    (8) init_declarator_list -> init_declarator_list , . init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator                shift and go to state 138
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 61

    (66) declarator -> pointer direct_declarator .
    (76) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (78) direct_declarator -> direct_declarator . [ assignment_expression ]
    (79) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator . [ * ]
    (83) direct_declarator -> direct_declarator . [ ]
    (84) direct_declarator -> direct_declarator . ( parameter_type_list )
    (85) direct_declarator -> direct_declarator . ( identifier_list )
    (86) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 66 (declarator -> pointer direct_declarator .)
    {               reduce using rule 66 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 66 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 66 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 66 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 66 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 66 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 66 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 66 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 66 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 66 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 66 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 66 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 66 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 66 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 66 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 66 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 66 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 66 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 66 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 66 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 66 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 66 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 66 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 66 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 66 (declarator -> pointer direct_declarator .)
    )               reduce using rule 66 (declarator -> pointer direct_declarator .)
    :               reduce using rule 66 (declarator -> pointer direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 62

    (76) direct_declarator -> direct_declarator [ . type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator [ . type_qualifier_list ]
    (78) direct_declarator -> direct_declarator [ . assignment_expression ]
    (79) direct_declarator -> direct_declarator [ . STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator [ . type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator [ . type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator [ . * ]
    (83) direct_declarator -> direct_declarator [ . ]
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    STATIC          shift and go to state 142
    *               shift and go to state 143
    ]               shift and go to state 141
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_qualifier_list            shift and go to state 139
    assignment_expression          shift and go to state 140
    type_qualifier                 shift and go to state 66
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 63

    (84) direct_declarator -> direct_declarator ( . parameter_type_list )
    (85) direct_declarator -> direct_declarator ( . identifier_list )
    (86) direct_declarator -> direct_declarator ( . )
    (165) parameter_type_list -> . parameter_list
    (166) parameter_type_list -> . parameter_list , ELLIPSIS
    (87) identifier_list -> . IDENTIFIER
    (88) identifier_list -> . identifier_list , IDENTIFIER
    (167) parameter_list -> . parameter_declaration
    (168) parameter_list -> . parameter_list , parameter_declaration
    (169) parameter_declaration -> . declaration_specifiers declarator
    (170) parameter_declaration -> . declaration_specifiers abstract_declarator
    (171) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 145
    IDENTIFIER      shift and go to state 148
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 144
    identifier_list                shift and go to state 146
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 64

    (69) pointer -> * type_qualifier_list .
    (71) pointer -> * type_qualifier_list . pointer
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 69 (pointer -> * type_qualifier_list .)
    (               reduce using rule 69 (pointer -> * type_qualifier_list .)
    [               reduce using rule 69 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 69 (pointer -> * type_qualifier_list .)
    )               reduce using rule 69 (pointer -> * type_qualifier_list .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    pointer                        shift and go to state 151
    type_qualifier                 shift and go to state 152

state 65

    (70) pointer -> * pointer .

    IDENTIFIER      reduce using rule 70 (pointer -> * pointer .)
    (               reduce using rule 70 (pointer -> * pointer .)
    [               reduce using rule 70 (pointer -> * pointer .)
    ,               reduce using rule 70 (pointer -> * pointer .)
    )               reduce using rule 70 (pointer -> * pointer .)


state 66

    (72) type_qualifier_list -> type_qualifier .

    *               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ]               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    INC_DEC         reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    &               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    +               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    -               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ~               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    !               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    CONSTANT        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 72 (type_qualifier_list -> type_qualifier .)


state 67

    (75) direct_declarator -> ( declarator . )

    )               shift and go to state 153


state 68

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { . struct_declaration_list }
    (54) struct_declaration_list -> . struct_declaration
    (55) struct_declaration_list -> . struct_declaration_list struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 154
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 69

    (50) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (55) struct_declaration_list -> struct_declaration_list . struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 155
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 156
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 70

    (54) struct_declaration_list -> struct_declaration .

    }               reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 54 (struct_declaration_list -> struct_declaration .)


state 71

    (56) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (61) struct_declarator_list -> . struct_declarator
    (62) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (63) struct_declarator -> . declarator
    (64) struct_declarator -> . : constant_expression
    (65) struct_declarator -> . declarator : constant_expression
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 160
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator_list         shift and go to state 157
    struct_declarator              shift and go to state 158
    declarator                     shift and go to state 159
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 72

    (57) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (58) specifier_qualifier_list -> type_specifier .
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 72
    specifier_qualifier_list       shift and go to state 161
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 73

    (59) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (60) specifier_qualifier_list -> type_qualifier .
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 73
    specifier_qualifier_list       shift and go to state 162
    type_specifier                 shift and go to state 72
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 74

    (40) enum_specifier -> ENUM { enumerator_list . }
    (42) enum_specifier -> ENUM { enumerator_list . , }
    (46) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 163
    ,               shift and go to state 164


state 75

    (45) enumerator_list -> enumerator .

    }               reduce using rule 45 (enumerator_list -> enumerator .)
    ,               reduce using rule 45 (enumerator_list -> enumerator .)


state 76

    (47) enumerator -> IDENTIFIER .
    (48) enumerator -> IDENTIFIER . = constant_expression

    }               reduce using rule 47 (enumerator -> IDENTIFIER .)
    ,               reduce using rule 47 (enumerator -> IDENTIFIER .)
    =               shift and go to state 165


state 77

    (41) enum_specifier -> ENUM IDENTIFIER { . enumerator_list }
    (43) enum_specifier -> ENUM IDENTIFIER { . enumerator_list , }
    (45) enumerator_list -> . enumerator
    (46) enumerator_list -> . enumerator_list , enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 166
    enumerator                     shift and go to state 75

state 78

    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 56


state 79

    (186) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 186 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 80

    (189) declaration_list -> declaration_list declaration .

    {               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 189 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 189 (declaration_list -> declaration_list declaration .)


state 81

    (10) init_declarator -> declarator = initializer .

    ;               reduce using rule 10 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 10 (init_declarator -> declarator = initializer .)


state 82

    (178) initializer -> assignment_expression .

    ;               reduce using rule 178 (initializer -> assignment_expression .)
    ,               reduce using rule 178 (initializer -> assignment_expression .)
    }               reduce using rule 178 (initializer -> assignment_expression .)


state 83

    (179) initializer -> { . initializer_list }
    (180) initializer -> { . initializer_list , }
    (174) initializer_list -> . initializer
    (175) initializer_list -> . designation initializer
    (176) initializer_list -> . initializer_list , initializer
    (177) initializer_list -> . initializer_list , designation initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (181) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (182) designator_list -> . designator
    (183) designator_list -> . designator_list designator
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (184) designator -> . [ constant_expression ]
    (185) designator -> . . IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer_list               shift and go to state 167
    initializer                    shift and go to state 168
    designation                    shift and go to state 169
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 84

    (89) assignment_expression -> conditional_expression .

    ;               reduce using rule 89 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 89 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 89 (assignment_expression -> conditional_expression .)
    }               reduce using rule 89 (assignment_expression -> conditional_expression .)
    )               reduce using rule 89 (assignment_expression -> conditional_expression .)
    :               reduce using rule 89 (assignment_expression -> conditional_expression .)


state 85

    (90) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (121) cast_expression -> unary_expression .
    (91) assignment_operator -> . =
    (92) assignment_operator -> . ASSIGN_OP

    *               reduce using rule 121 (cast_expression -> unary_expression .)
    /               reduce using rule 121 (cast_expression -> unary_expression .)
    %               reduce using rule 121 (cast_expression -> unary_expression .)
    +               reduce using rule 121 (cast_expression -> unary_expression .)
    -               reduce using rule 121 (cast_expression -> unary_expression .)
    SHIFT_OP        reduce using rule 121 (cast_expression -> unary_expression .)
    <               reduce using rule 121 (cast_expression -> unary_expression .)
    >               reduce using rule 121 (cast_expression -> unary_expression .)
    GE_LE           reduce using rule 121 (cast_expression -> unary_expression .)
    EQ_NE           reduce using rule 121 (cast_expression -> unary_expression .)
    &               reduce using rule 121 (cast_expression -> unary_expression .)
    ^               reduce using rule 121 (cast_expression -> unary_expression .)
    |               reduce using rule 121 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 121 (cast_expression -> unary_expression .)
    ?               reduce using rule 121 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 121 (cast_expression -> unary_expression .)
    ;               reduce using rule 121 (cast_expression -> unary_expression .)
    ,               reduce using rule 121 (cast_expression -> unary_expression .)
    ]               reduce using rule 121 (cast_expression -> unary_expression .)
    }               reduce using rule 121 (cast_expression -> unary_expression .)
    )               reduce using rule 121 (cast_expression -> unary_expression .)
    :               reduce using rule 121 (cast_expression -> unary_expression .)
    =               shift and go to state 175
    ASSIGN_OP       shift and go to state 176

    assignment_operator            shift and go to state 174

state 86

    (94) conditional_expression -> logical_or_expression .
    (95) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (97) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 94 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 177
    OR_OP           shift and go to state 178


state 87

    (123) unary_expression -> postfix_expression .
    (135) postfix_expression -> postfix_expression . [ expression ]
    (136) postfix_expression -> postfix_expression . ( )
    (137) postfix_expression -> postfix_expression . ( argument_expression_list )
    (138) postfix_expression -> postfix_expression . . IDENTIFIER
    (139) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (140) postfix_expression -> postfix_expression . INC_DEC

    =               reduce using rule 123 (unary_expression -> postfix_expression .)
    ASSIGN_OP       reduce using rule 123 (unary_expression -> postfix_expression .)
    *               reduce using rule 123 (unary_expression -> postfix_expression .)
    /               reduce using rule 123 (unary_expression -> postfix_expression .)
    %               reduce using rule 123 (unary_expression -> postfix_expression .)
    +               reduce using rule 123 (unary_expression -> postfix_expression .)
    -               reduce using rule 123 (unary_expression -> postfix_expression .)
    SHIFT_OP        reduce using rule 123 (unary_expression -> postfix_expression .)
    <               reduce using rule 123 (unary_expression -> postfix_expression .)
    >               reduce using rule 123 (unary_expression -> postfix_expression .)
    GE_LE           reduce using rule 123 (unary_expression -> postfix_expression .)
    EQ_NE           reduce using rule 123 (unary_expression -> postfix_expression .)
    &               reduce using rule 123 (unary_expression -> postfix_expression .)
    ^               reduce using rule 123 (unary_expression -> postfix_expression .)
    |               reduce using rule 123 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 123 (unary_expression -> postfix_expression .)
    ?               reduce using rule 123 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 123 (unary_expression -> postfix_expression .)
    ;               reduce using rule 123 (unary_expression -> postfix_expression .)
    ,               reduce using rule 123 (unary_expression -> postfix_expression .)
    ]               reduce using rule 123 (unary_expression -> postfix_expression .)
    }               reduce using rule 123 (unary_expression -> postfix_expression .)
    )               reduce using rule 123 (unary_expression -> postfix_expression .)
    :               reduce using rule 123 (unary_expression -> postfix_expression .)
    [               shift and go to state 179
    (               shift and go to state 180
    .               shift and go to state 181
    PTR_OP          shift and go to state 182
    INC_DEC         shift and go to state 183


state 88

    (124) unary_expression -> INC_DEC . unary_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 185
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 184
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 89

    (125) unary_expression -> unary_operator . cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    primary_expression             shift and go to state 94

state 90

    (117) multiplicative_expression -> cast_expression .

    *               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    SHIFT_OP        reduce using rule 117 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    GE_LE           reduce using rule 117 (multiplicative_expression -> cast_expression .)
    EQ_NE           reduce using rule 117 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 117 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 117 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 117 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 117 (multiplicative_expression -> cast_expression .)


state 91

    (126) unary_expression -> SIZEOF . unary_expression
    (127) unary_expression -> SIZEOF . ( type_name )
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 190
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 189
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 92

    (141) postfix_expression -> ( . type_name ) { initializer_list }
    (142) postfix_expression -> ( . type_name ) { initializer_list , }
    (146) primary_expression -> ( . expression )
    (122) cast_expression -> ( . type_name ) cast_expression
    (149) type_name -> . specifier_qualifier_list
    (150) type_name -> . specifier_qualifier_list abstract_declarator
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 191
    expression                     shift and go to state 192
    cast_expression                shift and go to state 90
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 93

    (96) logical_or_expression -> logical_and_expression .
    (99) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 194


state 94

    (134) postfix_expression -> primary_expression .

    [               reduce using rule 134 (postfix_expression -> primary_expression .)
    (               reduce using rule 134 (postfix_expression -> primary_expression .)
    .               reduce using rule 134 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 134 (postfix_expression -> primary_expression .)
    INC_DEC         reduce using rule 134 (postfix_expression -> primary_expression .)
    =               reduce using rule 134 (postfix_expression -> primary_expression .)
    ASSIGN_OP       reduce using rule 134 (postfix_expression -> primary_expression .)
    *               reduce using rule 134 (postfix_expression -> primary_expression .)
    /               reduce using rule 134 (postfix_expression -> primary_expression .)
    %               reduce using rule 134 (postfix_expression -> primary_expression .)
    +               reduce using rule 134 (postfix_expression -> primary_expression .)
    -               reduce using rule 134 (postfix_expression -> primary_expression .)
    SHIFT_OP        reduce using rule 134 (postfix_expression -> primary_expression .)
    <               reduce using rule 134 (postfix_expression -> primary_expression .)
    >               reduce using rule 134 (postfix_expression -> primary_expression .)
    GE_LE           reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_NE           reduce using rule 134 (postfix_expression -> primary_expression .)
    &               reduce using rule 134 (postfix_expression -> primary_expression .)
    ^               reduce using rule 134 (postfix_expression -> primary_expression .)
    |               reduce using rule 134 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 134 (postfix_expression -> primary_expression .)
    ?               reduce using rule 134 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 134 (postfix_expression -> primary_expression .)
    ;               reduce using rule 134 (postfix_expression -> primary_expression .)
    ,               reduce using rule 134 (postfix_expression -> primary_expression .)
    ]               reduce using rule 134 (postfix_expression -> primary_expression .)
    }               reduce using rule 134 (postfix_expression -> primary_expression .)
    )               reduce using rule 134 (postfix_expression -> primary_expression .)
    :               reduce using rule 134 (postfix_expression -> primary_expression .)


state 95

    (143) primary_expression -> IDENTIFIER .

    [               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 143 (primary_expression -> IDENTIFIER .)
    INC_DEC         reduce using rule 143 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ASSIGN_OP       reduce using rule 143 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    SHIFT_OP        reduce using rule 143 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    GE_LE           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    EQ_NE           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    }               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 143 (primary_expression -> IDENTIFIER .)


state 96

    (128) unary_operator -> & .

    (               reduce using rule 128 (unary_operator -> & .)
    INC_DEC         reduce using rule 128 (unary_operator -> & .)
    SIZEOF          reduce using rule 128 (unary_operator -> & .)
    &               reduce using rule 128 (unary_operator -> & .)
    *               reduce using rule 128 (unary_operator -> & .)
    +               reduce using rule 128 (unary_operator -> & .)
    -               reduce using rule 128 (unary_operator -> & .)
    ~               reduce using rule 128 (unary_operator -> & .)
    !               reduce using rule 128 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 128 (unary_operator -> & .)
    CONSTANT        reduce using rule 128 (unary_operator -> & .)
    STRING_LITERAL  reduce using rule 128 (unary_operator -> & .)


state 97

    (129) unary_operator -> * .

    (               reduce using rule 129 (unary_operator -> * .)
    INC_DEC         reduce using rule 129 (unary_operator -> * .)
    SIZEOF          reduce using rule 129 (unary_operator -> * .)
    &               reduce using rule 129 (unary_operator -> * .)
    *               reduce using rule 129 (unary_operator -> * .)
    +               reduce using rule 129 (unary_operator -> * .)
    -               reduce using rule 129 (unary_operator -> * .)
    ~               reduce using rule 129 (unary_operator -> * .)
    !               reduce using rule 129 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> * .)
    CONSTANT        reduce using rule 129 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 129 (unary_operator -> * .)


state 98

    (130) unary_operator -> + .

    (               reduce using rule 130 (unary_operator -> + .)
    INC_DEC         reduce using rule 130 (unary_operator -> + .)
    SIZEOF          reduce using rule 130 (unary_operator -> + .)
    &               reduce using rule 130 (unary_operator -> + .)
    *               reduce using rule 130 (unary_operator -> + .)
    +               reduce using rule 130 (unary_operator -> + .)
    -               reduce using rule 130 (unary_operator -> + .)
    ~               reduce using rule 130 (unary_operator -> + .)
    !               reduce using rule 130 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 130 (unary_operator -> + .)
    CONSTANT        reduce using rule 130 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 130 (unary_operator -> + .)


state 99

    (131) unary_operator -> - .

    (               reduce using rule 131 (unary_operator -> - .)
    INC_DEC         reduce using rule 131 (unary_operator -> - .)
    SIZEOF          reduce using rule 131 (unary_operator -> - .)
    &               reduce using rule 131 (unary_operator -> - .)
    *               reduce using rule 131 (unary_operator -> - .)
    +               reduce using rule 131 (unary_operator -> - .)
    -               reduce using rule 131 (unary_operator -> - .)
    ~               reduce using rule 131 (unary_operator -> - .)
    !               reduce using rule 131 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 131 (unary_operator -> - .)
    CONSTANT        reduce using rule 131 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 131 (unary_operator -> - .)


state 100

    (132) unary_operator -> ~ .

    (               reduce using rule 132 (unary_operator -> ~ .)
    INC_DEC         reduce using rule 132 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 132 (unary_operator -> ~ .)
    &               reduce using rule 132 (unary_operator -> ~ .)
    *               reduce using rule 132 (unary_operator -> ~ .)
    +               reduce using rule 132 (unary_operator -> ~ .)
    -               reduce using rule 132 (unary_operator -> ~ .)
    ~               reduce using rule 132 (unary_operator -> ~ .)
    !               reduce using rule 132 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 132 (unary_operator -> ~ .)
    CONSTANT        reduce using rule 132 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 132 (unary_operator -> ~ .)


state 101

    (133) unary_operator -> ! .

    (               reduce using rule 133 (unary_operator -> ! .)
    INC_DEC         reduce using rule 133 (unary_operator -> ! .)
    SIZEOF          reduce using rule 133 (unary_operator -> ! .)
    &               reduce using rule 133 (unary_operator -> ! .)
    *               reduce using rule 133 (unary_operator -> ! .)
    +               reduce using rule 133 (unary_operator -> ! .)
    -               reduce using rule 133 (unary_operator -> ! .)
    ~               reduce using rule 133 (unary_operator -> ! .)
    !               reduce using rule 133 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 133 (unary_operator -> ! .)
    CONSTANT        reduce using rule 133 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 133 (unary_operator -> ! .)


state 102

    (98) logical_and_expression -> inclusive_or_expression .
    (101) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 195


state 103

    (144) primary_expression -> CONSTANT .

    [               reduce using rule 144 (primary_expression -> CONSTANT .)
    (               reduce using rule 144 (primary_expression -> CONSTANT .)
    .               reduce using rule 144 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 144 (primary_expression -> CONSTANT .)
    INC_DEC         reduce using rule 144 (primary_expression -> CONSTANT .)
    =               reduce using rule 144 (primary_expression -> CONSTANT .)
    ASSIGN_OP       reduce using rule 144 (primary_expression -> CONSTANT .)
    *               reduce using rule 144 (primary_expression -> CONSTANT .)
    /               reduce using rule 144 (primary_expression -> CONSTANT .)
    %               reduce using rule 144 (primary_expression -> CONSTANT .)
    +               reduce using rule 144 (primary_expression -> CONSTANT .)
    -               reduce using rule 144 (primary_expression -> CONSTANT .)
    SHIFT_OP        reduce using rule 144 (primary_expression -> CONSTANT .)
    <               reduce using rule 144 (primary_expression -> CONSTANT .)
    >               reduce using rule 144 (primary_expression -> CONSTANT .)
    GE_LE           reduce using rule 144 (primary_expression -> CONSTANT .)
    EQ_NE           reduce using rule 144 (primary_expression -> CONSTANT .)
    &               reduce using rule 144 (primary_expression -> CONSTANT .)
    ^               reduce using rule 144 (primary_expression -> CONSTANT .)
    |               reduce using rule 144 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 144 (primary_expression -> CONSTANT .)
    ?               reduce using rule 144 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 144 (primary_expression -> CONSTANT .)
    ;               reduce using rule 144 (primary_expression -> CONSTANT .)
    ,               reduce using rule 144 (primary_expression -> CONSTANT .)
    ]               reduce using rule 144 (primary_expression -> CONSTANT .)
    }               reduce using rule 144 (primary_expression -> CONSTANT .)
    )               reduce using rule 144 (primary_expression -> CONSTANT .)
    :               reduce using rule 144 (primary_expression -> CONSTANT .)


state 104

    (145) primary_expression -> STRING_LITERAL .

    [               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    (               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    .               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    INC_DEC         reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    =               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ASSIGN_OP       reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    *               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    SHIFT_OP        reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    GE_LE           reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    EQ_NE           reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 145 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 145 (primary_expression -> STRING_LITERAL .)


state 105

    (100) inclusive_or_expression -> exclusive_or_expression .
    (103) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 196


state 106

    (102) exclusive_or_expression -> and_expression .
    (105) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 102 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 102 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 102 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 197


state 107

    (104) and_expression -> equality_expression .
    (107) equality_expression -> equality_expression . EQ_NE relational_expression

    &               reduce using rule 104 (and_expression -> equality_expression .)
    ^               reduce using rule 104 (and_expression -> equality_expression .)
    |               reduce using rule 104 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 104 (and_expression -> equality_expression .)
    ?               reduce using rule 104 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 104 (and_expression -> equality_expression .)
    ;               reduce using rule 104 (and_expression -> equality_expression .)
    ,               reduce using rule 104 (and_expression -> equality_expression .)
    ]               reduce using rule 104 (and_expression -> equality_expression .)
    }               reduce using rule 104 (and_expression -> equality_expression .)
    )               reduce using rule 104 (and_expression -> equality_expression .)
    :               reduce using rule 104 (and_expression -> equality_expression .)
    EQ_NE           shift and go to state 198


state 108

    (106) equality_expression -> relational_expression .
    (109) relational_expression -> relational_expression . < shift_expression
    (110) relational_expression -> relational_expression . > shift_expression
    (111) relational_expression -> relational_expression . GE_LE shift_expression

    EQ_NE           reduce using rule 106 (equality_expression -> relational_expression .)
    &               reduce using rule 106 (equality_expression -> relational_expression .)
    ^               reduce using rule 106 (equality_expression -> relational_expression .)
    |               reduce using rule 106 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 106 (equality_expression -> relational_expression .)
    ?               reduce using rule 106 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 106 (equality_expression -> relational_expression .)
    ;               reduce using rule 106 (equality_expression -> relational_expression .)
    ,               reduce using rule 106 (equality_expression -> relational_expression .)
    ]               reduce using rule 106 (equality_expression -> relational_expression .)
    }               reduce using rule 106 (equality_expression -> relational_expression .)
    )               reduce using rule 106 (equality_expression -> relational_expression .)
    :               reduce using rule 106 (equality_expression -> relational_expression .)
    <               shift and go to state 199
    >               shift and go to state 200
    GE_LE           shift and go to state 201


state 109

    (108) relational_expression -> shift_expression .
    (113) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 108 (relational_expression -> shift_expression .)
    >               reduce using rule 108 (relational_expression -> shift_expression .)
    GE_LE           reduce using rule 108 (relational_expression -> shift_expression .)
    EQ_NE           reduce using rule 108 (relational_expression -> shift_expression .)
    &               reduce using rule 108 (relational_expression -> shift_expression .)
    ^               reduce using rule 108 (relational_expression -> shift_expression .)
    |               reduce using rule 108 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 108 (relational_expression -> shift_expression .)
    ?               reduce using rule 108 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 108 (relational_expression -> shift_expression .)
    ;               reduce using rule 108 (relational_expression -> shift_expression .)
    ,               reduce using rule 108 (relational_expression -> shift_expression .)
    ]               reduce using rule 108 (relational_expression -> shift_expression .)
    }               reduce using rule 108 (relational_expression -> shift_expression .)
    )               reduce using rule 108 (relational_expression -> shift_expression .)
    :               reduce using rule 108 (relational_expression -> shift_expression .)
    SHIFT_OP        shift and go to state 202


state 110

    (112) shift_expression -> additive_expression .
    (115) additive_expression -> additive_expression . + multiplicative_expression
    (116) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_OP        reduce using rule 112 (shift_expression -> additive_expression .)
    <               reduce using rule 112 (shift_expression -> additive_expression .)
    >               reduce using rule 112 (shift_expression -> additive_expression .)
    GE_LE           reduce using rule 112 (shift_expression -> additive_expression .)
    EQ_NE           reduce using rule 112 (shift_expression -> additive_expression .)
    &               reduce using rule 112 (shift_expression -> additive_expression .)
    ^               reduce using rule 112 (shift_expression -> additive_expression .)
    |               reduce using rule 112 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 112 (shift_expression -> additive_expression .)
    ?               reduce using rule 112 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 112 (shift_expression -> additive_expression .)
    ;               reduce using rule 112 (shift_expression -> additive_expression .)
    ,               reduce using rule 112 (shift_expression -> additive_expression .)
    ]               reduce using rule 112 (shift_expression -> additive_expression .)
    }               reduce using rule 112 (shift_expression -> additive_expression .)
    )               reduce using rule 112 (shift_expression -> additive_expression .)
    :               reduce using rule 112 (shift_expression -> additive_expression .)
    +               shift and go to state 203
    -               shift and go to state 204


state 111

    (114) additive_expression -> multiplicative_expression .
    (118) multiplicative_expression -> multiplicative_expression . * cast_expression
    (119) multiplicative_expression -> multiplicative_expression . / cast_expression
    (120) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    SHIFT_OP        reduce using rule 114 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    GE_LE           reduce using rule 114 (additive_expression -> multiplicative_expression .)
    EQ_NE           reduce using rule 114 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 114 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 114 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 114 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 112

    (190) compound_statement -> { } .

    TYPEDEF         reduce using rule 190 (compound_statement -> { } .)
    EXTERN          reduce using rule 190 (compound_statement -> { } .)
    STATIC          reduce using rule 190 (compound_statement -> { } .)
    AUTO            reduce using rule 190 (compound_statement -> { } .)
    REGISTER        reduce using rule 190 (compound_statement -> { } .)
    VOID            reduce using rule 190 (compound_statement -> { } .)
    CHAR            reduce using rule 190 (compound_statement -> { } .)
    SHORT           reduce using rule 190 (compound_statement -> { } .)
    INT             reduce using rule 190 (compound_statement -> { } .)
    LONG            reduce using rule 190 (compound_statement -> { } .)
    FLOAT           reduce using rule 190 (compound_statement -> { } .)
    DOUBLE          reduce using rule 190 (compound_statement -> { } .)
    SIGNED          reduce using rule 190 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 190 (compound_statement -> { } .)
    BOOL            reduce using rule 190 (compound_statement -> { } .)
    CONST           reduce using rule 190 (compound_statement -> { } .)
    RESTRICT        reduce using rule 190 (compound_statement -> { } .)
    VOLATILE        reduce using rule 190 (compound_statement -> { } .)
    INLINE          reduce using rule 190 (compound_statement -> { } .)
    ENUM            reduce using rule 190 (compound_statement -> { } .)
    STRUCT          reduce using rule 190 (compound_statement -> { } .)
    UNION           reduce using rule 190 (compound_statement -> { } .)
    $end            reduce using rule 190 (compound_statement -> { } .)
    }               reduce using rule 190 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 190 (compound_statement -> { } .)
    CASE            reduce using rule 190 (compound_statement -> { } .)
    DEFAULT         reduce using rule 190 (compound_statement -> { } .)
    {               reduce using rule 190 (compound_statement -> { } .)
    ;               reduce using rule 190 (compound_statement -> { } .)
    IF              reduce using rule 190 (compound_statement -> { } .)
    SWITCH          reduce using rule 190 (compound_statement -> { } .)
    WHILE           reduce using rule 190 (compound_statement -> { } .)
    DO              reduce using rule 190 (compound_statement -> { } .)
    FOR             reduce using rule 190 (compound_statement -> { } .)
    GOTO            reduce using rule 190 (compound_statement -> { } .)
    CONTINUE        reduce using rule 190 (compound_statement -> { } .)
    BREAK           reduce using rule 190 (compound_statement -> { } .)
    RETURN          reduce using rule 190 (compound_statement -> { } .)
    INC_DEC         reduce using rule 190 (compound_statement -> { } .)
    SIZEOF          reduce using rule 190 (compound_statement -> { } .)
    (               reduce using rule 190 (compound_statement -> { } .)
    &               reduce using rule 190 (compound_statement -> { } .)
    *               reduce using rule 190 (compound_statement -> { } .)
    +               reduce using rule 190 (compound_statement -> { } .)
    -               reduce using rule 190 (compound_statement -> { } .)
    ~               reduce using rule 190 (compound_statement -> { } .)
    !               reduce using rule 190 (compound_statement -> { } .)
    CONSTANT        reduce using rule 190 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 190 (compound_statement -> { } .)
    ELSE            reduce using rule 190 (compound_statement -> { } .)


state 113

    (191) compound_statement -> { block_item_list . }
    (193) block_item_list -> block_item_list . block_item
    (194) block_item -> . declaration
    (195) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 208
    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    block_item                     shift and go to state 209
    declaration                    shift and go to state 115
    statement                      shift and go to state 116
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 127
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 137
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 114

    (192) block_item_list -> block_item .

    }               reduce using rule 192 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 192 (block_item_list -> block_item .)
    CASE            reduce using rule 192 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 192 (block_item_list -> block_item .)
    {               reduce using rule 192 (block_item_list -> block_item .)
    ;               reduce using rule 192 (block_item_list -> block_item .)
    IF              reduce using rule 192 (block_item_list -> block_item .)
    SWITCH          reduce using rule 192 (block_item_list -> block_item .)
    WHILE           reduce using rule 192 (block_item_list -> block_item .)
    DO              reduce using rule 192 (block_item_list -> block_item .)
    FOR             reduce using rule 192 (block_item_list -> block_item .)
    GOTO            reduce using rule 192 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 192 (block_item_list -> block_item .)
    BREAK           reduce using rule 192 (block_item_list -> block_item .)
    RETURN          reduce using rule 192 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 192 (block_item_list -> block_item .)
    EXTERN          reduce using rule 192 (block_item_list -> block_item .)
    STATIC          reduce using rule 192 (block_item_list -> block_item .)
    AUTO            reduce using rule 192 (block_item_list -> block_item .)
    REGISTER        reduce using rule 192 (block_item_list -> block_item .)
    VOID            reduce using rule 192 (block_item_list -> block_item .)
    CHAR            reduce using rule 192 (block_item_list -> block_item .)
    SHORT           reduce using rule 192 (block_item_list -> block_item .)
    INT             reduce using rule 192 (block_item_list -> block_item .)
    LONG            reduce using rule 192 (block_item_list -> block_item .)
    FLOAT           reduce using rule 192 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 192 (block_item_list -> block_item .)
    SIGNED          reduce using rule 192 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 192 (block_item_list -> block_item .)
    BOOL            reduce using rule 192 (block_item_list -> block_item .)
    CONST           reduce using rule 192 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 192 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 192 (block_item_list -> block_item .)
    INLINE          reduce using rule 192 (block_item_list -> block_item .)
    ENUM            reduce using rule 192 (block_item_list -> block_item .)
    STRUCT          reduce using rule 192 (block_item_list -> block_item .)
    UNION           reduce using rule 192 (block_item_list -> block_item .)
    INC_DEC         reduce using rule 192 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 192 (block_item_list -> block_item .)
    (               reduce using rule 192 (block_item_list -> block_item .)
    &               reduce using rule 192 (block_item_list -> block_item .)
    *               reduce using rule 192 (block_item_list -> block_item .)
    +               reduce using rule 192 (block_item_list -> block_item .)
    -               reduce using rule 192 (block_item_list -> block_item .)
    ~               reduce using rule 192 (block_item_list -> block_item .)
    !               reduce using rule 192 (block_item_list -> block_item .)
    CONSTANT        reduce using rule 192 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 192 (block_item_list -> block_item .)


state 115

    (194) block_item -> declaration .

    }               reduce using rule 194 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 194 (block_item -> declaration .)
    CASE            reduce using rule 194 (block_item -> declaration .)
    DEFAULT         reduce using rule 194 (block_item -> declaration .)
    {               reduce using rule 194 (block_item -> declaration .)
    ;               reduce using rule 194 (block_item -> declaration .)
    IF              reduce using rule 194 (block_item -> declaration .)
    SWITCH          reduce using rule 194 (block_item -> declaration .)
    WHILE           reduce using rule 194 (block_item -> declaration .)
    DO              reduce using rule 194 (block_item -> declaration .)
    FOR             reduce using rule 194 (block_item -> declaration .)
    GOTO            reduce using rule 194 (block_item -> declaration .)
    CONTINUE        reduce using rule 194 (block_item -> declaration .)
    BREAK           reduce using rule 194 (block_item -> declaration .)
    RETURN          reduce using rule 194 (block_item -> declaration .)
    TYPEDEF         reduce using rule 194 (block_item -> declaration .)
    EXTERN          reduce using rule 194 (block_item -> declaration .)
    STATIC          reduce using rule 194 (block_item -> declaration .)
    AUTO            reduce using rule 194 (block_item -> declaration .)
    REGISTER        reduce using rule 194 (block_item -> declaration .)
    VOID            reduce using rule 194 (block_item -> declaration .)
    CHAR            reduce using rule 194 (block_item -> declaration .)
    SHORT           reduce using rule 194 (block_item -> declaration .)
    INT             reduce using rule 194 (block_item -> declaration .)
    LONG            reduce using rule 194 (block_item -> declaration .)
    FLOAT           reduce using rule 194 (block_item -> declaration .)
    DOUBLE          reduce using rule 194 (block_item -> declaration .)
    SIGNED          reduce using rule 194 (block_item -> declaration .)
    UNSIGNED        reduce using rule 194 (block_item -> declaration .)
    BOOL            reduce using rule 194 (block_item -> declaration .)
    CONST           reduce using rule 194 (block_item -> declaration .)
    RESTRICT        reduce using rule 194 (block_item -> declaration .)
    VOLATILE        reduce using rule 194 (block_item -> declaration .)
    INLINE          reduce using rule 194 (block_item -> declaration .)
    ENUM            reduce using rule 194 (block_item -> declaration .)
    STRUCT          reduce using rule 194 (block_item -> declaration .)
    UNION           reduce using rule 194 (block_item -> declaration .)
    INC_DEC         reduce using rule 194 (block_item -> declaration .)
    SIZEOF          reduce using rule 194 (block_item -> declaration .)
    (               reduce using rule 194 (block_item -> declaration .)
    &               reduce using rule 194 (block_item -> declaration .)
    *               reduce using rule 194 (block_item -> declaration .)
    +               reduce using rule 194 (block_item -> declaration .)
    -               reduce using rule 194 (block_item -> declaration .)
    ~               reduce using rule 194 (block_item -> declaration .)
    !               reduce using rule 194 (block_item -> declaration .)
    CONSTANT        reduce using rule 194 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 194 (block_item -> declaration .)


state 116

    (195) block_item -> statement .

    }               reduce using rule 195 (block_item -> statement .)
    IDENTIFIER      reduce using rule 195 (block_item -> statement .)
    CASE            reduce using rule 195 (block_item -> statement .)
    DEFAULT         reduce using rule 195 (block_item -> statement .)
    {               reduce using rule 195 (block_item -> statement .)
    ;               reduce using rule 195 (block_item -> statement .)
    IF              reduce using rule 195 (block_item -> statement .)
    SWITCH          reduce using rule 195 (block_item -> statement .)
    WHILE           reduce using rule 195 (block_item -> statement .)
    DO              reduce using rule 195 (block_item -> statement .)
    FOR             reduce using rule 195 (block_item -> statement .)
    GOTO            reduce using rule 195 (block_item -> statement .)
    CONTINUE        reduce using rule 195 (block_item -> statement .)
    BREAK           reduce using rule 195 (block_item -> statement .)
    RETURN          reduce using rule 195 (block_item -> statement .)
    TYPEDEF         reduce using rule 195 (block_item -> statement .)
    EXTERN          reduce using rule 195 (block_item -> statement .)
    STATIC          reduce using rule 195 (block_item -> statement .)
    AUTO            reduce using rule 195 (block_item -> statement .)
    REGISTER        reduce using rule 195 (block_item -> statement .)
    VOID            reduce using rule 195 (block_item -> statement .)
    CHAR            reduce using rule 195 (block_item -> statement .)
    SHORT           reduce using rule 195 (block_item -> statement .)
    INT             reduce using rule 195 (block_item -> statement .)
    LONG            reduce using rule 195 (block_item -> statement .)
    FLOAT           reduce using rule 195 (block_item -> statement .)
    DOUBLE          reduce using rule 195 (block_item -> statement .)
    SIGNED          reduce using rule 195 (block_item -> statement .)
    UNSIGNED        reduce using rule 195 (block_item -> statement .)
    BOOL            reduce using rule 195 (block_item -> statement .)
    CONST           reduce using rule 195 (block_item -> statement .)
    RESTRICT        reduce using rule 195 (block_item -> statement .)
    VOLATILE        reduce using rule 195 (block_item -> statement .)
    INLINE          reduce using rule 195 (block_item -> statement .)
    ENUM            reduce using rule 195 (block_item -> statement .)
    STRUCT          reduce using rule 195 (block_item -> statement .)
    UNION           reduce using rule 195 (block_item -> statement .)
    INC_DEC         reduce using rule 195 (block_item -> statement .)
    SIZEOF          reduce using rule 195 (block_item -> statement .)
    (               reduce using rule 195 (block_item -> statement .)
    &               reduce using rule 195 (block_item -> statement .)
    *               reduce using rule 195 (block_item -> statement .)
    +               reduce using rule 195 (block_item -> statement .)
    -               reduce using rule 195 (block_item -> statement .)
    ~               reduce using rule 195 (block_item -> statement .)
    !               reduce using rule 195 (block_item -> statement .)
    CONSTANT        reduce using rule 195 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 195 (block_item -> statement .)


state 117

    (205) expression_statement -> ; .

    }               reduce using rule 205 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 205 (expression_statement -> ; .)
    CASE            reduce using rule 205 (expression_statement -> ; .)
    DEFAULT         reduce using rule 205 (expression_statement -> ; .)
    {               reduce using rule 205 (expression_statement -> ; .)
    ;               reduce using rule 205 (expression_statement -> ; .)
    IF              reduce using rule 205 (expression_statement -> ; .)
    SWITCH          reduce using rule 205 (expression_statement -> ; .)
    WHILE           reduce using rule 205 (expression_statement -> ; .)
    DO              reduce using rule 205 (expression_statement -> ; .)
    FOR             reduce using rule 205 (expression_statement -> ; .)
    GOTO            reduce using rule 205 (expression_statement -> ; .)
    CONTINUE        reduce using rule 205 (expression_statement -> ; .)
    BREAK           reduce using rule 205 (expression_statement -> ; .)
    RETURN          reduce using rule 205 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 205 (expression_statement -> ; .)
    EXTERN          reduce using rule 205 (expression_statement -> ; .)
    STATIC          reduce using rule 205 (expression_statement -> ; .)
    AUTO            reduce using rule 205 (expression_statement -> ; .)
    REGISTER        reduce using rule 205 (expression_statement -> ; .)
    VOID            reduce using rule 205 (expression_statement -> ; .)
    CHAR            reduce using rule 205 (expression_statement -> ; .)
    SHORT           reduce using rule 205 (expression_statement -> ; .)
    INT             reduce using rule 205 (expression_statement -> ; .)
    LONG            reduce using rule 205 (expression_statement -> ; .)
    FLOAT           reduce using rule 205 (expression_statement -> ; .)
    DOUBLE          reduce using rule 205 (expression_statement -> ; .)
    SIGNED          reduce using rule 205 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 205 (expression_statement -> ; .)
    BOOL            reduce using rule 205 (expression_statement -> ; .)
    CONST           reduce using rule 205 (expression_statement -> ; .)
    RESTRICT        reduce using rule 205 (expression_statement -> ; .)
    VOLATILE        reduce using rule 205 (expression_statement -> ; .)
    INLINE          reduce using rule 205 (expression_statement -> ; .)
    ENUM            reduce using rule 205 (expression_statement -> ; .)
    STRUCT          reduce using rule 205 (expression_statement -> ; .)
    UNION           reduce using rule 205 (expression_statement -> ; .)
    INC_DEC         reduce using rule 205 (expression_statement -> ; .)
    SIZEOF          reduce using rule 205 (expression_statement -> ; .)
    (               reduce using rule 205 (expression_statement -> ; .)
    &               reduce using rule 205 (expression_statement -> ; .)
    *               reduce using rule 205 (expression_statement -> ; .)
    +               reduce using rule 205 (expression_statement -> ; .)
    -               reduce using rule 205 (expression_statement -> ; .)
    ~               reduce using rule 205 (expression_statement -> ; .)
    !               reduce using rule 205 (expression_statement -> ; .)
    CONSTANT        reduce using rule 205 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 205 (expression_statement -> ; .)
    ELSE            reduce using rule 205 (expression_statement -> ; .)
    )               reduce using rule 205 (expression_statement -> ; .)


state 118

    (196) statement -> labeled_statement .

    }               reduce using rule 196 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 196 (statement -> labeled_statement .)
    CASE            reduce using rule 196 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 196 (statement -> labeled_statement .)
    {               reduce using rule 196 (statement -> labeled_statement .)
    ;               reduce using rule 196 (statement -> labeled_statement .)
    IF              reduce using rule 196 (statement -> labeled_statement .)
    SWITCH          reduce using rule 196 (statement -> labeled_statement .)
    WHILE           reduce using rule 196 (statement -> labeled_statement .)
    DO              reduce using rule 196 (statement -> labeled_statement .)
    FOR             reduce using rule 196 (statement -> labeled_statement .)
    GOTO            reduce using rule 196 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 196 (statement -> labeled_statement .)
    BREAK           reduce using rule 196 (statement -> labeled_statement .)
    RETURN          reduce using rule 196 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 196 (statement -> labeled_statement .)
    EXTERN          reduce using rule 196 (statement -> labeled_statement .)
    STATIC          reduce using rule 196 (statement -> labeled_statement .)
    AUTO            reduce using rule 196 (statement -> labeled_statement .)
    REGISTER        reduce using rule 196 (statement -> labeled_statement .)
    VOID            reduce using rule 196 (statement -> labeled_statement .)
    CHAR            reduce using rule 196 (statement -> labeled_statement .)
    SHORT           reduce using rule 196 (statement -> labeled_statement .)
    INT             reduce using rule 196 (statement -> labeled_statement .)
    LONG            reduce using rule 196 (statement -> labeled_statement .)
    FLOAT           reduce using rule 196 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 196 (statement -> labeled_statement .)
    SIGNED          reduce using rule 196 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 196 (statement -> labeled_statement .)
    BOOL            reduce using rule 196 (statement -> labeled_statement .)
    CONST           reduce using rule 196 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 196 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 196 (statement -> labeled_statement .)
    INLINE          reduce using rule 196 (statement -> labeled_statement .)
    ENUM            reduce using rule 196 (statement -> labeled_statement .)
    STRUCT          reduce using rule 196 (statement -> labeled_statement .)
    UNION           reduce using rule 196 (statement -> labeled_statement .)
    INC_DEC         reduce using rule 196 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 196 (statement -> labeled_statement .)
    (               reduce using rule 196 (statement -> labeled_statement .)
    &               reduce using rule 196 (statement -> labeled_statement .)
    *               reduce using rule 196 (statement -> labeled_statement .)
    +               reduce using rule 196 (statement -> labeled_statement .)
    -               reduce using rule 196 (statement -> labeled_statement .)
    ~               reduce using rule 196 (statement -> labeled_statement .)
    !               reduce using rule 196 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 196 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 196 (statement -> labeled_statement .)
    ELSE            reduce using rule 196 (statement -> labeled_statement .)


state 119

    (197) statement -> compound_statement .

    }               reduce using rule 197 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 197 (statement -> compound_statement .)
    CASE            reduce using rule 197 (statement -> compound_statement .)
    DEFAULT         reduce using rule 197 (statement -> compound_statement .)
    {               reduce using rule 197 (statement -> compound_statement .)
    ;               reduce using rule 197 (statement -> compound_statement .)
    IF              reduce using rule 197 (statement -> compound_statement .)
    SWITCH          reduce using rule 197 (statement -> compound_statement .)
    WHILE           reduce using rule 197 (statement -> compound_statement .)
    DO              reduce using rule 197 (statement -> compound_statement .)
    FOR             reduce using rule 197 (statement -> compound_statement .)
    GOTO            reduce using rule 197 (statement -> compound_statement .)
    CONTINUE        reduce using rule 197 (statement -> compound_statement .)
    BREAK           reduce using rule 197 (statement -> compound_statement .)
    RETURN          reduce using rule 197 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 197 (statement -> compound_statement .)
    EXTERN          reduce using rule 197 (statement -> compound_statement .)
    STATIC          reduce using rule 197 (statement -> compound_statement .)
    AUTO            reduce using rule 197 (statement -> compound_statement .)
    REGISTER        reduce using rule 197 (statement -> compound_statement .)
    VOID            reduce using rule 197 (statement -> compound_statement .)
    CHAR            reduce using rule 197 (statement -> compound_statement .)
    SHORT           reduce using rule 197 (statement -> compound_statement .)
    INT             reduce using rule 197 (statement -> compound_statement .)
    LONG            reduce using rule 197 (statement -> compound_statement .)
    FLOAT           reduce using rule 197 (statement -> compound_statement .)
    DOUBLE          reduce using rule 197 (statement -> compound_statement .)
    SIGNED          reduce using rule 197 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 197 (statement -> compound_statement .)
    BOOL            reduce using rule 197 (statement -> compound_statement .)
    CONST           reduce using rule 197 (statement -> compound_statement .)
    RESTRICT        reduce using rule 197 (statement -> compound_statement .)
    VOLATILE        reduce using rule 197 (statement -> compound_statement .)
    INLINE          reduce using rule 197 (statement -> compound_statement .)
    ENUM            reduce using rule 197 (statement -> compound_statement .)
    STRUCT          reduce using rule 197 (statement -> compound_statement .)
    UNION           reduce using rule 197 (statement -> compound_statement .)
    INC_DEC         reduce using rule 197 (statement -> compound_statement .)
    SIZEOF          reduce using rule 197 (statement -> compound_statement .)
    (               reduce using rule 197 (statement -> compound_statement .)
    &               reduce using rule 197 (statement -> compound_statement .)
    *               reduce using rule 197 (statement -> compound_statement .)
    +               reduce using rule 197 (statement -> compound_statement .)
    -               reduce using rule 197 (statement -> compound_statement .)
    ~               reduce using rule 197 (statement -> compound_statement .)
    !               reduce using rule 197 (statement -> compound_statement .)
    CONSTANT        reduce using rule 197 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 197 (statement -> compound_statement .)
    ELSE            reduce using rule 197 (statement -> compound_statement .)


state 120

    (198) statement -> expression_statement .

    }               reduce using rule 198 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 198 (statement -> expression_statement .)
    CASE            reduce using rule 198 (statement -> expression_statement .)
    DEFAULT         reduce using rule 198 (statement -> expression_statement .)
    {               reduce using rule 198 (statement -> expression_statement .)
    ;               reduce using rule 198 (statement -> expression_statement .)
    IF              reduce using rule 198 (statement -> expression_statement .)
    SWITCH          reduce using rule 198 (statement -> expression_statement .)
    WHILE           reduce using rule 198 (statement -> expression_statement .)
    DO              reduce using rule 198 (statement -> expression_statement .)
    FOR             reduce using rule 198 (statement -> expression_statement .)
    GOTO            reduce using rule 198 (statement -> expression_statement .)
    CONTINUE        reduce using rule 198 (statement -> expression_statement .)
    BREAK           reduce using rule 198 (statement -> expression_statement .)
    RETURN          reduce using rule 198 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 198 (statement -> expression_statement .)
    EXTERN          reduce using rule 198 (statement -> expression_statement .)
    STATIC          reduce using rule 198 (statement -> expression_statement .)
    AUTO            reduce using rule 198 (statement -> expression_statement .)
    REGISTER        reduce using rule 198 (statement -> expression_statement .)
    VOID            reduce using rule 198 (statement -> expression_statement .)
    CHAR            reduce using rule 198 (statement -> expression_statement .)
    SHORT           reduce using rule 198 (statement -> expression_statement .)
    INT             reduce using rule 198 (statement -> expression_statement .)
    LONG            reduce using rule 198 (statement -> expression_statement .)
    FLOAT           reduce using rule 198 (statement -> expression_statement .)
    DOUBLE          reduce using rule 198 (statement -> expression_statement .)
    SIGNED          reduce using rule 198 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 198 (statement -> expression_statement .)
    BOOL            reduce using rule 198 (statement -> expression_statement .)
    CONST           reduce using rule 198 (statement -> expression_statement .)
    RESTRICT        reduce using rule 198 (statement -> expression_statement .)
    VOLATILE        reduce using rule 198 (statement -> expression_statement .)
    INLINE          reduce using rule 198 (statement -> expression_statement .)
    ENUM            reduce using rule 198 (statement -> expression_statement .)
    STRUCT          reduce using rule 198 (statement -> expression_statement .)
    UNION           reduce using rule 198 (statement -> expression_statement .)
    INC_DEC         reduce using rule 198 (statement -> expression_statement .)
    SIZEOF          reduce using rule 198 (statement -> expression_statement .)
    (               reduce using rule 198 (statement -> expression_statement .)
    &               reduce using rule 198 (statement -> expression_statement .)
    *               reduce using rule 198 (statement -> expression_statement .)
    +               reduce using rule 198 (statement -> expression_statement .)
    -               reduce using rule 198 (statement -> expression_statement .)
    ~               reduce using rule 198 (statement -> expression_statement .)
    !               reduce using rule 198 (statement -> expression_statement .)
    CONSTANT        reduce using rule 198 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 198 (statement -> expression_statement .)
    ELSE            reduce using rule 198 (statement -> expression_statement .)


state 121

    (199) statement -> selection_statement .

    }               reduce using rule 199 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 199 (statement -> selection_statement .)
    CASE            reduce using rule 199 (statement -> selection_statement .)
    DEFAULT         reduce using rule 199 (statement -> selection_statement .)
    {               reduce using rule 199 (statement -> selection_statement .)
    ;               reduce using rule 199 (statement -> selection_statement .)
    IF              reduce using rule 199 (statement -> selection_statement .)
    SWITCH          reduce using rule 199 (statement -> selection_statement .)
    WHILE           reduce using rule 199 (statement -> selection_statement .)
    DO              reduce using rule 199 (statement -> selection_statement .)
    FOR             reduce using rule 199 (statement -> selection_statement .)
    GOTO            reduce using rule 199 (statement -> selection_statement .)
    CONTINUE        reduce using rule 199 (statement -> selection_statement .)
    BREAK           reduce using rule 199 (statement -> selection_statement .)
    RETURN          reduce using rule 199 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 199 (statement -> selection_statement .)
    EXTERN          reduce using rule 199 (statement -> selection_statement .)
    STATIC          reduce using rule 199 (statement -> selection_statement .)
    AUTO            reduce using rule 199 (statement -> selection_statement .)
    REGISTER        reduce using rule 199 (statement -> selection_statement .)
    VOID            reduce using rule 199 (statement -> selection_statement .)
    CHAR            reduce using rule 199 (statement -> selection_statement .)
    SHORT           reduce using rule 199 (statement -> selection_statement .)
    INT             reduce using rule 199 (statement -> selection_statement .)
    LONG            reduce using rule 199 (statement -> selection_statement .)
    FLOAT           reduce using rule 199 (statement -> selection_statement .)
    DOUBLE          reduce using rule 199 (statement -> selection_statement .)
    SIGNED          reduce using rule 199 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 199 (statement -> selection_statement .)
    BOOL            reduce using rule 199 (statement -> selection_statement .)
    CONST           reduce using rule 199 (statement -> selection_statement .)
    RESTRICT        reduce using rule 199 (statement -> selection_statement .)
    VOLATILE        reduce using rule 199 (statement -> selection_statement .)
    INLINE          reduce using rule 199 (statement -> selection_statement .)
    ENUM            reduce using rule 199 (statement -> selection_statement .)
    STRUCT          reduce using rule 199 (statement -> selection_statement .)
    UNION           reduce using rule 199 (statement -> selection_statement .)
    INC_DEC         reduce using rule 199 (statement -> selection_statement .)
    SIZEOF          reduce using rule 199 (statement -> selection_statement .)
    (               reduce using rule 199 (statement -> selection_statement .)
    &               reduce using rule 199 (statement -> selection_statement .)
    *               reduce using rule 199 (statement -> selection_statement .)
    +               reduce using rule 199 (statement -> selection_statement .)
    -               reduce using rule 199 (statement -> selection_statement .)
    ~               reduce using rule 199 (statement -> selection_statement .)
    !               reduce using rule 199 (statement -> selection_statement .)
    CONSTANT        reduce using rule 199 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 199 (statement -> selection_statement .)
    ELSE            reduce using rule 199 (statement -> selection_statement .)


state 122

    (200) statement -> iteration_statement .

    }               reduce using rule 200 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 200 (statement -> iteration_statement .)
    CASE            reduce using rule 200 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 200 (statement -> iteration_statement .)
    {               reduce using rule 200 (statement -> iteration_statement .)
    ;               reduce using rule 200 (statement -> iteration_statement .)
    IF              reduce using rule 200 (statement -> iteration_statement .)
    SWITCH          reduce using rule 200 (statement -> iteration_statement .)
    WHILE           reduce using rule 200 (statement -> iteration_statement .)
    DO              reduce using rule 200 (statement -> iteration_statement .)
    FOR             reduce using rule 200 (statement -> iteration_statement .)
    GOTO            reduce using rule 200 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 200 (statement -> iteration_statement .)
    BREAK           reduce using rule 200 (statement -> iteration_statement .)
    RETURN          reduce using rule 200 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 200 (statement -> iteration_statement .)
    EXTERN          reduce using rule 200 (statement -> iteration_statement .)
    STATIC          reduce using rule 200 (statement -> iteration_statement .)
    AUTO            reduce using rule 200 (statement -> iteration_statement .)
    REGISTER        reduce using rule 200 (statement -> iteration_statement .)
    VOID            reduce using rule 200 (statement -> iteration_statement .)
    CHAR            reduce using rule 200 (statement -> iteration_statement .)
    SHORT           reduce using rule 200 (statement -> iteration_statement .)
    INT             reduce using rule 200 (statement -> iteration_statement .)
    LONG            reduce using rule 200 (statement -> iteration_statement .)
    FLOAT           reduce using rule 200 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 200 (statement -> iteration_statement .)
    SIGNED          reduce using rule 200 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 200 (statement -> iteration_statement .)
    BOOL            reduce using rule 200 (statement -> iteration_statement .)
    CONST           reduce using rule 200 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 200 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 200 (statement -> iteration_statement .)
    INLINE          reduce using rule 200 (statement -> iteration_statement .)
    ENUM            reduce using rule 200 (statement -> iteration_statement .)
    STRUCT          reduce using rule 200 (statement -> iteration_statement .)
    UNION           reduce using rule 200 (statement -> iteration_statement .)
    INC_DEC         reduce using rule 200 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 200 (statement -> iteration_statement .)
    (               reduce using rule 200 (statement -> iteration_statement .)
    &               reduce using rule 200 (statement -> iteration_statement .)
    *               reduce using rule 200 (statement -> iteration_statement .)
    +               reduce using rule 200 (statement -> iteration_statement .)
    -               reduce using rule 200 (statement -> iteration_statement .)
    ~               reduce using rule 200 (statement -> iteration_statement .)
    !               reduce using rule 200 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 200 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 200 (statement -> iteration_statement .)
    ELSE            reduce using rule 200 (statement -> iteration_statement .)


state 123

    (201) statement -> jump_statement .

    }               reduce using rule 201 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 201 (statement -> jump_statement .)
    CASE            reduce using rule 201 (statement -> jump_statement .)
    DEFAULT         reduce using rule 201 (statement -> jump_statement .)
    {               reduce using rule 201 (statement -> jump_statement .)
    ;               reduce using rule 201 (statement -> jump_statement .)
    IF              reduce using rule 201 (statement -> jump_statement .)
    SWITCH          reduce using rule 201 (statement -> jump_statement .)
    WHILE           reduce using rule 201 (statement -> jump_statement .)
    DO              reduce using rule 201 (statement -> jump_statement .)
    FOR             reduce using rule 201 (statement -> jump_statement .)
    GOTO            reduce using rule 201 (statement -> jump_statement .)
    CONTINUE        reduce using rule 201 (statement -> jump_statement .)
    BREAK           reduce using rule 201 (statement -> jump_statement .)
    RETURN          reduce using rule 201 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 201 (statement -> jump_statement .)
    EXTERN          reduce using rule 201 (statement -> jump_statement .)
    STATIC          reduce using rule 201 (statement -> jump_statement .)
    AUTO            reduce using rule 201 (statement -> jump_statement .)
    REGISTER        reduce using rule 201 (statement -> jump_statement .)
    VOID            reduce using rule 201 (statement -> jump_statement .)
    CHAR            reduce using rule 201 (statement -> jump_statement .)
    SHORT           reduce using rule 201 (statement -> jump_statement .)
    INT             reduce using rule 201 (statement -> jump_statement .)
    LONG            reduce using rule 201 (statement -> jump_statement .)
    FLOAT           reduce using rule 201 (statement -> jump_statement .)
    DOUBLE          reduce using rule 201 (statement -> jump_statement .)
    SIGNED          reduce using rule 201 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 201 (statement -> jump_statement .)
    BOOL            reduce using rule 201 (statement -> jump_statement .)
    CONST           reduce using rule 201 (statement -> jump_statement .)
    RESTRICT        reduce using rule 201 (statement -> jump_statement .)
    VOLATILE        reduce using rule 201 (statement -> jump_statement .)
    INLINE          reduce using rule 201 (statement -> jump_statement .)
    ENUM            reduce using rule 201 (statement -> jump_statement .)
    STRUCT          reduce using rule 201 (statement -> jump_statement .)
    UNION           reduce using rule 201 (statement -> jump_statement .)
    INC_DEC         reduce using rule 201 (statement -> jump_statement .)
    SIZEOF          reduce using rule 201 (statement -> jump_statement .)
    (               reduce using rule 201 (statement -> jump_statement .)
    &               reduce using rule 201 (statement -> jump_statement .)
    *               reduce using rule 201 (statement -> jump_statement .)
    +               reduce using rule 201 (statement -> jump_statement .)
    -               reduce using rule 201 (statement -> jump_statement .)
    ~               reduce using rule 201 (statement -> jump_statement .)
    !               reduce using rule 201 (statement -> jump_statement .)
    CONSTANT        reduce using rule 201 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 201 (statement -> jump_statement .)
    ELSE            reduce using rule 201 (statement -> jump_statement .)


state 124

    (202) labeled_statement -> IDENTIFIER . : statement
    (143) primary_expression -> IDENTIFIER .

    :               shift and go to state 210
    [               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 143 (primary_expression -> IDENTIFIER .)
    INC_DEC         reduce using rule 143 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ASSIGN_OP       reduce using rule 143 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    SHIFT_OP        reduce using rule 143 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    GE_LE           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    EQ_NE           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 143 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 143 (primary_expression -> IDENTIFIER .)


state 125

    (203) labeled_statement -> CASE . constant_expression : statement
    (93) constant_expression -> . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 211
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 126

    (204) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 213


state 127

    (206) expression_statement -> expression . ;
    (148) expression -> expression . , assignment_expression

    ;               shift and go to state 214
    ,               shift and go to state 215


state 128

    (207) selection_statement -> IF . ( expression ) statement ELSE statement
    (208) selection_statement -> IF . ( expression ) statement

    (               shift and go to state 216


state 129

    (209) selection_statement -> SWITCH . ( expression ) statement

    (               shift and go to state 217


state 130

    (210) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 218


state 131

    (211) iteration_statement -> DO . statement WHILE ( expression ) ;
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 219
    expression                     shift and go to state 127
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 132

    (212) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (213) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (215) iteration_statement -> FOR . ( declaration expression_statement expression ) statement

    (               shift and go to state 220


state 133

    (216) jump_statement -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 221


state 134

    (217) jump_statement -> CONTINUE . ;

    ;               shift and go to state 222


state 135

    (218) jump_statement -> BREAK . ;

    ;               shift and go to state 223


state 136

    (219) jump_statement -> RETURN . ;
    (220) jump_statement -> RETURN . expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 224
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 225
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 137

    (147) expression -> assignment_expression .

    ;               reduce using rule 147 (expression -> assignment_expression .)
    ,               reduce using rule 147 (expression -> assignment_expression .)
    )               reduce using rule 147 (expression -> assignment_expression .)
    :               reduce using rule 147 (expression -> assignment_expression .)
    ]               reduce using rule 147 (expression -> assignment_expression .)


state 138

    (8) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)


state 139

    (76) direct_declarator -> direct_declarator [ type_qualifier_list . assignment_expression ]
    (77) direct_declarator -> direct_declarator [ type_qualifier_list . ]
    (80) direct_declarator -> direct_declarator [ type_qualifier_list . STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator [ type_qualifier_list . * ]
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 227
    STATIC          shift and go to state 228
    *               shift and go to state 229
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 226
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 140

    (78) direct_declarator -> direct_declarator [ assignment_expression . ]

    ]               shift and go to state 230


state 141

    (83) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    TYPEDEF         reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    EXTERN          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    STATIC          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    AUTO            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    REGISTER        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    SHORT           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    LONG            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    DOUBLE          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    SIGNED          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    UNSIGNED        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    CONST           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    RESTRICT        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    VOLATILE        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    INLINE          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ENUM            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    UNION           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)


state 142

    (79) direct_declarator -> direct_declarator [ STATIC . type_qualifier_list assignment_expression ]
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 231
    type_qualifier                 shift and go to state 66

state 143

    (82) direct_declarator -> direct_declarator [ * . ]
    (129) unary_operator -> * .

    ]               shift and go to state 232
    (               reduce using rule 129 (unary_operator -> * .)
    INC_DEC         reduce using rule 129 (unary_operator -> * .)
    SIZEOF          reduce using rule 129 (unary_operator -> * .)
    &               reduce using rule 129 (unary_operator -> * .)
    *               reduce using rule 129 (unary_operator -> * .)
    +               reduce using rule 129 (unary_operator -> * .)
    -               reduce using rule 129 (unary_operator -> * .)
    ~               reduce using rule 129 (unary_operator -> * .)
    !               reduce using rule 129 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> * .)
    CONSTANT        reduce using rule 129 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 129 (unary_operator -> * .)


state 144

    (84) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 233


state 145

    (86) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    TYPEDEF         reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    EXTERN          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    STATIC          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    AUTO            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    REGISTER        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    SHORT           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    LONG            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    DOUBLE          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    SIGNED          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    UNSIGNED        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    CONST           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    RESTRICT        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    VOLATILE        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    INLINE          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ENUM            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    UNION           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)


state 146

    (85) direct_declarator -> direct_declarator ( identifier_list . )
    (88) identifier_list -> identifier_list . , IDENTIFIER

    )               shift and go to state 234
    ,               shift and go to state 235


state 147

    (165) parameter_type_list -> parameter_list .
    (166) parameter_type_list -> parameter_list . , ELLIPSIS
    (168) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 165 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 236


state 148

    (87) identifier_list -> IDENTIFIER .

    )               reduce using rule 87 (identifier_list -> IDENTIFIER .)
    ,               reduce using rule 87 (identifier_list -> IDENTIFIER .)


state 149

    (167) parameter_list -> parameter_declaration .

    ,               reduce using rule 167 (parameter_list -> parameter_declaration .)
    )               reduce using rule 167 (parameter_list -> parameter_declaration .)


state 150

    (169) parameter_declaration -> declaration_specifiers . declarator
    (170) parameter_declaration -> declaration_specifiers . abstract_declarator
    (171) parameter_declaration -> declaration_specifiers .
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (151) abstract_declarator -> . pointer
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) abstract_declarator -> . pointer direct_abstract_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 171 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 171 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242

    declarator                     shift and go to state 237
    abstract_declarator            shift and go to state 238
    pointer                        shift and go to state 239
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 240

state 151

    (71) pointer -> * type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    (               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)


state 152

    (73) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ]               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_DEC         reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    &               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    +               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    -               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ~               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    !               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONSTANT        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 153

    (75) direct_declarator -> ( declarator ) .

    [               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    TYPEDEF         reduce using rule 75 (direct_declarator -> ( declarator ) .)
    EXTERN          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    STATIC          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    AUTO            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    REGISTER        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    SHORT           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 75 (direct_declarator -> ( declarator ) .)
    LONG            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    FLOAT           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    DOUBLE          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    SIGNED          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    UNSIGNED        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    CONST           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    RESTRICT        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    VOLATILE        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    INLINE          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ENUM            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    UNION           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 75 (direct_declarator -> ( declarator ) .)


state 154

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list . }
    (55) struct_declaration_list -> struct_declaration_list . struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 243
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 156
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 155

    (50) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOID            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CHAR            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SHORT           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INT             reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    LONG            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    FLOAT           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    DOUBLE          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SIGNED          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNSIGNED        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    BOOL            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INLINE          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ENUM            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STRUCT          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNION           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 156

    (55) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 157

    (56) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (62) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 244
    ,               shift and go to state 245


state 158

    (61) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 61 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 61 (struct_declarator_list -> struct_declarator .)


state 159

    (63) struct_declarator -> declarator .
    (65) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 63 (struct_declarator -> declarator .)
    ,               reduce using rule 63 (struct_declarator -> declarator .)
    :               shift and go to state 246


state 160

    (64) struct_declarator -> : . constant_expression
    (93) constant_expression -> . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 247
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 161

    (57) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    :               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 162

    (59) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 163

    (40) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    VOID            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    CHAR            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    SHORT           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    INT             reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    LONG            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    FLOAT           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    DOUBLE          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    SIGNED          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    UNSIGNED        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    BOOL            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    INLINE          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ENUM            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    STRUCT          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    UNION           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    IDENTIFIER      reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)


state 164

    (42) enum_specifier -> ENUM { enumerator_list , . }
    (46) enumerator_list -> enumerator_list , . enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 248
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 249

state 165

    (48) enumerator -> IDENTIFIER = . constant_expression
    (93) constant_expression -> . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 250
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 166

    (41) enum_specifier -> ENUM IDENTIFIER { enumerator_list . }
    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list . , }
    (46) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 251
    ,               shift and go to state 252


state 167

    (179) initializer -> { initializer_list . }
    (180) initializer -> { initializer_list . , }
    (176) initializer_list -> initializer_list . , initializer
    (177) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 253
    ,               shift and go to state 254


state 168

    (174) initializer_list -> initializer .

    }               reduce using rule 174 (initializer_list -> initializer .)
    ,               reduce using rule 174 (initializer_list -> initializer .)


state 169

    (175) initializer_list -> designation . initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 255
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 170

    (181) designation -> designator_list . =
    (183) designator_list -> designator_list . designator
    (184) designator -> . [ constant_expression ]
    (185) designator -> . . IDENTIFIER

    =               shift and go to state 256
    [               shift and go to state 172
    .               shift and go to state 173

    designator                     shift and go to state 257

state 171

    (182) designator_list -> designator .

    =               reduce using rule 182 (designator_list -> designator .)
    [               reduce using rule 182 (designator_list -> designator .)
    .               reduce using rule 182 (designator_list -> designator .)


state 172

    (184) designator -> [ . constant_expression ]
    (93) constant_expression -> . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 258
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 173

    (185) designator -> . . IDENTIFIER

    IDENTIFIER      shift and go to state 259


state 174

    (90) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    unary_expression               shift and go to state 85
    assignment_expression          shift and go to state 260
    conditional_expression         shift and go to state 84
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 175

    (91) assignment_operator -> = .

    INC_DEC         reduce using rule 91 (assignment_operator -> = .)
    SIZEOF          reduce using rule 91 (assignment_operator -> = .)
    (               reduce using rule 91 (assignment_operator -> = .)
    &               reduce using rule 91 (assignment_operator -> = .)
    *               reduce using rule 91 (assignment_operator -> = .)
    +               reduce using rule 91 (assignment_operator -> = .)
    -               reduce using rule 91 (assignment_operator -> = .)
    ~               reduce using rule 91 (assignment_operator -> = .)
    !               reduce using rule 91 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 91 (assignment_operator -> = .)
    CONSTANT        reduce using rule 91 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 91 (assignment_operator -> = .)


state 176

    (92) assignment_operator -> ASSIGN_OP .

    INC_DEC         reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    SIZEOF          reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    (               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    &               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    *               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    +               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    -               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    ~               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    !               reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    IDENTIFIER      reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    CONSTANT        reduce using rule 92 (assignment_operator -> ASSIGN_OP .)
    STRING_LITERAL  reduce using rule 92 (assignment_operator -> ASSIGN_OP .)


state 177

    (95) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_or_expression          shift and go to state 86
    expression                     shift and go to state 261
    conditional_expression         shift and go to state 84
    assignment_expression          shift and go to state 137
    unary_expression               shift and go to state 85
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 178

    (97) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_and_expression         shift and go to state 262
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 179

    (135) postfix_expression -> postfix_expression [ . expression ]
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    postfix_expression             shift and go to state 87
    expression                     shift and go to state 263
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 180

    (136) postfix_expression -> postfix_expression ( . )
    (137) postfix_expression -> postfix_expression ( . argument_expression_list )
    (172) argument_expression_list -> . assignment_expression
    (173) argument_expression_list -> . argument_expression_list , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 264
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    postfix_expression             shift and go to state 87
    argument_expression_list       shift and go to state 265
    assignment_expression          shift and go to state 266
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 181

    (138) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 267


state 182

    (139) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 268


state 183

    (140) postfix_expression -> postfix_expression INC_DEC .

    [               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    (               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    .               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    PTR_OP          reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    INC_DEC         reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    =               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ASSIGN_OP       reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    *               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    /               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    %               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    +               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    -               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    SHIFT_OP        reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    <               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    >               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    GE_LE           reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    EQ_NE           reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    &               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ^               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    |               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    AND_OP          reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ?               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    OR_OP           reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ;               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ,               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    ]               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    }               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    )               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)
    :               reduce using rule 140 (postfix_expression -> postfix_expression INC_DEC .)


state 184

    (124) unary_expression -> INC_DEC unary_expression .

    =               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ASSIGN_OP       reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    *               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    /               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    %               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    +               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    -               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    SHIFT_OP        reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    <               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    >               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    GE_LE           reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    EQ_NE           reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    &               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ^               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    |               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    AND_OP          reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ?               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    OR_OP           reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ;               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ,               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    ]               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    }               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    )               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)
    :               reduce using rule 124 (unary_expression -> INC_DEC unary_expression .)


state 185

    (141) postfix_expression -> ( . type_name ) { initializer_list }
    (142) postfix_expression -> ( . type_name ) { initializer_list , }
    (146) primary_expression -> ( . expression )
    (149) type_name -> . specifier_qualifier_list
    (150) type_name -> . specifier_qualifier_list abstract_declarator
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 269
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 186

    (125) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_OP       reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    SHIFT_OP        reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    GE_LE           reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    EQ_NE           reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 125 (unary_expression -> unary_operator cast_expression .)


state 187

    (121) cast_expression -> unary_expression .

    =               reduce using rule 121 (cast_expression -> unary_expression .)
    ASSIGN_OP       reduce using rule 121 (cast_expression -> unary_expression .)
    *               reduce using rule 121 (cast_expression -> unary_expression .)
    /               reduce using rule 121 (cast_expression -> unary_expression .)
    %               reduce using rule 121 (cast_expression -> unary_expression .)
    +               reduce using rule 121 (cast_expression -> unary_expression .)
    -               reduce using rule 121 (cast_expression -> unary_expression .)
    SHIFT_OP        reduce using rule 121 (cast_expression -> unary_expression .)
    <               reduce using rule 121 (cast_expression -> unary_expression .)
    >               reduce using rule 121 (cast_expression -> unary_expression .)
    GE_LE           reduce using rule 121 (cast_expression -> unary_expression .)
    EQ_NE           reduce using rule 121 (cast_expression -> unary_expression .)
    &               reduce using rule 121 (cast_expression -> unary_expression .)
    ^               reduce using rule 121 (cast_expression -> unary_expression .)
    |               reduce using rule 121 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 121 (cast_expression -> unary_expression .)
    ?               reduce using rule 121 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 121 (cast_expression -> unary_expression .)
    ;               reduce using rule 121 (cast_expression -> unary_expression .)
    ,               reduce using rule 121 (cast_expression -> unary_expression .)
    ]               reduce using rule 121 (cast_expression -> unary_expression .)
    }               reduce using rule 121 (cast_expression -> unary_expression .)
    )               reduce using rule 121 (cast_expression -> unary_expression .)
    :               reduce using rule 121 (cast_expression -> unary_expression .)


state 188

    (122) cast_expression -> ( . type_name ) cast_expression
    (141) postfix_expression -> ( . type_name ) { initializer_list }
    (142) postfix_expression -> ( . type_name ) { initializer_list , }
    (146) primary_expression -> ( . expression )
    (149) type_name -> . specifier_qualifier_list
    (150) type_name -> . specifier_qualifier_list abstract_declarator
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 270
    cast_expression                shift and go to state 90
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 189

    (126) unary_expression -> SIZEOF unary_expression .

    =               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ASSIGN_OP       reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_OP        reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    GE_LE           reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    EQ_NE           reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 126 (unary_expression -> SIZEOF unary_expression .)


state 190

    (127) unary_expression -> SIZEOF ( . type_name )
    (141) postfix_expression -> ( . type_name ) { initializer_list }
    (142) postfix_expression -> ( . type_name ) { initializer_list , }
    (146) primary_expression -> ( . expression )
    (149) type_name -> . specifier_qualifier_list
    (150) type_name -> . specifier_qualifier_list abstract_declarator
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    type_name                      shift and go to state 271
    expression                     shift and go to state 192
    specifier_qualifier_list       shift and go to state 193
    assignment_expression          shift and go to state 137
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 191

    (141) postfix_expression -> ( type_name . ) { initializer_list }
    (142) postfix_expression -> ( type_name . ) { initializer_list , }
    (122) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 272


state 192

    (146) primary_expression -> ( expression . )
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 273
    ,               shift and go to state 215


state 193

    (149) type_name -> specifier_qualifier_list .
    (150) type_name -> specifier_qualifier_list . abstract_declarator
    (151) abstract_declarator -> . pointer
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) abstract_declarator -> . pointer direct_abstract_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 149 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 42
    (               shift and go to state 276
    [               shift and go to state 242

    abstract_declarator            shift and go to state 274
    pointer                        shift and go to state 275
    direct_abstract_declarator     shift and go to state 240

state 194

    (99) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    inclusive_or_expression        shift and go to state 277
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 195

    (101) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    exclusive_or_expression        shift and go to state 278
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 196

    (103) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    and_expression                 shift and go to state 279
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 197

    (105) and_expression -> and_expression & . equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    equality_expression            shift and go to state 280
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 198

    (107) equality_expression -> equality_expression EQ_NE . relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    relational_expression          shift and go to state 281
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 199

    (109) relational_expression -> relational_expression < . shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 282
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 200

    (110) relational_expression -> relational_expression > . shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 201

    (111) relational_expression -> relational_expression GE_LE . shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 202

    (113) shift_expression -> shift_expression SHIFT_OP . additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    additive_expression            shift and go to state 285
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 203

    (115) additive_expression -> additive_expression + . multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    multiplicative_expression      shift and go to state 286
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 204

    (116) additive_expression -> additive_expression - . multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    multiplicative_expression      shift and go to state 287
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 205

    (118) multiplicative_expression -> multiplicative_expression * . cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 288
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 206

    (119) multiplicative_expression -> multiplicative_expression / . cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 289
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 207

    (120) multiplicative_expression -> multiplicative_expression % . cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 290
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 208

    (191) compound_statement -> { block_item_list } .

    TYPEDEF         reduce using rule 191 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 191 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 191 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 191 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 191 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 191 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 191 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 191 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 191 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 191 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 191 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 191 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 191 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 191 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 191 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 191 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 191 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 191 (compound_statement -> { block_item_list } .)
    INLINE          reduce using rule 191 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 191 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 191 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 191 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 191 (compound_statement -> { block_item_list } .)
    }               reduce using rule 191 (compound_statement -> { block_item_list } .)
    IDENTIFIER      reduce using rule 191 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 191 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 191 (compound_statement -> { block_item_list } .)
    {               reduce using rule 191 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 191 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 191 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 191 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 191 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 191 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 191 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 191 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 191 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 191 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 191 (compound_statement -> { block_item_list } .)
    INC_DEC         reduce using rule 191 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 191 (compound_statement -> { block_item_list } .)
    (               reduce using rule 191 (compound_statement -> { block_item_list } .)
    &               reduce using rule 191 (compound_statement -> { block_item_list } .)
    *               reduce using rule 191 (compound_statement -> { block_item_list } .)
    +               reduce using rule 191 (compound_statement -> { block_item_list } .)
    -               reduce using rule 191 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 191 (compound_statement -> { block_item_list } .)
    !               reduce using rule 191 (compound_statement -> { block_item_list } .)
    CONSTANT        reduce using rule 191 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 191 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 191 (compound_statement -> { block_item_list } .)


state 209

    (193) block_item_list -> block_item_list block_item .

    }               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 193 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 193 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 193 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 193 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 193 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 193 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 193 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 193 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 193 (block_item_list -> block_item_list block_item .)
    INC_DEC         reduce using rule 193 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 193 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 193 (block_item_list -> block_item_list block_item .)
    CONSTANT        reduce using rule 193 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 193 (block_item_list -> block_item_list block_item .)


state 210

    (202) labeled_statement -> IDENTIFIER : . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 291
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 211

    (203) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 292


state 212

    (93) constant_expression -> conditional_expression .

    :               reduce using rule 93 (constant_expression -> conditional_expression .)
    ;               reduce using rule 93 (constant_expression -> conditional_expression .)
    ,               reduce using rule 93 (constant_expression -> conditional_expression .)
    }               reduce using rule 93 (constant_expression -> conditional_expression .)
    ]               reduce using rule 93 (constant_expression -> conditional_expression .)


state 213

    (204) labeled_statement -> DEFAULT : . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 293
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 214

    (206) expression_statement -> expression ; .

    }               reduce using rule 206 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 206 (expression_statement -> expression ; .)
    CASE            reduce using rule 206 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 206 (expression_statement -> expression ; .)
    {               reduce using rule 206 (expression_statement -> expression ; .)
    ;               reduce using rule 206 (expression_statement -> expression ; .)
    IF              reduce using rule 206 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 206 (expression_statement -> expression ; .)
    WHILE           reduce using rule 206 (expression_statement -> expression ; .)
    DO              reduce using rule 206 (expression_statement -> expression ; .)
    FOR             reduce using rule 206 (expression_statement -> expression ; .)
    GOTO            reduce using rule 206 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 206 (expression_statement -> expression ; .)
    BREAK           reduce using rule 206 (expression_statement -> expression ; .)
    RETURN          reduce using rule 206 (expression_statement -> expression ; .)
    TYPEDEF         reduce using rule 206 (expression_statement -> expression ; .)
    EXTERN          reduce using rule 206 (expression_statement -> expression ; .)
    STATIC          reduce using rule 206 (expression_statement -> expression ; .)
    AUTO            reduce using rule 206 (expression_statement -> expression ; .)
    REGISTER        reduce using rule 206 (expression_statement -> expression ; .)
    VOID            reduce using rule 206 (expression_statement -> expression ; .)
    CHAR            reduce using rule 206 (expression_statement -> expression ; .)
    SHORT           reduce using rule 206 (expression_statement -> expression ; .)
    INT             reduce using rule 206 (expression_statement -> expression ; .)
    LONG            reduce using rule 206 (expression_statement -> expression ; .)
    FLOAT           reduce using rule 206 (expression_statement -> expression ; .)
    DOUBLE          reduce using rule 206 (expression_statement -> expression ; .)
    SIGNED          reduce using rule 206 (expression_statement -> expression ; .)
    UNSIGNED        reduce using rule 206 (expression_statement -> expression ; .)
    BOOL            reduce using rule 206 (expression_statement -> expression ; .)
    CONST           reduce using rule 206 (expression_statement -> expression ; .)
    RESTRICT        reduce using rule 206 (expression_statement -> expression ; .)
    VOLATILE        reduce using rule 206 (expression_statement -> expression ; .)
    INLINE          reduce using rule 206 (expression_statement -> expression ; .)
    ENUM            reduce using rule 206 (expression_statement -> expression ; .)
    STRUCT          reduce using rule 206 (expression_statement -> expression ; .)
    UNION           reduce using rule 206 (expression_statement -> expression ; .)
    INC_DEC         reduce using rule 206 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 206 (expression_statement -> expression ; .)
    (               reduce using rule 206 (expression_statement -> expression ; .)
    &               reduce using rule 206 (expression_statement -> expression ; .)
    *               reduce using rule 206 (expression_statement -> expression ; .)
    +               reduce using rule 206 (expression_statement -> expression ; .)
    -               reduce using rule 206 (expression_statement -> expression ; .)
    ~               reduce using rule 206 (expression_statement -> expression ; .)
    !               reduce using rule 206 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 206 (expression_statement -> expression ; .)
    STRING_LITERAL  reduce using rule 206 (expression_statement -> expression ; .)
    ELSE            reduce using rule 206 (expression_statement -> expression ; .)
    )               reduce using rule 206 (expression_statement -> expression ; .)


state 215

    (148) expression -> expression , . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 294
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 216

    (207) selection_statement -> IF ( . expression ) statement ELSE statement
    (208) selection_statement -> IF ( . expression ) statement
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 295
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 217

    (209) selection_statement -> SWITCH ( . expression ) statement
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 296
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 218

    (210) iteration_statement -> WHILE ( . expression ) statement
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 297
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 219

    (211) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 298


state 220

    (212) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (213) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (214) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (215) iteration_statement -> FOR ( . declaration expression_statement expression ) statement
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    ENUM            shift and go to state 32
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 299
    expression                     shift and go to state 127
    declaration                    shift and go to state 300
    declaration_specifiers         shift and go to state 53
    assignment_expression          shift and go to state 137
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 221

    (216) jump_statement -> GOTO IDENTIFIER . ;

    ;               shift and go to state 301


state 222

    (217) jump_statement -> CONTINUE ; .

    }               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 217 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 217 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 217 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 217 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 217 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 217 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 217 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    INLINE          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 217 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 217 (jump_statement -> CONTINUE ; .)
    INC_DEC         reduce using rule 217 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 217 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 217 (jump_statement -> CONTINUE ; .)
    CONSTANT        reduce using rule 217 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 217 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 217 (jump_statement -> CONTINUE ; .)


state 223

    (218) jump_statement -> BREAK ; .

    }               reduce using rule 218 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 218 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 218 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 218 (jump_statement -> BREAK ; .)
    {               reduce using rule 218 (jump_statement -> BREAK ; .)
    ;               reduce using rule 218 (jump_statement -> BREAK ; .)
    IF              reduce using rule 218 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 218 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 218 (jump_statement -> BREAK ; .)
    DO              reduce using rule 218 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 218 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 218 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 218 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 218 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 218 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 218 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 218 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 218 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 218 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 218 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 218 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 218 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 218 (jump_statement -> BREAK ; .)
    INT             reduce using rule 218 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 218 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 218 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 218 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 218 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 218 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 218 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 218 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 218 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 218 (jump_statement -> BREAK ; .)
    INLINE          reduce using rule 218 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 218 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 218 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 218 (jump_statement -> BREAK ; .)
    INC_DEC         reduce using rule 218 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 218 (jump_statement -> BREAK ; .)
    (               reduce using rule 218 (jump_statement -> BREAK ; .)
    &               reduce using rule 218 (jump_statement -> BREAK ; .)
    *               reduce using rule 218 (jump_statement -> BREAK ; .)
    +               reduce using rule 218 (jump_statement -> BREAK ; .)
    -               reduce using rule 218 (jump_statement -> BREAK ; .)
    ~               reduce using rule 218 (jump_statement -> BREAK ; .)
    !               reduce using rule 218 (jump_statement -> BREAK ; .)
    CONSTANT        reduce using rule 218 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 218 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 218 (jump_statement -> BREAK ; .)


state 224

    (219) jump_statement -> RETURN ; .

    }               reduce using rule 219 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 219 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 219 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 219 (jump_statement -> RETURN ; .)
    {               reduce using rule 219 (jump_statement -> RETURN ; .)
    ;               reduce using rule 219 (jump_statement -> RETURN ; .)
    IF              reduce using rule 219 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 219 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 219 (jump_statement -> RETURN ; .)
    DO              reduce using rule 219 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 219 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 219 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 219 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 219 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 219 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 219 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 219 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 219 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 219 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 219 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 219 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 219 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 219 (jump_statement -> RETURN ; .)
    INT             reduce using rule 219 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 219 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 219 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 219 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 219 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 219 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 219 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 219 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 219 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 219 (jump_statement -> RETURN ; .)
    INLINE          reduce using rule 219 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 219 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 219 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 219 (jump_statement -> RETURN ; .)
    INC_DEC         reduce using rule 219 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 219 (jump_statement -> RETURN ; .)
    (               reduce using rule 219 (jump_statement -> RETURN ; .)
    &               reduce using rule 219 (jump_statement -> RETURN ; .)
    *               reduce using rule 219 (jump_statement -> RETURN ; .)
    +               reduce using rule 219 (jump_statement -> RETURN ; .)
    -               reduce using rule 219 (jump_statement -> RETURN ; .)
    ~               reduce using rule 219 (jump_statement -> RETURN ; .)
    !               reduce using rule 219 (jump_statement -> RETURN ; .)
    CONSTANT        reduce using rule 219 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 219 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 219 (jump_statement -> RETURN ; .)


state 225

    (220) jump_statement -> RETURN expression . ;
    (148) expression -> expression . , assignment_expression

    ;               shift and go to state 302
    ,               shift and go to state 215


state 226

    (76) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression . ]

    ]               shift and go to state 303


state 227

    (77) direct_declarator -> direct_declarator [ type_qualifier_list ] .

    [               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    (               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    =               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    {               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    TYPEDEF         reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    EXTERN          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STATIC          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    AUTO            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    REGISTER        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOID            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CHAR            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SHORT           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INT             reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    LONG            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    FLOAT           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    DOUBLE          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SIGNED          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNSIGNED        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    BOOL            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CONST           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    RESTRICT        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOLATILE        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INLINE          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ENUM            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STRUCT          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNION           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ;               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ,               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    )               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    :               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)


state 228

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC . assignment_expression ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 304
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 229

    (81) direct_declarator -> direct_declarator [ type_qualifier_list * . ]
    (129) unary_operator -> * .

    ]               shift and go to state 305
    (               reduce using rule 129 (unary_operator -> * .)
    INC_DEC         reduce using rule 129 (unary_operator -> * .)
    SIZEOF          reduce using rule 129 (unary_operator -> * .)
    &               reduce using rule 129 (unary_operator -> * .)
    *               reduce using rule 129 (unary_operator -> * .)
    +               reduce using rule 129 (unary_operator -> * .)
    -               reduce using rule 129 (unary_operator -> * .)
    ~               reduce using rule 129 (unary_operator -> * .)
    !               reduce using rule 129 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> * .)
    CONSTANT        reduce using rule 129 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 129 (unary_operator -> * .)


state 230

    (78) direct_declarator -> direct_declarator [ assignment_expression ] .

    [               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    (               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    =               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    {               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    TYPEDEF         reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    EXTERN          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STATIC          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    AUTO            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    REGISTER        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOID            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CHAR            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SHORT           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INT             reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    LONG            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    FLOAT           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    DOUBLE          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SIGNED          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNSIGNED        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    BOOL            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CONST           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    RESTRICT        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOLATILE        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INLINE          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ENUM            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STRUCT          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNION           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ;               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ,               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    )               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    :               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)


state 231

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list . assignment_expression ]
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 306
    type_qualifier                 shift and go to state 152
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 232

    (82) direct_declarator -> direct_declarator [ * ] .

    [               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    (               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    =               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    {               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    TYPEDEF         reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    EXTERN          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    STATIC          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    AUTO            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    REGISTER        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    VOID            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    CHAR            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    SHORT           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    INT             reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    LONG            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    FLOAT           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    DOUBLE          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    SIGNED          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    UNSIGNED        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    BOOL            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    CONST           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    RESTRICT        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    VOLATILE        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    INLINE          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ENUM            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    STRUCT          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    UNION           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ;               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ,               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    )               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    :               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)


state 233

    (84) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPEDEF         reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    EXTERN          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STATIC          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    AUTO            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    REGISTER        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SHORT           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    LONG            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    FLOAT           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    DOUBLE          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SIGNED          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNSIGNED        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    BOOL            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CONST           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    RESTRICT        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOLATILE        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INLINE          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ENUM            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNION           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 234

    (85) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPEDEF         reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    EXTERN          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STATIC          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    AUTO            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    REGISTER        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SHORT           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    LONG            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    FLOAT           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    DOUBLE          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SIGNED          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNSIGNED        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CONST           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    RESTRICT        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOLATILE        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INLINE          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ENUM            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNION           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 235

    (88) identifier_list -> identifier_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 307


state 236

    (166) parameter_type_list -> parameter_list , . ELLIPSIS
    (168) parameter_list -> parameter_list , . parameter_declaration
    (169) parameter_declaration -> . declaration_specifiers declarator
    (170) parameter_declaration -> . declaration_specifiers abstract_declarator
    (171) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 308
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_declaration          shift and go to state 309
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 237

    (169) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 169 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 169 (parameter_declaration -> declaration_specifiers declarator .)


state 238

    (170) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 170 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 170 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 239

    (66) declarator -> pointer . direct_declarator
    (151) abstract_declarator -> pointer .
    (153) abstract_declarator -> pointer . direct_abstract_declarator
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 151 (abstract_declarator -> pointer .)
    )               reduce using rule 151 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242

    direct_declarator              shift and go to state 61
    direct_abstract_declarator     shift and go to state 310

state 240

    (152) abstract_declarator -> direct_abstract_declarator .
    (157) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (158) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (160) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (163) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (164) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 152 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 152 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 311
    (               shift and go to state 312


state 241

    (75) direct_declarator -> ( . declarator )
    (154) direct_abstract_declarator -> ( . abstract_declarator )
    (161) direct_abstract_declarator -> ( . )
    (162) direct_abstract_declarator -> ( . parameter_type_list )
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (151) abstract_declarator -> . pointer
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) abstract_declarator -> . pointer direct_abstract_declarator
    (165) parameter_type_list -> . parameter_list
    (166) parameter_type_list -> . parameter_list , ELLIPSIS
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (167) parameter_list -> . parameter_declaration
    (168) parameter_list -> . parameter_list , parameter_declaration
    (169) parameter_declaration -> . declaration_specifiers declarator
    (170) parameter_declaration -> . declaration_specifiers abstract_declarator
    (171) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 313
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 241
    [               shift and go to state 242
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declarator                     shift and go to state 67
    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    pointer                        shift and go to state 239
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 240
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 242

    (155) direct_abstract_declarator -> [ . ]
    (156) direct_abstract_declarator -> [ . assignment_expression ]
    (159) direct_abstract_declarator -> [ . * ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 316
    *               shift and go to state 318
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 243

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .

    TYPEDEF         reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    EXTERN          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STATIC          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    AUTO            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    REGISTER        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOID            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CHAR            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SHORT           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INT             reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    LONG            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    FLOAT           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    DOUBLE          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SIGNED          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNSIGNED        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    BOOL            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CONST           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    RESTRICT        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOLATILE        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INLINE          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ENUM            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STRUCT          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNION           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ;               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    *               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    (               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    [               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ,               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    )               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    :               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)


state 244

    (56) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 245

    (62) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (63) struct_declarator -> . declarator
    (64) struct_declarator -> . : constant_expression
    (65) struct_declarator -> . declarator : constant_expression
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 160
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator              shift and go to state 319
    declarator                     shift and go to state 159
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 246

    (65) struct_declarator -> declarator : . constant_expression
    (93) constant_expression -> . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    constant_expression            shift and go to state 320
    conditional_expression         shift and go to state 212
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 247

    (64) struct_declarator -> : constant_expression .

    ;               reduce using rule 64 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 64 (struct_declarator -> : constant_expression .)


state 248

    (42) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    VOID            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    CHAR            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    SHORT           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    INT             reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    LONG            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    FLOAT           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    DOUBLE          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    SIGNED          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    UNSIGNED        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    BOOL            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    INLINE          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ENUM            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    STRUCT          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    UNION           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    IDENTIFIER      reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)


state 249

    (46) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 46 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 46 (enumerator_list -> enumerator_list , enumerator .)


state 250

    (48) enumerator -> IDENTIFIER = constant_expression .

    }               reduce using rule 48 (enumerator -> IDENTIFIER = constant_expression .)
    ,               reduce using rule 48 (enumerator -> IDENTIFIER = constant_expression .)


state 251

    (41) enum_specifier -> ENUM IDENTIFIER { enumerator_list } .

    TYPEDEF         reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    EXTERN          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STATIC          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    AUTO            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    REGISTER        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOID            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CHAR            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SHORT           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INT             reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    LONG            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    FLOAT           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    DOUBLE          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SIGNED          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNSIGNED        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    BOOL            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CONST           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    RESTRICT        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOLATILE        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INLINE          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ENUM            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STRUCT          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNION           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ;               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    *               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    IDENTIFIER      reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    (               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    [               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ,               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    )               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    :               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)


state 252

    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list , . }
    (46) enumerator_list -> enumerator_list , . enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 321
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 249

state 253

    (179) initializer -> { initializer_list } .

    ;               reduce using rule 179 (initializer -> { initializer_list } .)
    ,               reduce using rule 179 (initializer -> { initializer_list } .)
    }               reduce using rule 179 (initializer -> { initializer_list } .)


state 254

    (180) initializer -> { initializer_list , . }
    (176) initializer_list -> initializer_list , . initializer
    (177) initializer_list -> initializer_list , . designation initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (181) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (182) designator_list -> . designator
    (183) designator_list -> . designator_list designator
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (184) designator -> . [ constant_expression ]
    (185) designator -> . . IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 322
    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 323
    designation                    shift and go to state 324
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 255

    (175) initializer_list -> designation initializer .

    }               reduce using rule 175 (initializer_list -> designation initializer .)
    ,               reduce using rule 175 (initializer_list -> designation initializer .)


state 256

    (181) designation -> designator_list = .

    {               reduce using rule 181 (designation -> designator_list = .)
    INC_DEC         reduce using rule 181 (designation -> designator_list = .)
    SIZEOF          reduce using rule 181 (designation -> designator_list = .)
    (               reduce using rule 181 (designation -> designator_list = .)
    &               reduce using rule 181 (designation -> designator_list = .)
    *               reduce using rule 181 (designation -> designator_list = .)
    +               reduce using rule 181 (designation -> designator_list = .)
    -               reduce using rule 181 (designation -> designator_list = .)
    ~               reduce using rule 181 (designation -> designator_list = .)
    !               reduce using rule 181 (designation -> designator_list = .)
    IDENTIFIER      reduce using rule 181 (designation -> designator_list = .)
    CONSTANT        reduce using rule 181 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 181 (designation -> designator_list = .)


state 257

    (183) designator_list -> designator_list designator .

    =               reduce using rule 183 (designator_list -> designator_list designator .)
    [               reduce using rule 183 (designator_list -> designator_list designator .)
    .               reduce using rule 183 (designator_list -> designator_list designator .)


state 258

    (184) designator -> [ constant_expression . ]

    ]               shift and go to state 325


state 259

    (185) designator -> . IDENTIFIER .

    =               reduce using rule 185 (designator -> . IDENTIFIER .)
    [               reduce using rule 185 (designator -> . IDENTIFIER .)
    .               reduce using rule 185 (designator -> . IDENTIFIER .)


state 260

    (90) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 261

    (95) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (148) expression -> expression . , assignment_expression

    :               shift and go to state 326
    ,               shift and go to state 215


state 262

    (97) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (99) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 97 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 194


state 263

    (135) postfix_expression -> postfix_expression [ expression . ]
    (148) expression -> expression . , assignment_expression

    ]               shift and go to state 327
    ,               shift and go to state 215


state 264

    (136) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    INC_DEC         reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ASSIGN_OP       reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    SHIFT_OP        reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    GE_LE           reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    EQ_NE           reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 136 (postfix_expression -> postfix_expression ( ) .)


state 265

    (137) postfix_expression -> postfix_expression ( argument_expression_list . )
    (173) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 328
    ,               shift and go to state 329


state 266

    (172) argument_expression_list -> assignment_expression .

    )               reduce using rule 172 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 172 (argument_expression_list -> assignment_expression .)


state 267

    (138) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    PTR_OP          reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_DEC         reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ASSIGN_OP       reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SHIFT_OP        reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_LE           reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_NE           reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_OP          reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_OP           reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    }               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 138 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 268

    (139) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    [               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    (               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    .               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_DEC         reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    =               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ASSIGN_OP       reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    *               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    /               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    %               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    +               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    -               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SHIFT_OP        reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    <               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    >               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_LE           reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_NE           reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    &               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ^               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    |               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ?               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ;               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ,               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ]               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    }               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    )               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    :               reduce using rule 139 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 269

    (141) postfix_expression -> ( type_name . ) { initializer_list }
    (142) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 330


state 270

    (122) cast_expression -> ( type_name . ) cast_expression
    (141) postfix_expression -> ( type_name . ) { initializer_list }
    (142) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 331


state 271

    (127) unary_expression -> SIZEOF ( type_name . )
    (141) postfix_expression -> ( type_name . ) { initializer_list }
    (142) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 332


state 272

    (141) postfix_expression -> ( type_name ) . { initializer_list }
    (142) postfix_expression -> ( type_name ) . { initializer_list , }
    (122) cast_expression -> ( type_name ) . cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    {               shift and go to state 333
    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 334
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 273

    (146) primary_expression -> ( expression ) .

    [               reduce using rule 146 (primary_expression -> ( expression ) .)
    (               reduce using rule 146 (primary_expression -> ( expression ) .)
    .               reduce using rule 146 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 146 (primary_expression -> ( expression ) .)
    INC_DEC         reduce using rule 146 (primary_expression -> ( expression ) .)
    =               reduce using rule 146 (primary_expression -> ( expression ) .)
    ASSIGN_OP       reduce using rule 146 (primary_expression -> ( expression ) .)
    *               reduce using rule 146 (primary_expression -> ( expression ) .)
    /               reduce using rule 146 (primary_expression -> ( expression ) .)
    %               reduce using rule 146 (primary_expression -> ( expression ) .)
    +               reduce using rule 146 (primary_expression -> ( expression ) .)
    -               reduce using rule 146 (primary_expression -> ( expression ) .)
    SHIFT_OP        reduce using rule 146 (primary_expression -> ( expression ) .)
    <               reduce using rule 146 (primary_expression -> ( expression ) .)
    >               reduce using rule 146 (primary_expression -> ( expression ) .)
    GE_LE           reduce using rule 146 (primary_expression -> ( expression ) .)
    EQ_NE           reduce using rule 146 (primary_expression -> ( expression ) .)
    &               reduce using rule 146 (primary_expression -> ( expression ) .)
    ^               reduce using rule 146 (primary_expression -> ( expression ) .)
    |               reduce using rule 146 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 146 (primary_expression -> ( expression ) .)
    ?               reduce using rule 146 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 146 (primary_expression -> ( expression ) .)
    ;               reduce using rule 146 (primary_expression -> ( expression ) .)
    ,               reduce using rule 146 (primary_expression -> ( expression ) .)
    ]               reduce using rule 146 (primary_expression -> ( expression ) .)
    }               reduce using rule 146 (primary_expression -> ( expression ) .)
    )               reduce using rule 146 (primary_expression -> ( expression ) .)
    :               reduce using rule 146 (primary_expression -> ( expression ) .)


state 274

    (150) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 150 (type_name -> specifier_qualifier_list abstract_declarator .)


state 275

    (151) abstract_declarator -> pointer .
    (153) abstract_declarator -> pointer . direct_abstract_declarator
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 151 (abstract_declarator -> pointer .)
    (               shift and go to state 276
    [               shift and go to state 242

    direct_abstract_declarator     shift and go to state 310

state 276

    (154) direct_abstract_declarator -> ( . abstract_declarator )
    (161) direct_abstract_declarator -> ( . )
    (162) direct_abstract_declarator -> ( . parameter_type_list )
    (151) abstract_declarator -> . pointer
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) abstract_declarator -> . pointer direct_abstract_declarator
    (165) parameter_type_list -> . parameter_list
    (166) parameter_type_list -> . parameter_list , ELLIPSIS
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (154) direct_abstract_declarator -> . ( abstract_declarator )
    (155) direct_abstract_declarator -> . [ ]
    (156) direct_abstract_declarator -> . [ assignment_expression ]
    (157) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (158) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (159) direct_abstract_declarator -> . [ * ]
    (160) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (161) direct_abstract_declarator -> . ( )
    (162) direct_abstract_declarator -> . ( parameter_type_list )
    (163) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (164) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (167) parameter_list -> . parameter_declaration
    (168) parameter_list -> . parameter_list , parameter_declaration
    (169) parameter_declaration -> . declaration_specifiers declarator
    (170) parameter_declaration -> . declaration_specifiers abstract_declarator
    (171) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 313
    *               shift and go to state 42
    (               shift and go to state 276
    [               shift and go to state 242
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    abstract_declarator            shift and go to state 314
    parameter_type_list            shift and go to state 315
    pointer                        shift and go to state 275
    direct_abstract_declarator     shift and go to state 240
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 277

    (99) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (101) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 99 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 195


state 278

    (101) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (103) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 196


state 279

    (103) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (105) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 197


state 280

    (105) and_expression -> and_expression & equality_expression .
    (107) equality_expression -> equality_expression . EQ_NE relational_expression

    &               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 105 (and_expression -> and_expression & equality_expression .)
    EQ_NE           shift and go to state 198


state 281

    (107) equality_expression -> equality_expression EQ_NE relational_expression .
    (109) relational_expression -> relational_expression . < shift_expression
    (110) relational_expression -> relational_expression . > shift_expression
    (111) relational_expression -> relational_expression . GE_LE shift_expression

    EQ_NE           reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    &               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ^               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    |               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    AND_OP          reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ?               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    OR_OP           reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ;               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ,               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    ]               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    }               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    )               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    :               reduce using rule 107 (equality_expression -> equality_expression EQ_NE relational_expression .)
    <               shift and go to state 199
    >               shift and go to state 200
    GE_LE           shift and go to state 201


state 282

    (109) relational_expression -> relational_expression < shift_expression .
    (113) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    GE_LE           reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    EQ_NE           reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 109 (relational_expression -> relational_expression < shift_expression .)
    SHIFT_OP        shift and go to state 202


state 283

    (110) relational_expression -> relational_expression > shift_expression .
    (113) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    GE_LE           reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    EQ_NE           reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 110 (relational_expression -> relational_expression > shift_expression .)
    SHIFT_OP        shift and go to state 202


state 284

    (111) relational_expression -> relational_expression GE_LE shift_expression .
    (113) shift_expression -> shift_expression . SHIFT_OP additive_expression

    <               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    >               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    GE_LE           reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    EQ_NE           reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    &               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    ^               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    |               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    AND_OP          reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    ?               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    OR_OP           reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    ;               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    ,               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    ]               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    }               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    )               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    :               reduce using rule 111 (relational_expression -> relational_expression GE_LE shift_expression .)
    SHIFT_OP        shift and go to state 202


state 285

    (113) shift_expression -> shift_expression SHIFT_OP additive_expression .
    (115) additive_expression -> additive_expression . + multiplicative_expression
    (116) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_OP        reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    <               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    >               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    GE_LE           reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    EQ_NE           reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    &               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ^               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    |               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    AND_OP          reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ?               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    OR_OP           reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ;               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ,               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    ]               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    }               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    )               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    :               reduce using rule 113 (shift_expression -> shift_expression SHIFT_OP additive_expression .)
    +               shift and go to state 203
    -               shift and go to state 204


state 286

    (115) additive_expression -> additive_expression + multiplicative_expression .
    (118) multiplicative_expression -> multiplicative_expression . * cast_expression
    (119) multiplicative_expression -> multiplicative_expression . / cast_expression
    (120) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_OP        reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_LE           reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_NE           reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 115 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 287

    (116) additive_expression -> additive_expression - multiplicative_expression .
    (118) multiplicative_expression -> multiplicative_expression . * cast_expression
    (119) multiplicative_expression -> multiplicative_expression . / cast_expression
    (120) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_OP        reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_LE           reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_NE           reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 116 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 205
    /               shift and go to state 206
    %               shift and go to state 207


state 288

    (118) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_OP        reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_LE           reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_NE           reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 118 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 289

    (119) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_OP        reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_LE           reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_NE           reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 119 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 290

    (120) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_OP        reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_LE           reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_NE           reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 120 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 291

    (202) labeled_statement -> IDENTIFIER : statement .

    }               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    IDENTIFIER      reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    CASE            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    DEFAULT         reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    {               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    ;               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    IF              reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    SWITCH          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    WHILE           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    DO              reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    FOR             reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    GOTO            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    CONTINUE        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    BREAK           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    RETURN          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    TYPEDEF         reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    EXTERN          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    STATIC          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    AUTO            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    REGISTER        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    VOID            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    CHAR            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    SHORT           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    INT             reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    LONG            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    FLOAT           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    DOUBLE          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    SIGNED          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    UNSIGNED        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    BOOL            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    CONST           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    RESTRICT        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    VOLATILE        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    INLINE          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    ENUM            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    STRUCT          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    UNION           reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    INC_DEC         reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    SIZEOF          reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    (               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    &               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    *               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    +               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    -               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    ~               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    !               reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    CONSTANT        reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    STRING_LITERAL  reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)
    ELSE            reduce using rule 202 (labeled_statement -> IDENTIFIER : statement .)


state 292

    (203) labeled_statement -> CASE constant_expression : . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    statement                      shift and go to state 335
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 293

    (204) labeled_statement -> DEFAULT : statement .

    }               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    CASE            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    GOTO            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    EXTERN          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    STATIC          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    AUTO            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    REGISTER        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    VOID            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    CHAR            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    SHORT           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    INT             reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    LONG            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    FLOAT           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    DOUBLE          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    SIGNED          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    BOOL            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    CONST           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    RESTRICT        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    VOLATILE        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    INLINE          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    ENUM            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    STRUCT          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    UNION           reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    INC_DEC         reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    ~               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    CONSTANT        reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 204 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 204 (labeled_statement -> DEFAULT : statement .)


state 294

    (148) expression -> expression , assignment_expression .

    ;               reduce using rule 148 (expression -> expression , assignment_expression .)
    ,               reduce using rule 148 (expression -> expression , assignment_expression .)
    )               reduce using rule 148 (expression -> expression , assignment_expression .)
    :               reduce using rule 148 (expression -> expression , assignment_expression .)
    ]               reduce using rule 148 (expression -> expression , assignment_expression .)


state 295

    (207) selection_statement -> IF ( expression . ) statement ELSE statement
    (208) selection_statement -> IF ( expression . ) statement
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 336
    ,               shift and go to state 215


state 296

    (209) selection_statement -> SWITCH ( expression . ) statement
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 337
    ,               shift and go to state 215


state 297

    (210) iteration_statement -> WHILE ( expression . ) statement
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 338
    ,               shift and go to state 215


state 298

    (211) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 339


state 299

    (212) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (213) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 340
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 300

    (214) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (215) iteration_statement -> FOR ( declaration . expression_statement expression ) statement
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 117
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 341
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 301

    (216) jump_statement -> GOTO IDENTIFIER ; .

    }               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    {               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    TYPEDEF         reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    EXTERN          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    STATIC          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    AUTO            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    REGISTER        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    VOID            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    CHAR            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    SHORT           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    INT             reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    LONG            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    FLOAT           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    DOUBLE          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    SIGNED          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    UNSIGNED        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    BOOL            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    CONST           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    RESTRICT        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    VOLATILE        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    INLINE          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    ENUM            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    STRUCT          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    UNION           reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    INC_DEC         reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    (               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    &               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    *               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    +               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    -               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    !               reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 216 (jump_statement -> GOTO IDENTIFIER ; .)


state 302

    (220) jump_statement -> RETURN expression ; .

    }               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 220 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 220 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 220 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 220 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 220 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    TYPEDEF         reduce using rule 220 (jump_statement -> RETURN expression ; .)
    EXTERN          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    STATIC          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    AUTO            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    REGISTER        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 220 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    BOOL            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    CONST           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    RESTRICT        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    VOLATILE        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    INLINE          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    ENUM            reduce using rule 220 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    UNION           reduce using rule 220 (jump_statement -> RETURN expression ; .)
    INC_DEC         reduce using rule 220 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 220 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 220 (jump_statement -> RETURN expression ; .)
    CONSTANT        reduce using rule 220 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 220 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 220 (jump_statement -> RETURN expression ; .)


state 303

    (76) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .

    [               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    (               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    =               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    {               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    )               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    :               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)


state 304

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression . ]

    ]               shift and go to state 342


state 305

    (81) direct_declarator -> direct_declarator [ type_qualifier_list * ] .

    [               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    (               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    =               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    {               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    TYPEDEF         reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    EXTERN          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STATIC          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    AUTO            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    REGISTER        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOID            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CHAR            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SHORT           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INT             reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    LONG            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    FLOAT           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    DOUBLE          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SIGNED          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNSIGNED        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    BOOL            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CONST           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    RESTRICT        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOLATILE        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INLINE          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ENUM            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STRUCT          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNION           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ;               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ,               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    )               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    :               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)


state 306

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression . ]

    ]               shift and go to state 343


state 307

    (88) identifier_list -> identifier_list , IDENTIFIER .

    )               reduce using rule 88 (identifier_list -> identifier_list , IDENTIFIER .)
    ,               reduce using rule 88 (identifier_list -> identifier_list , IDENTIFIER .)


state 308

    (166) parameter_type_list -> parameter_list , ELLIPSIS .

    )               reduce using rule 166 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 309

    (168) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 168 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 168 (parameter_list -> parameter_list , parameter_declaration .)


state 310

    (153) abstract_declarator -> pointer direct_abstract_declarator .
    (157) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (158) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (160) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (163) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (164) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 153 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 153 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 311
    (               shift and go to state 312


state 311

    (157) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (158) direct_abstract_declarator -> direct_abstract_declarator [ . assignment_expression ]
    (160) direct_abstract_declarator -> direct_abstract_declarator [ . * ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 344
    *               shift and go to state 346
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 345
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 312

    (163) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (164) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (165) parameter_type_list -> . parameter_list
    (166) parameter_type_list -> . parameter_list , ELLIPSIS
    (167) parameter_list -> . parameter_declaration
    (168) parameter_list -> . parameter_list , parameter_declaration
    (169) parameter_declaration -> . declaration_specifiers declarator
    (170) parameter_declaration -> . declaration_specifiers abstract_declarator
    (171) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 347
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 348
    parameter_list                 shift and go to state 147
    parameter_declaration          shift and go to state 149
    declaration_specifiers         shift and go to state 150
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 313

    (161) direct_abstract_declarator -> ( ) .

    [               reduce using rule 161 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 161 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 161 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 161 (direct_abstract_declarator -> ( ) .)


state 314

    (154) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 349


state 315

    (162) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 350


state 316

    (155) direct_abstract_declarator -> [ ] .

    [               reduce using rule 155 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 155 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 155 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 155 (direct_abstract_declarator -> [ ] .)


state 317

    (156) direct_abstract_declarator -> [ assignment_expression . ]

    ]               shift and go to state 351


state 318

    (159) direct_abstract_declarator -> [ * . ]
    (129) unary_operator -> * .

    ]               shift and go to state 352
    (               reduce using rule 129 (unary_operator -> * .)
    INC_DEC         reduce using rule 129 (unary_operator -> * .)
    SIZEOF          reduce using rule 129 (unary_operator -> * .)
    &               reduce using rule 129 (unary_operator -> * .)
    *               reduce using rule 129 (unary_operator -> * .)
    +               reduce using rule 129 (unary_operator -> * .)
    -               reduce using rule 129 (unary_operator -> * .)
    ~               reduce using rule 129 (unary_operator -> * .)
    !               reduce using rule 129 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> * .)
    CONSTANT        reduce using rule 129 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 129 (unary_operator -> * .)


state 319

    (62) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 62 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 62 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 320

    (65) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 65 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 65 (struct_declarator -> declarator : constant_expression .)


state 321

    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .

    TYPEDEF         reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    EXTERN          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STATIC          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    AUTO            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    REGISTER        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOID            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CHAR            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SHORT           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INT             reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    LONG            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    FLOAT           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    DOUBLE          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SIGNED          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNSIGNED        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    BOOL            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CONST           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    RESTRICT        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOLATILE        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INLINE          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ENUM            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STRUCT          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNION           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ;               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    *               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    IDENTIFIER      reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    (               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    [               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ,               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    )               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    :               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)


state 322

    (180) initializer -> { initializer_list , } .

    ;               reduce using rule 180 (initializer -> { initializer_list , } .)
    ,               reduce using rule 180 (initializer -> { initializer_list , } .)
    }               reduce using rule 180 (initializer -> { initializer_list , } .)


state 323

    (176) initializer_list -> initializer_list , initializer .

    }               reduce using rule 176 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 176 (initializer_list -> initializer_list , initializer .)


state 324

    (177) initializer_list -> initializer_list , designation . initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 353
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 325

    (184) designator -> [ constant_expression ] .

    =               reduce using rule 184 (designator -> [ constant_expression ] .)
    [               reduce using rule 184 (designator -> [ constant_expression ] .)
    .               reduce using rule 184 (designator -> [ constant_expression ] .)


state 326

    (95) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    logical_or_expression          shift and go to state 86
    conditional_expression         shift and go to state 354
    logical_and_expression         shift and go to state 93
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 327

    (135) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    INC_DEC         reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ASSIGN_OP       reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    SHIFT_OP        reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    GE_LE           reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_NE           reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 135 (postfix_expression -> postfix_expression [ expression ] .)


state 328

    (137) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_DEC         reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ASSIGN_OP       reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SHIFT_OP        reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_LE           reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_NE           reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 137 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 329

    (173) argument_expression_list -> argument_expression_list , . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    assignment_expression          shift and go to state 355
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 330

    (141) postfix_expression -> ( type_name ) . { initializer_list }
    (142) postfix_expression -> ( type_name ) . { initializer_list , }

    {               shift and go to state 333


state 331

    (122) cast_expression -> ( type_name ) . cast_expression
    (141) postfix_expression -> ( type_name ) . { initializer_list }
    (142) postfix_expression -> ( type_name ) . { initializer_list , }
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )

    {               shift and go to state 333
    (               shift and go to state 188
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    cast_expression                shift and go to state 334
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    primary_expression             shift and go to state 94

state 332

    (127) unary_expression -> SIZEOF ( type_name ) .
    (141) postfix_expression -> ( type_name ) . { initializer_list }
    (142) postfix_expression -> ( type_name ) . { initializer_list , }

    =               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ASSIGN_OP       reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    SHIFT_OP        reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    GE_LE           reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_NE           reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 127 (unary_expression -> SIZEOF ( type_name ) .)
    {               shift and go to state 333


state 333

    (141) postfix_expression -> ( type_name ) { . initializer_list }
    (142) postfix_expression -> ( type_name ) { . initializer_list , }
    (174) initializer_list -> . initializer
    (175) initializer_list -> . designation initializer
    (176) initializer_list -> . initializer_list , initializer
    (177) initializer_list -> . initializer_list , designation initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (181) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (182) designator_list -> . designator
    (183) designator_list -> . designator_list designator
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (184) designator -> . [ constant_expression ]
    (185) designator -> . . IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer_list               shift and go to state 356
    initializer                    shift and go to state 168
    designation                    shift and go to state 169
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 334

    (122) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    SHIFT_OP        reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    GE_LE           reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    EQ_NE           reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    ASSIGN_OP       reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 122 (cast_expression -> ( type_name ) cast_expression .)


state 335

    (203) labeled_statement -> CASE constant_expression : statement .

    }               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    CASE            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    GOTO            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    STATIC          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    AUTO            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    VOID            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    CHAR            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    SHORT           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    INT             reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    LONG            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    BOOL            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    CONST           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    INLINE          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    ENUM            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    UNION           reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    INC_DEC         reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    ~               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    CONSTANT        reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 203 (labeled_statement -> CASE constant_expression : statement .)


state 336

    (207) selection_statement -> IF ( expression ) . statement ELSE statement
    (208) selection_statement -> IF ( expression ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 357
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 337

    (209) selection_statement -> SWITCH ( expression ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 358
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 338

    (210) iteration_statement -> WHILE ( expression ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 359
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 339

    (211) iteration_statement -> DO statement WHILE ( . expression ) ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 360
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 340

    (212) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (213) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 361
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 362
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 341

    (214) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (215) iteration_statement -> FOR ( declaration expression_statement . expression ) statement
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 363
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 364
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 342

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .

    [               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    (               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    =               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    {               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    TYPEDEF         reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    EXTERN          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STATIC          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    AUTO            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    REGISTER        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOID            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CHAR            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SHORT           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INT             reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    LONG            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    FLOAT           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    DOUBLE          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SIGNED          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNSIGNED        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    BOOL            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CONST           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    RESTRICT        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOLATILE        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INLINE          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ENUM            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STRUCT          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNION           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ;               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ,               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    )               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    :               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)


state 343

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .

    [               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    (               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    =               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    {               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    )               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    :               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)


state 344

    (157) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 157 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 157 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 157 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 157 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 345

    (158) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression . ]

    ]               shift and go to state 365


state 346

    (160) direct_abstract_declarator -> direct_abstract_declarator [ * . ]
    (129) unary_operator -> * .

    ]               shift and go to state 366
    (               reduce using rule 129 (unary_operator -> * .)
    INC_DEC         reduce using rule 129 (unary_operator -> * .)
    SIZEOF          reduce using rule 129 (unary_operator -> * .)
    &               reduce using rule 129 (unary_operator -> * .)
    *               reduce using rule 129 (unary_operator -> * .)
    +               reduce using rule 129 (unary_operator -> * .)
    -               reduce using rule 129 (unary_operator -> * .)
    ~               reduce using rule 129 (unary_operator -> * .)
    !               reduce using rule 129 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 129 (unary_operator -> * .)
    CONSTANT        reduce using rule 129 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 129 (unary_operator -> * .)


state 347

    (163) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 348

    (164) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 367


state 349

    (154) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 154 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 154 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 154 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 154 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 350

    (162) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 162 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 162 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 162 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 162 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 351

    (156) direct_abstract_declarator -> [ assignment_expression ] .

    [               reduce using rule 156 (direct_abstract_declarator -> [ assignment_expression ] .)
    (               reduce using rule 156 (direct_abstract_declarator -> [ assignment_expression ] .)
    ,               reduce using rule 156 (direct_abstract_declarator -> [ assignment_expression ] .)
    )               reduce using rule 156 (direct_abstract_declarator -> [ assignment_expression ] .)


state 352

    (159) direct_abstract_declarator -> [ * ] .

    [               reduce using rule 159 (direct_abstract_declarator -> [ * ] .)
    (               reduce using rule 159 (direct_abstract_declarator -> [ * ] .)
    ,               reduce using rule 159 (direct_abstract_declarator -> [ * ] .)
    )               reduce using rule 159 (direct_abstract_declarator -> [ * ] .)


state 353

    (177) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 177 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 177 (initializer_list -> initializer_list , designation initializer .)


state 354

    (95) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 95 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 355

    (173) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 173 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 173 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 356

    (141) postfix_expression -> ( type_name ) { initializer_list . }
    (142) postfix_expression -> ( type_name ) { initializer_list . , }
    (176) initializer_list -> initializer_list . , initializer
    (177) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 368
    ,               shift and go to state 369


state 357

    (207) selection_statement -> IF ( expression ) statement . ELSE statement
    (208) selection_statement -> IF ( expression ) statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 370
    }               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    GOTO            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    TYPEDEF         reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    EXTERN          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    STATIC          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    AUTO            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    REGISTER        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    CONST           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    RESTRICT        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    VOLATILE        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    INLINE          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    ENUM            reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    UNION           reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    INC_DEC         reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 208 (selection_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 208 (selection_statement -> IF ( expression ) statement .)

  ! ELSE            [ reduce using rule 208 (selection_statement -> IF ( expression ) statement .) ]


state 358

    (209) selection_statement -> SWITCH ( expression ) statement .

    }               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    IDENTIFIER      reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    CASE            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    DEFAULT         reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    {               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    ;               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    IF              reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    SWITCH          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    WHILE           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    DO              reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    FOR             reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    GOTO            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    CONTINUE        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    BREAK           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    RETURN          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    TYPEDEF         reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    EXTERN          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    STATIC          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    AUTO            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    REGISTER        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    VOID            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    CHAR            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    SHORT           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    INT             reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    LONG            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    FLOAT           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    DOUBLE          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    SIGNED          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    UNSIGNED        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    BOOL            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    CONST           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    RESTRICT        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    VOLATILE        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    INLINE          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    ENUM            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    STRUCT          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    UNION           reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    INC_DEC         reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    SIZEOF          reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    (               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    &               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    *               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    +               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    -               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    ~               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    !               reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    CONSTANT        reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    STRING_LITERAL  reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)
    ELSE            reduce using rule 209 (selection_statement -> SWITCH ( expression ) statement .)


state 359

    (210) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    GOTO            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    TYPEDEF         reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    EXTERN          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    STATIC          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    AUTO            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    REGISTER        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    CONST           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    RESTRICT        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    VOLATILE        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    INLINE          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    ENUM            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    UNION           reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    INC_DEC         reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 210 (iteration_statement -> WHILE ( expression ) statement .)


state 360

    (211) iteration_statement -> DO statement WHILE ( expression . ) ;
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 371
    ,               shift and go to state 215


state 361

    (212) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    statement                      shift and go to state 372
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 362

    (213) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 373
    ,               shift and go to state 215


state 363

    (214) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    statement                      shift and go to state 374
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 364

    (215) iteration_statement -> FOR ( declaration expression_statement expression . ) statement
    (148) expression -> expression . , assignment_expression

    )               shift and go to state 375
    ,               shift and go to state 215


state 365

    (158) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .

    [               reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    (               reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    ,               reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    )               reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)


state 366

    (160) direct_abstract_declarator -> direct_abstract_declarator [ * ] .

    [               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    (               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    ,               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    )               reduce using rule 160 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)


state 367

    (164) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 368

    (141) postfix_expression -> ( type_name ) { initializer_list } .

    [               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    (               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    .               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    PTR_OP          reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    INC_DEC         reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    =               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ASSIGN_OP       reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    *               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    /               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    %               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    +               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    -               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    SHIFT_OP        reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    <               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    >               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    GE_LE           reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    EQ_NE           reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    &               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ^               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    |               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_OP          reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ?               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_OP           reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ;               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ,               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    ]               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    }               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    )               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)
    :               reduce using rule 141 (postfix_expression -> ( type_name ) { initializer_list } .)


state 369

    (142) postfix_expression -> ( type_name ) { initializer_list , . }
    (176) initializer_list -> initializer_list , . initializer
    (177) initializer_list -> initializer_list , . designation initializer
    (178) initializer -> . assignment_expression
    (179) initializer -> . { initializer_list }
    (180) initializer -> . { initializer_list , }
    (181) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (182) designator_list -> . designator
    (183) designator_list -> . designator_list designator
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (184) designator -> . [ constant_expression ]
    (185) designator -> . . IDENTIFIER
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 376
    {               shift and go to state 83
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    [               shift and go to state 172
    .               shift and go to state 173
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    IDENTIFIER      shift and go to state 95
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    initializer                    shift and go to state 323
    designation                    shift and go to state 324
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 170
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 171
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 370

    (207) selection_statement -> IF ( expression ) statement ELSE . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression                     shift and go to state 127
    statement                      shift and go to state 377
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    expression_statement           shift and go to state 120
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 371

    (211) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 378


state 372

    (212) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IDENTIFIER      reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    TYPEDEF         reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    EXTERN          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STATIC          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    AUTO            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    REGISTER        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SHORT           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    LONG            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FLOAT           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DOUBLE          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIGNED          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNSIGNED        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONST           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RESTRICT        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOLATILE        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INLINE          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ENUM            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNION           reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_DEC         reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANT        reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 212 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 373

    (213) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    expression                     shift and go to state 127
    statement                      shift and go to state 379
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 374

    (214) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IDENTIFIER      reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CASE            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEFAULT         reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SWITCH          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    GOTO            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONTINUE        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BREAK           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RETURN          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    TYPEDEF         reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    EXTERN          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STATIC          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    AUTO            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    REGISTER        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SHORT           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    LONG            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FLOAT           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DOUBLE          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIGNED          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNSIGNED        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONST           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RESTRICT        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOLATILE        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INLINE          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ENUM            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNION           reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC_DEC         reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONSTANT        reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 214 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 375

    (215) iteration_statement -> FOR ( declaration expression_statement expression ) . statement
    (196) statement -> . labeled_statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) labeled_statement -> . IDENTIFIER : statement
    (203) labeled_statement -> . CASE constant_expression : statement
    (204) labeled_statement -> . DEFAULT : statement
    (190) compound_statement -> . { }
    (191) compound_statement -> . { block_item_list }
    (205) expression_statement -> . ;
    (206) expression_statement -> . expression ;
    (207) selection_statement -> . IF ( expression ) statement ELSE statement
    (208) selection_statement -> . IF ( expression ) statement
    (209) selection_statement -> . SWITCH ( expression ) statement
    (210) iteration_statement -> . WHILE ( expression ) statement
    (211) iteration_statement -> . DO statement WHILE ( expression ) ;
    (212) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (213) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (214) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (215) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (216) jump_statement -> . GOTO IDENTIFIER ;
    (217) jump_statement -> . CONTINUE ;
    (218) jump_statement -> . BREAK ;
    (219) jump_statement -> . RETURN ;
    (220) jump_statement -> . RETURN expression ;
    (147) expression -> . assignment_expression
    (148) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) conditional_expression -> . logical_or_expression
    (95) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (123) unary_expression -> . postfix_expression
    (124) unary_expression -> . INC_DEC unary_expression
    (125) unary_expression -> . unary_operator cast_expression
    (126) unary_expression -> . SIZEOF unary_expression
    (127) unary_expression -> . SIZEOF ( type_name )
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression [ expression ]
    (136) postfix_expression -> . postfix_expression ( )
    (137) postfix_expression -> . postfix_expression ( argument_expression_list )
    (138) postfix_expression -> . postfix_expression . IDENTIFIER
    (139) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (140) postfix_expression -> . postfix_expression INC_DEC
    (141) postfix_expression -> . ( type_name ) { initializer_list }
    (142) postfix_expression -> . ( type_name ) { initializer_list , }
    (128) unary_operator -> . &
    (129) unary_operator -> . *
    (130) unary_operator -> . +
    (131) unary_operator -> . -
    (132) unary_operator -> . ~
    (133) unary_operator -> . !
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (143) primary_expression -> . IDENTIFIER
    (144) primary_expression -> . CONSTANT
    (145) primary_expression -> . STRING_LITERAL
    (146) primary_expression -> . ( expression )
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression & equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ_NE relational_expression
    (108) relational_expression -> . shift_expression
    (109) relational_expression -> . relational_expression < shift_expression
    (110) relational_expression -> . relational_expression > shift_expression
    (111) relational_expression -> . relational_expression GE_LE shift_expression
    (112) shift_expression -> . additive_expression
    (113) shift_expression -> . shift_expression SHIFT_OP additive_expression
    (114) additive_expression -> . multiplicative_expression
    (115) additive_expression -> . additive_expression + multiplicative_expression
    (116) additive_expression -> . additive_expression - multiplicative_expression
    (117) multiplicative_expression -> . cast_expression
    (118) multiplicative_expression -> . multiplicative_expression * cast_expression
    (119) multiplicative_expression -> . multiplicative_expression / cast_expression
    (120) multiplicative_expression -> . multiplicative_expression % cast_expression
    (121) cast_expression -> . unary_expression
    (122) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 124
    CASE            shift and go to state 125
    DEFAULT         shift and go to state 126
    {               shift and go to state 58
    ;               shift and go to state 117
    IF              shift and go to state 128
    SWITCH          shift and go to state 129
    WHILE           shift and go to state 130
    DO              shift and go to state 131
    FOR             shift and go to state 132
    GOTO            shift and go to state 133
    CONTINUE        shift and go to state 134
    BREAK           shift and go to state 135
    RETURN          shift and go to state 136
    INC_DEC         shift and go to state 88
    SIZEOF          shift and go to state 91
    (               shift and go to state 92
    &               shift and go to state 96
    *               shift and go to state 97
    +               shift and go to state 98
    -               shift and go to state 99
    ~               shift and go to state 100
    !               shift and go to state 101
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 104

    expression_statement           shift and go to state 120
    expression                     shift and go to state 127
    statement                      shift and go to state 380
    labeled_statement              shift and go to state 118
    compound_statement             shift and go to state 119
    selection_statement            shift and go to state 121
    iteration_statement            shift and go to state 122
    jump_statement                 shift and go to state 123
    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 89
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 93
    primary_expression             shift and go to state 94
    inclusive_or_expression        shift and go to state 102
    exclusive_or_expression        shift and go to state 105
    and_expression                 shift and go to state 106
    equality_expression            shift and go to state 107
    relational_expression          shift and go to state 108
    shift_expression               shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 111

state 376

    (142) postfix_expression -> ( type_name ) { initializer_list , } .

    [               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    (               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    .               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    PTR_OP          reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INC_DEC         reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    =               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ASSIGN_OP       reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    *               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    /               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    %               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    +               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    -               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SHIFT_OP        reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    <               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    >               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    GE_LE           reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    EQ_NE           reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    &               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ^               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    |               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_OP          reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ?               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_OP           reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ;               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ,               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ]               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    }               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    )               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)
    :               reduce using rule 142 (postfix_expression -> ( type_name ) { initializer_list , } .)


state 377

    (207) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CASE            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    GOTO            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TYPEDEF         reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    EXTERN          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STATIC          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    AUTO            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    REGISTER        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONST           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RESTRICT        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOLATILE        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INLINE          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ENUM            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNION           reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_DEC         reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 207 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 378

    (211) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    GOTO            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    TYPEDEF         reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    EXTERN          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STATIC          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    AUTO            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    REGISTER        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIGNED          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNSIGNED        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONST           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RESTRICT        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOLATILE        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INLINE          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ENUM            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNION           reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_DEC         reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANT        reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 211 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 379

    (213) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CASE            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEFAULT         reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SWITCH          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    GOTO            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    EXTERN          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STATIC          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    AUTO            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    REGISTER        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOID            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SHORT           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT             reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    LONG            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FLOAT           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DOUBLE          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIGNED          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONST           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RESTRICT        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOLATILE        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INLINE          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ENUM            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRUCT          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNION           reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_DEC         reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 213 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 380

    (215) iteration_statement -> FOR ( declaration expression_statement expression ) statement .

    }               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CASE            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEFAULT         reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    {               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ;               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IF              reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SWITCH          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    WHILE           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DO              reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FOR             reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    GOTO            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONTINUE        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BREAK           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RETURN          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    EXTERN          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STATIC          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    AUTO            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    REGISTER        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOID            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SHORT           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT             reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    LONG            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FLOAT           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DOUBLE          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIGNED          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONST           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RESTRICT        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOLATILE        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INLINE          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ENUM            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRUCT          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNION           reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INC_DEC         reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIZEOF          reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    (               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    &               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    *               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    +               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    -               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ~               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    !               reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONSTANT        reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ELSE            reduce using rule 215 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 357 resolved as shift
